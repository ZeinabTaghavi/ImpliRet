----------------------------  ColBERT  ----------------------------------
Retrieving for track A, type Multi, retriever_name colbert

#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#> Input: What brand and model of what was the brand and model of the smartphone that cost $1950? were priced at $1,950?, 		 True, 		 None
#> Output IDs: torch.Size([32]), tensor([  101,     1,  2054,  4435,  1998,  2944,  1997,  2054,  2001,  1996,
         4435,  1998,  2944,  1997,  1996, 26381,  2008,  3465,  1002,  3925,
         1029,  2020, 21125,  2012,  1002,  1015,  1010, 20317,  1029,   102,
          103,   103], device='cuda:0')
#> Output Mask: torch.Size([32]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0], device='cuda:0')

Results saved to ./Retrieval/Results/A_Multi_colbert_index.jsonl
Retrieving for track A, type Uni, retriever_name colbert

#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#> Input: What did Dante buy for $1,450?, 		 True, 		 None
#> Output IDs: torch.Size([32]), tensor([  101,     1,  2054,  2106,  9649,  4965,  2005,  1002,  1015,  1010,
        10332,  1029,   102,   103,   103,   103,   103,   103,   103,   103,
          103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
          103,   103], device='cuda:0')
#> Output Mask: torch.Size([32]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')

Results saved to ./Retrieval/Results/A_Uni_colbert_index.jsonl
Retrieving for track T, type Multi, retriever_name colbert

#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#> Input: Who was reading a leisure book on February 27, 2024?, 		 True, 		 None
#> Output IDs: torch.Size([32]), tensor([  101,     1,  2040,  2001,  3752,  1037, 12257,  2338,  2006,  2337,
         2676,  1010, 16798,  2549,  1029,   102,   103,   103,   103,   103,
          103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
          103,   103], device='cuda:0')
#> Output Mask: torch.Size([32]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')

Results saved to ./Retrieval/Results/T_Multi_colbert_index.jsonl
Retrieving for track T, type Uni, retriever_name colbert

#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#> Input: What was {'name': 'Dante', 'persona': 'Dante is a poet and spoken word artist from Italy, whose work explores themes of identity, love, and social justice. He performs at literary festivals and community events, using his powerful voice to inspire and provoke thought. He believes poetry can be a catalyst for change.'} scheduled to be doing at 16:00 on April 26, 2021?, 		 True, 		 None
#> Output IDs: torch.Size([32]), tensor([  101,     1,  2054,  2001,  1063,  1005,  2171,  1005,  1024,  1005,
         9649,  1005,  1010,  1005, 16115,  1005,  1024,  1005,  9649,  2003,
         1037,  4802,  1998,  5287,  2773,  3063,  2013,  3304,  1010,  3005,
         2147,   102], device='cuda:0')
#> Output Mask: torch.Size([32]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1], device='cuda:0')

Results saved to ./Retrieval/Results/T_Uni_colbert_index.jsonl
Retrieving for track S, type Multi, retriever_name colbert

#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#> Input: Who has participated in a community skills workshop in United Kingdom?, 		 True, 		 None
#> Output IDs: torch.Size([32]), tensor([ 101,    1, 2040, 2038, 4194, 1999, 1037, 2451, 4813, 8395, 1999, 2142,
        2983, 1029,  102,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103,  103,  103,  103,  103], device='cuda:0')
#> Output Mask: torch.Size([32]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')

Results saved to ./Retrieval/Results/F_Multi_colbert_index.jsonl
Retrieving for track S, type Uni, retriever_name colbert

#> QueryTokenizer.tensorize(batch_text[0], batch_background[0], bsize) ==
#> Input: What was Dante's reason for visiting Germany?, 		 True, 		 None
#> Output IDs: torch.Size([32]), tensor([ 101,    1, 2054, 2001, 9649, 1005, 1055, 3114, 2005, 5873, 2762, 1029,
         102,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
         103,  103,  103,  103,  103,  103,  103,  103], device='cuda:0')
#> Output Mask: torch.Size([32]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0], device='cuda:0')

Results saved to ./Retrieval/Results/F_Uni_colbert_index.jsonl
