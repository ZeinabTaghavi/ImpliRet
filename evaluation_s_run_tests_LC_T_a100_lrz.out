Starting the job
[run_tests] Parsed CLI / YAML arguments
[run_tests] Found modelâ€‘config and dataset files.
[run_tests] Initialising ExperimentTester â€¦

 ----------- [STEP 1] Initialization -----------
Loading dataset configurations...

 ----------- [STEP 2] Processing Data -----------
Building conversation dictionaries...
[Init] ExperimentTester initialisation complete. Results will be written to ./Experiments/evaluation/results/T_Uni/llama_3.3_70b/T_Uni_llama_3.3_70b_1_1747489058.json

 ----------- [STEP 4] Running Evaluation -----------
Processing 1500 examples...

 ----------- [STEP 5] Generating Responses -----------
Loading model and passing prompts to it...

 ----------- [STEP 1] Checking vLLM Installation -----------

 ----------- [STEP 2] Setting Up Model Configuration -----------
[ModelLoader] tensor_parallel_size=4. Ensure you have enough GPU memory for all shards.
[ModelLoader] Loading meta-llama/Llama-3.3-70B-Instruct via local vLLM (TP=4, util=0.9, dir=None)

 ----------- [STEP 3] Loading Model -----------
INFO 05-17 15:37:53 config.py:510] This model supports multiple tasks: {'score', 'reward', 'classify', 'embed', 'generate'}. Defaulting to 'generate'.
INFO 05-17 15:37:53 config.py:1310] Defaulting to use mp for distributed inference
WARNING 05-17 15:37:53 arg_utils.py:1103] Chunked prefill is enabled by default for models with max_model_len > 32K. Currently, chunked prefill might not work with some features or models. If you encounter any issues, please disable chunked prefill by setting --enable-chunked-prefill=False.
INFO 05-17 15:37:53 config.py:1458] Chunked prefill is enabled with max_num_batched_tokens=2048.
INFO 05-17 15:37:53 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='meta-llama/Llama-3.3-70B-Instruct', speculative_config=None, tokenizer='meta-llama/Llama-3.3-70B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=131072, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=4, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=meta-llama/Llama-3.3-70B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=True, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
WARNING 05-17 15:37:54 multiproc_worker_utils.py:312] Reducing Torch parallelism from 8 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 05-17 15:37:54 custom_cache_manager.py:17] Setting Triton cache manager to: vllm.triton_utils.custom_cache_manager:CustomCacheManager
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:37:56 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:37:56 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:37:56 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:37:56 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
INFO 05-17 15:37:56 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:37:56 selector.py:120] Using Flash Attention backend.
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:37:56 multiproc_worker_utils.py:222] Worker ready; awaiting tasks
INFO 05-17 15:37:59 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:37:59 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:37:59 utils.py:918] Found nccl from library libnccl.so.2
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:37:59 utils.py:918] Found nccl from library libnccl.so.2
INFO 05-17 15:37:59 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:37:59 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:37:59 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:37:59 pynccl.py:69] vLLM is using nccl==2.21.5
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:38:00 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /dss/dsshome1/0B/di38wip/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3.json
INFO 05-17 15:38:00 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /dss/dsshome1/0B/di38wip/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3.json
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:38:00 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /dss/dsshome1/0B/di38wip/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3.json
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:38:00 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /dss/dsshome1/0B/di38wip/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3.json
INFO 05-17 15:38:00 shm_broadcast.py:255] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3], buffer_handle=(3, 4194304, 6, 'psm_0e981165'), local_subscribe_port=34561, remote_subscribe_port=None)
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:38:00 model_runner.py:1094] Starting to load model meta-llama/Llama-3.3-70B-Instruct...
INFO 05-17 15:38:00 model_runner.py:1094] Starting to load model meta-llama/Llama-3.3-70B-Instruct...
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:38:00 model_runner.py:1094] Starting to load model meta-llama/Llama-3.3-70B-Instruct...
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:38:00 model_runner.py:1094] Starting to load model meta-llama/Llama-3.3-70B-Instruct...
INFO 05-17 15:38:02 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:38:02 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:38:02 weight_utils.py:251] Using model weights format ['*.safetensors']
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:38:02 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 05-17 15:40:58 model_runner.py:1099] Loading model weights took 32.8892 GB
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:40:58 model_runner.py:1099] Loading model weights took 32.8892 GB
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:40:58 model_runner.py:1099] Loading model weights took 32.8892 GB
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:40:58 model_runner.py:1099] Loading model weights took 32.8892 GB
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:41:13 worker.py:241] Memory profiling takes 15.41 seconds
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:41:13 worker.py:241] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.90) = 71.24GiB
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:41:13 worker.py:241] model weights take 32.89GiB; non_torch_memory takes 2.09GiB; PyTorch activation peak memory takes 0.24GiB; the rest of the memory reserved for KV Cache is 36.02GiB.
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:41:13 worker.py:241] Memory profiling takes 15.43 seconds
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:41:13 worker.py:241] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.90) = 71.24GiB
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:41:13 worker.py:241] model weights take 32.89GiB; non_torch_memory takes 1.95GiB; PyTorch activation peak memory takes 0.24GiB; the rest of the memory reserved for KV Cache is 36.16GiB.
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:41:13 worker.py:241] Memory profiling takes 15.43 seconds
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:41:13 worker.py:241] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.90) = 71.24GiB
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:41:13 worker.py:241] model weights take 32.89GiB; non_torch_memory takes 2.09GiB; PyTorch activation peak memory takes 0.24GiB; the rest of the memory reserved for KV Cache is 36.02GiB.
INFO 05-17 15:41:13 worker.py:241] Memory profiling takes 15.84 seconds
INFO 05-17 15:41:13 worker.py:241] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.90) = 71.24GiB
INFO 05-17 15:41:13 worker.py:241] model weights take 32.89GiB; non_torch_memory takes 2.04GiB; PyTorch activation peak memory takes 1.20GiB; the rest of the memory reserved for KV Cache is 35.10GiB.
INFO 05-17 15:41:14 distributed_gpu_executor.py:57] # GPU blocks: 28753, # CPU blocks: 3276
INFO 05-17 15:41:14 distributed_gpu_executor.py:61] Maximum concurrency for 131072 tokens per request: 3.51x
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:41:21 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:41:21 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:41:21 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-17 15:41:21 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:41:42 custom_all_reduce.py:224] Registering 5635 cuda graph addresses
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:41:42 custom_all_reduce.py:224] Registering 5635 cuda graph addresses
INFO 05-17 15:41:42 custom_all_reduce.py:224] Registering 5635 cuda graph addresses
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:41:42 custom_all_reduce.py:224] Registering 5635 cuda graph addresses
INFO 05-17 15:41:42 model_runner.py:1535] Graph capturing finished in 22 secs, took 2.46 GiB
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:41:42 model_runner.py:1535] Graph capturing finished in 22 secs, took 2.46 GiB
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:41:42 model_runner.py:1535] Graph capturing finished in 22 secs, took 2.46 GiB
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:41:42 model_runner.py:1535] Graph capturing finished in 22 secs, took 2.46 GiB
INFO 05-17 15:41:42 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 44.57 seconds
Model loaded successfully.

 ----------- [STEP 4] Loading Tokenizer -----------
Tokenizer loaded successfully.
--------------------------------
Sending prompts to model...

 ----------- [STEP 1] Preparing Messages -----------

 ----------- [STEP 2] Setting Sampling Parameters -----------

 ----------- [STEP 3] Generating Responses -----------
INFO 05-17 15:41:43 chat_utils.py:333] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.

 ----------- [STEP 4] Processing Results -----------

 ----------- [STEP 6] Computing Scores -----------

 ----------- [STEP 7] Saving Results -----------

 ----------- Evaluation Complete -----------
Results saved to: ./Experiments/evaluation/results/T_Uni/llama_3.3_70b/T_Uni_llama_3.3_70b_1_1747489058.json
[run_tests] Experiment completed.
INFO 05-17 15:45:30 multiproc_worker_utils.py:140] Terminating local vLLM worker processes
[1;36m(VllmWorkerProcess pid=4098199)[0;0m INFO 05-17 15:45:30 multiproc_worker_utils.py:247] Worker exiting
[1;36m(VllmWorkerProcess pid=4098200)[0;0m INFO 05-17 15:45:30 multiproc_worker_utils.py:247] Worker exiting
[1;36m(VllmWorkerProcess pid=4098201)[0;0m INFO 05-17 15:45:30 multiproc_worker_utils.py:247] Worker exiting
