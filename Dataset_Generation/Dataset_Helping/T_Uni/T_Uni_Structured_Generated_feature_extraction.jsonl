"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-04-25\",\n      \"2021-04-26\",\n      \"2021-04-27\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2021-04-17\",\n      \"2021-04-18\",\n      \"2021-04-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"rehearse a new song for a club gig\",\n    \"days\": [\n      \"2021-05-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    \n    for line in conversation:\n        if \"checking daily emails\" in line:\n            \n            # Extract temporal information\n            days_ago = 20\n            consecutive_days = 4\n            start_hour = 7\n            duration_hours = 3\n            \n            # Calculate the start date\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            \n            # Calculate the end date\n            end_date = start_date + timedelta(days=consecutive_days)\n            \n            # Get all dates within the range\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n\n            # Create task details dictionary\n            task_detail = {\n                \"work\": \"checking daily emails\",\n                \"days\": dates,\n                \"hours\": (start_hour, start_hour + duration_hours)\n            }\n            task_details.append(task_detail)\n            \n    return task_details\n\n# Example usage:\nconversation = [\n    \"Long time no talk!\",\n    \"Dante: Hey Imani! Just wanted to share, I\u2019ve been swamped with having to check daily emails. It started 20 days ago, for 4 consecutive days, and I've been doing it from 7 in the morning for three hours each day.\",\n    \"Imani: Oh, that sounds demanding, Dante! I'm glad you reached out. How are things going otherwise?\",\n    \"Dante: It's been a bit tiring, truthfully, but it\u2019s necessary for staying on top of things. Just trying to find a rhythm. What\u2019s been keeping you busy?\",\n    \"Im"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2021-04-17\",\n      \"2021-04-25\"\n    ],\n    \"hours\": (11, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2021-04-22\",\n      \"2021-04-23\",\n      \"2021-04-24\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"craft a custom briefcase\",\n    \"days\": [\n      \"2021-04-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-04-16\",\n      \"2021-04-20\"\n    ],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-04-24\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  },\n  {\n    \"work\": \"Scrim\",\n    \"days\": [\n      \"2021-05-10\"\n    ],\n    \"hours\": [\n      10,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-04-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a project timeline\",\n    \"days\": [\n      \"2021-04-16\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  },\n  {\n    \"work\": \"window displays\",\n    \"days\": [\n      \"2021-05-19\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2021-04-26\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries containing task details.  Empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"organize a community event\" in line:\n            try:\n                _, dante, utterance = line.split(\" \", 2)\n                days_ago = int(utterance.split(\" \")[-2])\n                event_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                event_date_str = event_date.strftime(\"%Y-%m-%d\")\n                hours = (13, 16)  # 1 p.m. to 4 p.m.\n                tasks.append({\n                    \"work\": \"organize a community event\",\n                    \"days\": [event_date_str],\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass\n        if \"building\" in line and \"boat\" in line:\n            tasks.append({\n                    \"work\": \"building a boat\",\n                    \"days\": [conversation_date],\n                    \"hours\": (9, 17)\n                })\n            \n    return tasks\n\n# Example usage (assuming the conversation date is 2024-02-29):\nconversation = [\n    \"How's everything going?\",\n    \"Dante: Hey Dominic, things have been a bit hectic lately. I had to organize a community event 17 days ago, and it took up a lot of my time from 1 p.m. until 4 p.m.\",\n    \"Dominic: That sounds like quite an undertaking, Dante. I admire your dedication to bringing people together.\",\n    \"Dante: Thanks, Dominic. It was rewarding, though tiring. It\u2019s nice to finally have a bit of breathing room and focus on my poetry again. I've been wanting to"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2021-04-21\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2021-04-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"writing some new pieces\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-04-16\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (16, 19)\n  },\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (16, 19)\n  },\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-21\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2021-05-09\",\n      \"2021-05-12\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"artwork for the next volume\",\n    \"days\": [\n      \"2021-04-26\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-02-30\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"performing a new piece at a small festival\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-05-06\",\n      \"2021-05-11\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2021-04-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2021-05-11\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-01-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"have a rough cut ready\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"start working on a new poem\",\n    \"days\": [\n      \"2024-01-29\",\n      \"2024-01-30\",\n      \"2024-01-31\",\n      \"2024-02-01\",\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\",\n      \"2024-03-17\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2021-04-30\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Prepare a proposal document\",\n    \"days\": [\n      \"2021-05-08\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"Wrestling with a block of marble\",\n    \"days\": [\n      \"2021-05-05\",\n      \"2021-05-06\",\n      \"2021-05-07\",\n      \"2021-05-08\",\n      \"2021-05-09\",\n      \"2021-05-10\",\n      \"2021-05-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2021-05-09\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2021-05-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2021-05-11\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"repair a pocket watch\",\n    \"days\": [\n      \"2021-04-20\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Maintaining a daily checklist\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2020-02-13\",\n      \"2020-02-14\",\n      \"2020-02-15\",\n      \"2020-02-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-01-03\",\n      \"2024-01-06\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-03-03\",\n      \"2024-03-08\",\n      \"2024-03-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2020-02-13\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"glassblowing\",\n    \"days\": [\n      \"2020-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2020-02-10\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2020-02-11\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2020-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2020-02-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"harvesting\",\n    \"days\": [\n      \"2020-02-17\",\n      \"2020-02-18\",\n      \"2020-02-19\",\n      \"2020-02-20\",\n      \"2020-02-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2020-02-16\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, and hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task\n              and contains its description, dates, and hours.  Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    work_task = \"responding to customer inquiries\"\n    hours = (16, 19)\n\n    days = []\n    for line in conversation:\n        if work_task in line.lower():\n            if \"today\" in line.lower():\n                date = conversation_date\n            elif \"yesterday\" in line.lower():\n                date = conversation_date - timedelta(days=1)\n            elif \"2 days ago\" in line.lower():\n                date = conversation_date - timedelta(days=2)\n            elif \"3 consecutive days\" in line.lower():\n                start_date = conversation_date\n                for i in range(3):\n                    date = start_date + timedelta(days=i)\n                    days.append(date.strftime(\"%Y-%m-%d\"))\n            else:\n                continue\n\n            if date.strftime(\"%Y-%m-%d\") not in days:\n                days.append(date.strftime(\"%Y-%m-%d\"))\n\n\n    if days:\n        tasks.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return tasks\n```\n\n```\n[\n    {\n        \"work\": \"responding to customer inquiries\",\n        \"days\": [\n            \"2024-01-01\",\n            \"2023-12-31\",\n            \"2023-12-30\",\n            \"2024-"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2020-02-24\",\n      \"2020-02-25\",\n      \"2020-02-26\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no work task or offset_days is found.\n    \"\"\"\n    work_task = \"daily planning\"\n    offset_days = 4\n    consecutive_days = 4\n    start_time_str = \"12 noon\"\n    duration_hours = 2\n\n    try:\n        conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    except ValueError:\n        return []\n\n    start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n    start_hour = start_time.hour\n    end_hour = (start_hour + duration_hours) % 24\n\n    days = []\n    current_date = conversation_datetime + timedelta(days=offset_days)\n    for i in range(consecutive_days):\n        days.append(current_date.strftime(\"%Y-%m-%d\"))\n        current_date += timedelta(days=1)\n\n    return [\n        {\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": (start_hour, end_hour),\n        }\n    ]\n\n\nconversation = [\n    \"Hailey: Anything fun planned?\",\n    \"Alejandro: You won't believe how busy things have been! I have to work on daily planning starting in 4 days, for 4 consecutive days, all from 12 noon until 2 hours after that.\",\n    \"Hailey: Oh, that sounds\u2026structured! I've been trying to stay away from schedules as much as possible lately. You know, just letting the mountain dictate my day.\",\n    \"Alejandro"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2020-02-21\",\n      \"2020-02-24\",\n      \"2020-03-05\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"Pruning coffee plants\",\n    \"days\": [\n      \"2020-02-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"Rehearsal with actors\",\n    \"days\": [\n      \"2020-02-14\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-02-28\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date_str (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"submit a project proposal\" in line:\n            try:\n                parts = line.split(\"working on it from\")\n                if len(parts) > 1:\n                    time_part = parts[1].strip()\n                    start_hour = int(time_part.split(\" in the morning\")[0])\n                    end_hour = start_hour + 3\n\n                    offset_days = 22\n                    task_date = conversation_date + timedelta(days=offset_days)\n\n                    tasks.append({\n                        \"work\": \"submit a project proposal\",\n                        \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                        \"hours\": (start_hour, end_hour)\n                    })\n            except:\n                pass\n\n    return tasks\n```\n\n```\n[\n    {\n        'work': 'submit a project proposal',\n        'days': ['2024-07-13'],\n        'hours': (7, 10)\n    },\n    {\n        'work': 'submit a project proposal',\n        'days': ['2024-07-13'],\n        'hours': (7, 10)\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2020-02-28\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2020-03-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-02-22\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-02-26\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2020-02-27\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    results = []\n\n    for line in conversation:\n        if \"reviewing a performance report\" in line or \"review a performance report\" in line or \"reviewed a performance report\" in line:\n            if \"12 days later\" in line:\n                task_date = conversation_date + timedelta(days=12)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                if \"from 4 p.m.\" in line:\n                    start_hour = 16\n                    if \"for three hours\" in line:\n                        end_hour = 19\n                    else:\n                        end_hour = 16 + 3  # Assuming 3 hours if duration is not explicitly stated\n                else:\n                    start_hour = None\n                    end_hour = None\n                \n                results.append({\n                    \"work\": \"Reviewing a performance report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n\n    return results\n```\n\n```\n[\n    {\n        \"work\": \"Reviewing a performance report\",\n        \"days\": [\n            \"2024-01-13\"\n        ],\n        \"hours\": (\n            16,\n            19\n        )\n    },\n    {\n        \"work\": \"Reviewing a performance report\",\n        \"days\": [\n            \"2024-01-13\"\n        ],\n        \"hours\": (\n            16,\n            19\n        )\n    },\n    {\n        \"work\": \"Review"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2022-10-20\",\n      \"2022-10-21\",\n      \"2022-10-22\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practicing a musical instrument\",\n    \"days\": [\n      \"2022-10-15\",\n      \"2022-10-16\",\n      \"2022-10-17\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"prep for lunch service\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": (10, 12)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    \n    # Parse the conversation date\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Identify the work task\n    task = \"daily huddle\"\n\n    # Extract temporal details\n    days = []\n    hours = (7, 9)  # The huddle is from 7 to 9\n\n    # Calculate the start date\n    start_date = date_obj - timedelta(days=5)\n    \n    # Add the dates for the four consecutive days\n    for i in range(4):\n        current_date = start_date + timedelta(days=i)\n        days.append(current_date.strftime(\"%Y-%m-%d\"))\n    \n    #Add today's date\n    days.append(date_obj.strftime(\"%Y-%m-%d\"))\n\n    #Determine the end date. The huddles end in two days.\n    end_date = date_obj + timedelta(days=2)\n\n    task_details.append({\n        \"work\": task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2022-10-15\",\n      \"2022-10-24\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2022-10-16\",\n      \"2022-10-19\",\n      \"2022-10-26\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\",\n      \"2024-03-13\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-10-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"cataloging a new acquisition\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"prepping for dinner service\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      17,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2022-10-19\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a community event\",\n    \"days\": [\n      \"2022-10-17\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a proposal document\" in line:\n            try:\n                parts = line.split(\"working from \")\n                time_str = parts[1].split(\" for \")[0]\n                duration_str = parts[1].split(\" for \")[1].split(\" hours\")[0]\n                start_hour = int(time_str.split(\" \")[0])\n                end_hour = start_hour + int(duration_str)\n\n                days_ago = 15\n                task_date = conversation_date - timedelta(days=days_ago)\n                \n                tasks.append({\n                    \"work\": \"prepare a proposal document\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError):\n                pass  # Handle cases where time or duration is not in the expected format\n\n    return tasks\n```\n\n```\n[\n    {\n        \"work\": \"prepare a proposal document\",\n        \"days\": [\n            \"2024-01-11\"\n        ],\n        \"hours\": (\n            9,\n            12\n        )\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"stress-testing a new recipe\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"hosting a Korean cooking class\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"working on a custom briefcase\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"experimenting with edge treatments\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"get those stitches perfect\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Draft a legal memorandum\",\n    \"days\": [\n      \"2022-10-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Draft another legal memorandum (potential)\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2022-11-03\",\n      \"2022-11-04\",\n      \"2022-11-05\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-24\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-20\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2022-10-30\",\n      \"2022-11-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"perfecting a new kimchi recipe\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"starting to think about the fall menu\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"forging each piece\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"working on a kimchi and chorizo fusion taco\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"introduce a new seasonal dish\",\n    \"days\": [\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-10-29\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-11-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2022-10-28\",\n      \"2022-10-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-11-07\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"training session six days ago\" in line:\n            task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=6)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            tasks.append({\n                \"work\": \"deliver a training session\",\n                \"days\": [task_date_str],\n                \"hours\": (7, 9)\n            })\n        elif \"gig at Preservation Hall next week\" in line:\n            task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            tasks.append({\n                \"work\": \"gig at Preservation Hall\",\n                \"days\": [task_date_str],\n                \"hours\": (0, 23)  # Assuming a full day gig\n            })\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2022-11-06\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Practicing a musical instrument\",\n    \"days\": [\n      \"2022-08-08\",\n      \"2022-08-09\",\n      \"2022-08-10\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"Hosting a pop-up restaurant\",\n    \"days\": [\n      \"2022-09-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-03-08\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its temporal details.\n    \"\"\"\n\n    work_tasks = []\n    for line in conversation:\n        if \"review daily feedback\" in line:\n            # Extract temporal details\n            days_ago = 9\n            duration = 4\n            start_hour = 10\n            end_hour = 14  # 10 + 4\n\n            # Calculate dates\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            dates = [(conversation_datetime - timedelta(days=days_ago + i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n\n            work_tasks.append({\n                \"work\": \"review daily feedback\",\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n    return work_tasks\n\n\n# Example usage with the provided input:\nconversation = [\n    \"Long time no talk!\",\n    \"Ivan: Hey Malik! It\u2019s good to chat. I\u2019ve been quite busy lately with work. I started to review daily feedback 9 days ago, for 4 consecutive days, from 10 in the morning until 4 hours after that.\",\n    \"Malik: Hey Ivan, that\u2019s great to hear from you too! Things have been pretty hectic on my end as well, always chasing deadlines.\",\n    \"Ivan: It feels good to finally have a bit of breathing room. I was really focused on getting that review daily feedback done. It was quite a stretch, really starting nine days ago, for four consecutive days, from 10 a.m. until 2 p.m.\",\n    \"Malik: That sounds intense! I sometimes get stuck in those deep-work phases too, where everything else fades away.\",\n    \"Ivan: Exactly! It's like entering a different"
"```json\n[\n  {\n    \"work\": \"recording daily observations\",\n    \"days\": [\n      \"2024-02-09\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-08-04\",\n      \"2022-08-05\",\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"new sculpture inspired by the myth of Icarus\",\n    \"days\": [\n      \"2022-08-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2022-08-06\",\n      \"2022-08-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-08-05\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2022-08-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-08-07\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2022-08-09\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  },\n  {\n    \"work\": \"sketches for the upcoming season\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"student tournament training\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"collaborating with a local artisan group to create a limited edition collection using handwoven fabrics\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-08-06\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-08-01\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"authenticate a recent acquisition\",\n    \"days\": [\n      \"2022-08-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-08-11\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-15\",\n      \"2022-08-16\",\n      \"2022-08-17\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-06\",\n      \"2022-08-07\",\n      \"2022-08-08\",\n      \"2022-08-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-06\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"update the task board\"\n    \n    for line in conversation:\n        if work_task in line:\n            if \"Starting in 20 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=20)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                for i in range(1, 3):\n                    days.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n                hours = (15, 18)  # 3 p.m. to 6 p.m.\n                tasks.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"two days ago\" in line:\n                past_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                days = [past_date.strftime(\"%Y-%m-%d\")]\n                hours = (15, 18)\n                tasks.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"yesterday\" in line:\n                past_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [past_date.strftime(\"%Y-%m-%d\")]\n                hours = (15, 18)\n                tasks.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"today"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2022-08-16\",\n      \"2022-08-17\",\n      \"2022-08-18\",\n      \"2022-08-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2022-08-13\",\n      \"2022-08-20\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"finish the roof framing\",\n    \"days\": [\n      \"2022-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2022-08-13\",\n      \"2022-08-20\",\n      \"2022-08-21\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2022-08-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2022-08-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a community event\",\n    \"days\": [\n      \"2022-08-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2022-08-18\"\n    ],\n    \"hours\": (\n        8,\n        11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-08-15\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2022-08-23\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2022-08-25\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-08-22\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2022-04-19\",\n      \"2022-04-20\",\n      \"2022-04-21\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"balance spring replacement\",\n    \"days\": [\n      \"2022-04-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"restoring an old grandfather clock\",\n    \"days\": [\n      \"2022-04-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2022-04-18\",\n      \"2022-04-19\",\n      \"2022-04-20\",\n      \"2022-04-21\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily briefing\",\n    \"days\": [\n      \"2022-04-18\",\n      \"2022-04-21\"\n    ],\n    \"hours\": [\n      8,\n      12\n    ]\n  },\n  {\n    \"work\": \"editing\",\n    \"days\": [\n      \"2022-04-19\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2022-04-13\",\n      \"2022-04-15\",\n      \"2022-04-22\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2022-04-13\",\n      \"2022-04-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-04-25\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-04-17\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-04-20\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a research paper\",\n    \"days\": [\n      \"2022-04-15\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"editing footage\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"cutting leather for wallets\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"looking into new sound equipment\",\n    \"days\": [\n      \"2022-05-06\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2022-04-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2022-04-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-04-24\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Compile a weekly summary\",\n    \"days\": [\n      \"2022-04-12\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    for line in conversation:\n        if \"market survey\" in line.lower():\n            try:\n                # Extract temporal information\n                time_phrase = \"three days ago\"\n                days_ago = 3\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                task_date = date_obj.strftime(\"%Y-%m-%d\")\n\n                start_time_str = \"8 in the morning\"\n                start_hour = 8\n                duration_hours = 3\n                end_hour = start_hour + duration_hours\n\n                # Create task details dictionary\n                task_detail = {\n                    \"work\": \"Conduct market survey\",\n                    \"days\": [task_date],\n                    \"hours\": (start_hour, end_hour)\n                }\n                task_details.append(task_detail)\n            except ValueError:\n                pass  # Handle potential parsing errors\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting to discuss funding\",\n    \"days\": [\n      \"2022-05-03\",\n      \"2022-05-04\",\n      \"2022-05-05\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2022-05-02\",\n      \"2022-05-03\",\n      \"2022-05-04\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"performing routine testing\",\n    \"days\": [\n      \"2022-04-27\",\n      \"2022-04-28\",\n      \"2022-04-29\",\n      \"2022-04-30\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2022-05-03\",\n      \"2022-05-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2022-05-06\",\n      \"2022-05-08\",\n      \"2022-05-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2022-05-01\",\n      \"2022-05-02\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"Documentary filming in Patagonia\",\n    \"days\": [\n      \"2022-06-07\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2022-05-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2022-04-27\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"editing a documentary about a vanishing language\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2022-05-01\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"working on a film about the impact of plastic pollution\",\n    \"days\": [\n      \"2022-04-20\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2022-05-05\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  },\n  {\n    \"work\": \"cataloging some recent acquisitions for the museum\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2021-07-07\",\n      \"2021-07-08\",\n      \"2021-07-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing daily feedback\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2021-07-01\",\n      \"2021-07-02\",\n      \"2021-07-03\",\n      \"2021-07-04\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-17\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-18\",\n      \"2024-02-20\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"restore an old pocket watch\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"working on a delicate mechanism\",\n    \"days\": [\n      \"2021-07-01\",\n      \"2021-07-06\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a contract\",\n    \"days\": [\n      \"2021-07-14\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"visiting a watch fair\",\n    \"days\": [\n      \"2021-08-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task_description = \"creating a budget spreadsheet\"\n    relative_days = 18\n    start_hour = 7\n    duration_hours = 4\n    end_hour = start_hour + duration_hours\n\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    task_date = date_obj - timedelta(days=relative_days)\n    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n    task_details.append({\n        \"work\": task_description,\n        \"days\": [task_date_str],\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return task_details\n\n# Example Usage (assuming the conversation date is 2024-07-03)\nconversation = [\n\"Been meaning to reach out \u2013 how are things?\",\n\"Emil: Hey Yuna, things are alright. I just finished creating a budget spreadsheet 18 days ago, working from 7 in the morning for four hours. It took a lot of focus, as you can imagine!\",\n\"Yuna: Hi Emil! That sounds\u2026thorough. I\u2019ve been trying to find some new picture books for the class, the kids are really into dragons at the moment.\",\n\"Emil: Dragons, wonderful! I remember taking apart a tiny mechanical dragon as a boy\u2014quite fascinating the gears involved. This spreadsheet was just for personal use, though.\",\n\"Yuna: Oh, that sounds like something you'd enjoy! We\u2019ve been doing a lot of painting, mostly bright colors, it gets messy but they love it. \",\n\"Emil: Messy is good! It means they're exploring. I prefer a clean workspace, naturally, given the delicate nature of my work. Still, I remember creating"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-07-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-07-05\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2021-07-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-07-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2021-07-03\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"taking apart a very old pocket watch\",\n    \"days\": [\n      \"2021-07-10\",\n      \"2021-07-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a presentation\",\n    \"days\": [\n      \"2021-07-01\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"sketching new watch designs\",\n    \"days\": [\n      \"2021-07-06\",\n      \"2021-07-07\",\n      \"2021-07-08\",\n      \"2021-07-09\",\n      \"2021-07-10\",\n      \"2021-07-11\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-07-14\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"beam replacement\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2021-07-20\",\n      \"2021-07-21\",\n      \"2021-07-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-02-26\",\n      \"2024-02-25\",\n      \"2024-02-28\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Identifies a work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with 'work', 'days', and 'hours' keys.\n    \"\"\"\n\n    work_tasks = []\n    for line in conversation:\n        if \"review project progress\" in line:\n            days_later_str = \"\"\n            if \"two days later\" in line:\n                days_later_str = \"2\"\n            elif \"six days later\" in line:\n                days_later_str = \"6\"\n\n            if days_later_str:\n                days_later = int(days_later_str)\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                hours_str = \"\"\n                if \"4 p.m. until 6 p.m.\" in line:\n                    hours_str = \"16:00-18:00\"\n                \n                if hours_str:\n                    start_hour, end_hour = map(int, hours_str.split(\"-\"))\n\n                    work_tasks.append({\n                        \"work\": \"review project progress\",\n                        \"days\": [task_date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n\n    return work_tasks\n\n# Example usage:\nconversation = [\n    \"Fancy chatting for a bit?\",\n    \"Emil: Hi Atsuko! Just wanted to let you know I have been quite busy with work. I had to review project progress two days later from today and again six days later, both times from 4 p.m. until 6 p.m.\",\n    \"Atsuko: Oh, that sounds\u2026 intense, Emil. I can relate to deadlines looming, though mine usually involve a lot more frantic sketching!\",\n"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-07-19\",\n      \"2021-07-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"working on a customer's pocket watch\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2021-07-17\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-07-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"restoring an old pocket watch\",\n    \"days\": [\n      \"2021-07-12\",\n      \"2021-07-13\",\n      \"2021-07-14\",\n      \"2021-07-15\",\n      \"2021-07-16\",\n      \"2021-07-17\",\n      \"2021-07-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2021-07-24\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"restoration project of an old clock tower\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"prepping for a gig at Preservation Hall\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record a tutorial video\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-07-19\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-03-17\",\n      \"2021-03-18\",\n      \"2021-03-19\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring website analytics\",\n    \"days\": [\n      \"2021-03-12\",\n      \"2021-03-13\",\n      \"2021-03-14\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintaining a training schedule\",\n    \"days\": [\n      \"2021-03-15\",\n      \"2021-03-16\",\n      \"2021-03-17\",\n      \"2021-03-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2021-03-11\",\n      \"2021-03-19\",\n      \"2021-03-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2021-03-11\",\n      \"2021-03-20\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2021-03-19\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"script revisions\",\n    \"days\": [\n      \"2021-03-23\",\n      \"2021-03-24\",\n      \"2021-03-25\",\n      \"2021-03-26\",\n      \"2021-03-27\",\n      \"2021-03-28\",\n      \"2021-03-29\",\n      \"2021-03-30\",\n      \"2021-03-31\",\n      \"2021-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-03-22\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2021-03-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-07-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2021-03-21\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a project timeline\",\n    \"days\": [\n      \"2021-03-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"preparing gear\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"brushing up on wilderness first aid\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"starting a new series on the history of tea ceremonies\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\"2021-03-12\"],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"writing a performance review\",\n    \"days\": [\n      \"2021-03-13\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2021-03-29\",\n      \"2021-03-30\",\n      \"2021-03-31\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"midday walk\",\n    \"days\": [\n      \"2021-04-04\",\n      \"2021-04-05\",\n      \"2021-04-06\",\n      \"2021-04-07\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"wallet design\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"briefcase project\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2021-03-25\",\n      \"2021-04-03\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    tasks = []\n    work_task = \"review project progress\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    days_later_values = [4, 12, 15]\n    days = []\n    for offset in days_later_values:\n        task_date = date_obj + timedelta(days=offset)\n        days.append(task_date.strftime(\"%Y-%m-%d\"))\n\n    # Extract hours\n    start_hour = 13  # 1 p.m.\n    end_hour = 15  # Two hours after 1 p.m.\n\n    tasks.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return tasks\n\n# Example usage with the provided conversation\nconversation = [\n    \"Feeling good about things?\",\n    \"Chen: Hey Tom, just letting you know I have to review project progress four days later, then again twelve days later, and finally fifteen days later, all from 1 p.m. until two hours after that.\",\n    \"Tom: That sounds\u2026 involved, Chen. I\u2019ve been wrestling with a particularly stubborn piece of leather all morning, trying to get a perfect edge on it.\",\n    \"Chen: Oh, that\u2019s the challenge with handcrafted work, isn\u2019t it? It takes real patience. I was reviewing project progress four days later, and it reminded me of carefully steeping a delicate white tea \u2013 timing is everything.\",\n    \"Tom: Absolutely. A rushed job never holds up. I'm thinking of trying a new dye for"
"```json\n[\n  {\n    \"work\": \"Watering office plants\",\n    \"days\": [\n      \"2021-03-28\",\n      \"2021-03-29\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2021-04-05\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2021-04-01\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in \"YYYY-MM-DD\" format.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details.  Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"record a podcast episode\" in line:\n            try:\n                days_offset = int(line.split(\" \")[-3])\n                task_date = conversation_date + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_str = line.split(\"from \")[1].split(\" until \")[0]\n                start_hour = datetime.strptime(start_time_str, \"%I in the %p\").hour\n                end_time_str = line.split(\" until \")[1].split(\" in the \")[0]\n                end_hour = datetime.strptime(end_time_str, \"%I in the %p\").hour\n\n                tasks.append({\n                    \"work\": \"record a podcast episode\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n# Example usage with the provided input:\nconversation = [\n    \"Alicia: What have you been working on?\",\n    \"Chen: Well, I've been quite busy lately. I had to record a podcast episode 17 days later from today, from 11 in the morning until 4 in the afternoon.\",\n    \"Alicia: Oh, that sounds interesting! I always admire your dedication to sharing your knowledge.\",\n    \"Chen: Thank you, Alicia. It\u2019s a joy to share"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"conduct a product demo\" in line:\n            try:\n                time_str = line.split(\"from \")[1].split(\" until\")[0]\n                start_hour = int(time_str.split(\" \")[0])\n\n                duration_str = line.split(\" until \")[1].split(\" hours\")[0]\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n\n                date_offset_str = line.split(\"two days later\")[0]\n                \n                date_str = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                date = date_str.strftime(\"%Y-%m-%d\")\n\n                task_details.append({\n                    \"work\": \"conduct a product demo\",\n                    \"days\": [date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2021-03-30\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"develop a marketing strategy\" in line:\n            try:\n                # Extract temporal information\n                days_later = int(line.split(\"seven days later from today\")[0].split(\"to develop a marketing strategy \")[1].strip())\n                task_date = conversation_date + timedelta(days=days_later)\n                start_hour = 10\n                end_hour = start_hour + 3\n\n                tasks.append({\n                    \"work\": \"develop a marketing strategy\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error processing line: {line}. Error: {e}\")\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-05-16\",\n      \"2024-05-17\",\n      \"2024-05-18\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-05-16\",\n      \"2024-05-17\",\n      \"2024-05-18\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-05-11\",\n      \"2024-05-12\",\n      \"2024-05-13\",\n      \"2024-05-14\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-05-09\",\n      \"2024-05-12\",\n      \"2024-05-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-05-08\",\n      \"2024-05-11\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-05-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-05-11\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"restoring an old frame\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-05-14\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-05-12\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2024-05-08\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-05-08\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-05-09\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-05-28\",\n      \"2024-05-29\",\n      \"2024-05-30\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily safety check\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"daily safety check\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"daily safety check\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"performing routine testing\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-05-27\",\n      \"2024-05-30\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-05-23\",\n      \"2024-05-29\",\n      \"2024-05-31\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct routine inspections\",\n    \"days\": [\n      \"2024-05-22\",\n      \"2024-06-01\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-05-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"panel layout\",\n    \"days\": [\n      \"2024-05-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.  Empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update the company website\" in line:\n            try:\n                # Extract the number of days offset\n                days_offset = int(line.split(\" \")[-3])\n                # Calculate the absolute date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_offset)\n                task_date = date_obj.strftime(\"%Y-%m-%d\")\n\n                # Extract the hour information\n                start_hour = 7\n                end_hour = start_hour + 4\n\n                tasks.append({\n                    \"work\": \"update the company website\",\n                    \"days\": [task_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where the day is not an integer\n    return tasks\n\n# Example usage (using the provided input):\nconversation = [\n    \"Just sending good vibes your way.\",\n    \"Thomas: Hey Rose, just wanted to let you know I have to update the company website 17 days later, from 7 in the morning for four hours.\",\n    \"Rose: Oh, that sounds like quite a task, Thomas! Been keeping busy with the shop, trying to decide how to arrange the new collection.\",\n    \"Thomas: It is what it is, the website needs a refresh. I was thinking of visiting some old timber-framed houses this weekend, maybe find some inspiration for a new project.\",\n    \"Rose: That sounds wonderful! You always have such interesting projects going on. I\u2019m hoping to go thrifting this weekend, maybe find some real treasures.\",\n    \"Thomas: I actually did update the company website 17 days later, from "
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-05-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"restoring an old barn door\",\n    \"days\": [\n      \"2024-06-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-05-26\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-05-31\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording a podcast episode\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-03-04\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2020-12-03\",\n      \"2020-12-04\",\n      \"2020-12-05\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording daily observations\",\n    \"days\": [\n      \"2020-12-09\",\n      \"2020-12-10\",\n      \"2020-12-11\",\n      \"2020-12-21\",\n      \"2020-12-22\",\n      \"2020-12-23\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"scheduling routine maintenance\",\n    \"days\": [\n      \"2020-11-25\",\n      \"2020-11-26\",\n      \"2020-11-27\",\n      \"2020-11-28\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-12-01\",\n      \"2020-12-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n\n    work_tasks = []\n    task_description = \"monitor quality control metrics\"\n    dates = []\n    hours = None\n\n    for line in conversation:\n        if task_description in line.lower():\n            if \"yesterday\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"12 days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=12)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"11 days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=11)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"8\" in line.lower() and \"hours\" in line.lower():\n                hours = (8, 11)\n\n    if \"next week\" in conversation[-1].lower():\n        date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n        dates.append(date.strftime(\"%Y-%m-%d\"))\n\n    if dates and hours:\n        work_tasks.append({\n            \"work\": task_description,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return work_tasks\n\n\n# Example usage:\nconversation = [\n    \"Alessia: Anything interesting happen today?\",\n    \"Bianca: Well, it's been a busy stretch! I had to monitor quality control metrics 12 days ago, then again 11 days ago,"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2020-11-28\",\n      \"2020-12-01\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-12-02\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"have a prototype ready\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2020-12-01\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"working on a dessert that's meant to resemble a miniature edible garden\",\n    \"days\": [\n      \"2020-11-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-12-03\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2020-12-08\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  },\n  {\n    \"work\": \"wrestling with a stubborn engine block\",\n    \"days\": [\n      \"2020-12-18\",\n      \"2020-12-19\",\n      \"2020-12-20\",\n      \"2020-12-21\",\n      \"2020-12-22\",\n      \"2020-12-23\",\n      \"2020-12-24\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"researching different vintages\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"preparing a lecture on the Athenian Assembly\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2020-12-06\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2020-12-03\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2020-11-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"coding for a demo\",\n    \"days\": [\n      \"2020-12-04\",\n      \"2020-12-05\",\n      \"2020-12-06\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2020-12-09\",\n      \"2020-12-10\",\n      \"2020-12-11\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2020-12-10\",\n      \"2020-12-11\",\n      \"2020-12-12\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2020-12-08\",\n      \"2020-12-09\",\n      \"2020-12-10\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2020-12-11\",\n      \"2020-12-12\",\n      \"2020-12-13\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2020-12-12\",\n      \"2020-12-13\",\n      \"2020-12-14\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2020-12-11\",\n      \"2020-12-12\",\n      \"2020-12-13\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update the maintenance log\",\n    \"days\": [\n      \"2020-12-15\",\n      \"2020-12-16\",\n      \"2020-12-17\",\n      \"2020-12-18\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-12-17\",\n      \"2020-12-19\",\n      \"2020-12-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"perfect pairings for the chef\u2019s new truffle menu\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2020-12-18\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-12-15\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-12-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-12-13\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  },\n  {\n    \"work\": \"authenticate a painting\",\n    \"days\": [\n      \"2020-12-19\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"visit a small historical estate\",\n    \"days\": [\n      \"2020-12-26\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-12-09\",\n      \"2020-12-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-12-09\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      13,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-11-08\",\n      \"2024-11-09\",\n      \"2024-11-10\"\n    ],\n    \"hours\": (15, 19)\n  },\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-11-08\",\n      \"2024-11-09\",\n      \"2024-11-10\"\n    ],\n    \"hours\": (15, 19)\n  },\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-11-08\",\n      \"2024-11-09\",\n      \"2024-11-10\"\n    ],\n    \"hours\": (15, 19)\n  },\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-11-05\",\n      \"2024-11-06\",\n      \"2024-11-07\"\n    ],\n    \"hours\": (15, 19)\n  },\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-11-07\",\n      \"2024-11-08\",\n      \"2024-11-09\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2024-11-09\",\n      \"2024-11-10\",\n      \"2024-11-11\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Maintaining a daily checklist\",\n    \"days\": [\n      \"2024-11-06\",\n      \"2024-11-07\",\n      \"2024-11-08\",\n      \"2024-11-09\"\n    ],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"Visit a fellow blacksmith\",\n    \"days\": [\n      \"2024-12-02\",\n      \"2024-12-06\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project progress\",\n    \"days\": [\n      \"2024-11-01\",\n      \"2024-11-05\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"mural painting\",\n    \"days\": [\n      \"2024-11-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-01-30\",\n      \"2024-02-03\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-11-01\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"writing a technical blog post\",\n    \"days\": [\n      \"2024-11-13\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-11-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze customer feedback\",\n    \"days\": [\n      \"2024-11-12\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"Restore a broken clock\",\n    \"days\": [\n      \"2024-11-13\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-11-09\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"placement of a delicate sculpture\",\n    \"days\": [\n      \"2024-11-18\",\n      \"2024-11-19\",\n      \"2024-11-20\",\n      \"2024-11-21\",\n      \"2024-11-22\",\n      \"2024-11-23\",\n      \"2024-11-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"working on exhibition\",\n    \"days\": [\n      \"2024-11-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"rehearsing for a concert\",\n    \"days\": [\n      \"2024-03-04\",\n      \"2024-03-05\",\n      \"2024-03-06\",\n      \"2024-03-07\",\n      \"2024-03-08\",\n      \"2024-03-09\",\n      \"2024-03-10\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-11-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"plan next series of experiments, deep dives into theoretical physics\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-11-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-11-12\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-24\",\n      \"2024-11-25\",\n      \"2024-11-26\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-15\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-16\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-14\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-24\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Checking daily emails\",\n    \"days\": [\n      \"2024-11-19\",\n      \"2024-11-20\",\n      \"2024-11-21\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-21\",\n      \"2024-11-22\",\n      \"2024-11-23\",\n      \"2024-11-24\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-18\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-20\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-28\",\n      \"2024-03-01\",\n      \"2024-03-03\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    work_task = \"checking routine communications\"\n    start_time = 15  # 3 p.m.\n    end_time = 18  # 3 hours after 3 p.m.\n    hours = (start_time, end_time)\n\n    dates = []\n    # Two days ago\n    date1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n    dates.append(date1.strftime(\"%Y-%m-%d\"))\n\n    # Yesterday\n    date2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n    dates.append(date2.strftime(\"%Y-%m-%d\"))\n\n    # In eleven days\n    date3 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=11)\n    dates.append(date3.strftime(\"%Y-%m-%d\"))\n    \n    task_details.append({\n        \"work\": work_task,\n        \"days\": dates,\n        \"hours\": hours\n    })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"monitoring website analytics\",\n    \"days\": [\n      \"2024-11-16\",\n      \"2024-11-17\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Completing an expense report\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-11-26\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-11-27\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"draft a press release\" in line:\n            if \"tomorrow\" in line:\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                if \"7 in the morning\" in line:\n                    start_hour = 7\n                    end_hour = start_hour + 4\n                    tasks.append({\n                        \"work\": \"draft a press release\",\n                        \"days\": [task_date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n            \n    if \"preparing for a concert next month\" in line:\n        task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=30)\n        task_date_str = task_date.strftime(\"%Y-%m-%d\")\n        tasks.append({\n            \"work\": \"preparing for a concert\",\n            \"days\": [task_date_str],\n            \"hours\": (0, 23)\n        })\n\n    return tasks\n\n# Example Usage (with the provided input)\nconversation = [\n    \"Ali: Just popping in to say hello.\",\n    \"Yuri: Hello Ali! Just wanted to let you know, I have to draft a press release tomorrow from 7 in the morning for four hours.\",\n    \"Ali: That sounds like an important task. I\u2019ve been working on a new composition, trying to capture a feeling of resilience.\",\n    \"Yuri: Oh, that\u2019s wonderful! I imagine channeling emotions into music is very different from trying to draft a press release. I'm hoping to get it finished quickly.\",\n    \"Ali:"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-11-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-11-28\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2024-11-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"working on a song\",\n    \"days\": [\n      \"2024-11-10\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2023-11-23\",\n      \"2023-11-24\",\n      \"2023-11-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-11-13\",\n      \"2023-11-14\",\n      \"2023-11-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-11-21\",\n      \"2023-11-24\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"sketching ideas for calligraphy work\",\n    \"days\": [\n      \"2023-11-26\"\n    ],\n    \"hours\": (19, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2023-11-14\",\n      \"2023-11-17\",\n      \"2023-11-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"finalize plans for the community workshop\",\n    \"days\": [\n      \"2023-12-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"create a large-scale depiction of a verse from the Quran\",\n    \"days\": [\n      \"2023-11-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-11-20\",\n      \"2023-11-25\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  },\n  {\n    \"work\": \"large commission for a new mosque\",\n    \"days\": [\n      \"2023-11-16\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2023-11-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"calligraphy piece for a new mosque\",\n    \"days\": [\n      \"2023-12-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"optimizing a pathfinding algorithm\",\n    \"days\": [\n      \"2023-11-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"interview\",\n    \"days\": [\n      \"2023-11-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating an inventory list\",\n    \"days\": [\n      \"2023-11-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"delivering a training session\",\n    \"days\": [\n      \"2023-11-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-11-22\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\"2023-11-16\"],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-11-18\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-11-26\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-11-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2023-11-30\",\n      \"2023-12-01\",\n      \"2023-12-02\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Monitor team activity\",\n    \"days\": [\n      \"2023-11-29\",\n      \"2023-11-30\",\n      \"2023-12-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2023-12-06\",\n      \"2023-12-07\",\n      \"2023-12-08\",\n      \"2023-12-09\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-11-29\",\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n        12,\n        15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2023-11-27\",\n      \"2023-12-06\"\n    ],\n    \"hours\": (14, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2023-12-06\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2023-11-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"quarterly report\" in line and \"7 days later\" in line:\n            try:\n                # Extract the date\n                offset_days = 7\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_time_str = \"11\"\n                end_time_offset = 3\n                start_hour = int(start_time_str)\n                end_hour = start_hour + end_time_offset\n\n                tasks.append({\n                    \"work\": \"produce a quarterly report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle potential errors in time parsing\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-11-30\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a performance report\",\n    \"days\": [\n      \"2023-11-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2023-12-02\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"calligraphy piece for a local mosque\",\n    \"days\": [\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2023-11-29\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details_list = []\n\n    for line in conversation:\n        if \"complete a task checklist\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-2])  # Split the line and get the second to last element.\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract start and end hours\n                start_hour = 8\n                end_hour = start_hour + 3\n\n                task_details = {\n                    \"work\": \"complete a task checklist\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                }\n                task_details_list.append(task_details)\n            except ValueError:\n                # Handle cases where the offset is not an integer\n                pass\n    return task_details_list\n\n# Example Usage:\nconversation = [\n    \"Just wanted to connect.\",\n    \"Mohammed: Hey Yuri, how are things going? I just wanted to let you know that I have to complete a task checklist 24 days later from 8 in the morning for three hours. It's been a busy few weeks getting ready for it.\",\n    \"Yuri: Hi Mohammed! Things are good, just been catching up on some reading. It\u2019s always nice to hear what you\u2019ve"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2020-06-08\",\n      \"2020-06-09\",\n      \"2020-06-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2020-06-06\",\n      \"2020-06-07\",\n      \"2020-06-08\",\n      \"2020-06-09\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  },\n  {\n    \"work\": \"calligraphy piece for a local mosque\",\n    \"days\": [\n      \"2020-06-14\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2020-06-02\",\n      \"2020-06-10\",\n      \"2020-06-12\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2020-05-31\",\n      \"2020-06-06\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2020-06-05\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2020-06-03\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-06-07\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"catch up on paperwork\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a workshop\",\n    \"days\": [\n      \"2020-06-05\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2020-06-03\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2020-06-02\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting a daily safety check\",\n    \"days\": [\n      \"2020-06-19\",\n      \"2020-06-20\",\n      \"2020-06-21\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2020-06-22\",\n      \"2020-06-23\",\n      \"2020-06-24\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-16\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update the project dashboard\"\n    \n    # Find the starting date\n    start_days_offset = 11\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=start_days_offset)\n    start_date_str = start_date.strftime(\"%Y-%m-%d\")\n    \n    # Calculate the dates for the 4 consecutive days\n    days = [start_date + timedelta(days=i) for i in range(4)]\n    days_str = [day.strftime(\"%Y-%m-%d\") for day in days]\n    \n    # Extract time information\n    start_time_str = \"3 in the afternoon\"\n    end_time_offset = 3\n    \n    # Convert to 24-hour format\n    start_hour = 15\n    end_hour = start_hour + end_time_offset\n    \n    hours = (start_hour, end_hour)\n    \n    task_details.append({\n        \"work\": work_task,\n        \"days\": days_str,\n        \"hours\": hours\n    })\n\n    return task_details\n\n# Example usage:\nconversation = [\n    \"Just wanted to reach out and say hello.\",\n    \"Alicia: Hey Emil! Just wanted to reach out and say hello. I\u2019ve been pretty swamped lately \u2013 I have to update the project dashboard starting in 11 days, for 4 consecutive days, from 3 in the afternoon until 3 hours after that.\",\n    \"Emil: Hello Alicia, it\u2019s good to hear from you. I've been quite absorbed in a particularly delicate repair recently.\",\n    \"Alicia: Oh, that sounds fascinating! I was just thinking"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2020-06-14\",\n      \"2020-06-17\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct routine inspections\",\n    \"days\": [\n      \"2020-06-15\",\n      \"2020-06-17\",\n      \"2020-06-18\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily briefing\",\n    \"days\": [\n      \"2020-06-18\",\n      \"2020-06-25\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"preparing samples for analysis\",\n    \"days\": [\n      \"2020-06-10\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"organizing a summer camp\",\n    \"days\": [\n      \"2020-06-10\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2020-06-26\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-06-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2020-06-26\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-06-17\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2020-06-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-06-26\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2020-06-15\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2020-06-14\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2020-04-20\",\n      \"2020-04-21\",\n      \"2020-04-22\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Identifies a work-related task and extracts its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"morning jog\"\n    hours = (7, 10)  # 7 AM to 10 AM (3 hours)\n\n    # Calculate dates\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    days = []\n    \n    # First occurrence: 15 days ago for 4 consecutive days\n    start_date = date_obj - timedelta(days=15)\n    for i in range(4):\n        days.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n\n    # Today\n    days.append(conversation_date)\n\n    # Tomorrow\n    tomorrow_date = date_obj + timedelta(days=1)\n    days.append(tomorrow_date.strftime(\"%Y-%m-%d\"))\n    \n    task_details.append({\n        \"work\": task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"practice for a show\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2020-04-19\",\n      \"2020-04-25\",\n      \"2020-04-27\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2020-04-25\",\n      \"2020-04-26\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2020-04-29\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-04-20\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a product demo\",\n    \"days\": [\n      \"2020-04-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"Finish the gate\",\n    \"days\": [\n      \"2020-04-27\",\n      \"2020-05-03\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2020-04-26\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"preparing for a performance\",\n    \"days\": [\n      \"2020-06-15\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"practice with my band\",\n    \"days\": [\n      \"2020-06-15\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2020-04-24\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"creating a budget spreadsheet\",\n    \"days\": [\n      \"2020-04-21\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"composing\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": [\n      18,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2020-04-19\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-04-29\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2020-04-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2020-05-06\",\n      \"2020-05-07\",\n      \"2020-05-08\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2020-04-06\",\n      \"2020-04-07\",\n      \"2020-04-08\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-05-08\",\n      \"2020-05-09\",\n      \"2020-05-10\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-18\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-17\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-16\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-15\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2020-05-13\",\n      \"2020-05-14\",\n      \"2020-05-15\",\n      \"2020-05-16\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review of operational data\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      13,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2020-05-08\",\n      \"2020-05-14\",\n      \"2020-05-16\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2020-05-05\",\n      \"2020-05-07\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2020-05-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"playing a gig at The Blue Note\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2020-05-14\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-05-12\",\n      \"2020-05-12\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2020-05-15\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording a podcast episode\",\n    \"days\": [\n      \"2020-05-11\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"recording a podcast episode\",\n    \"days\": [\n      \"2020-05-12\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-05-16\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-05-14\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article for research\",\n    \"days\": [\n      \"2021-01-02\",\n      \"2021-01-03\",\n      \"2021-01-04\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"Work on a new commission for a community center mural\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-01-18\",\n      \"2024-01-19\",\n      \"2024-01-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"community mural project\",\n    \"days\": [\n      \"2024-02-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2020-12-30\",\n      \"2020-12-31\",\n      \"2021-01-01\",\n      \"2021-01-02\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (12, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"sketching designs for a new mural\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-01-01\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2021-01-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2021-01-13\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2021-01-13\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"task checklist\" in line.lower() and \"days ago\" in line.lower():\n            try:\n                parts = line.split()\n                days_ago_index = parts.index(\"days\")\n                days_ago = int(parts[days_ago_index - 1])\n                \n                task_date = conversation_date - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_index = line.lower().find(\"from\") + 5\n                end_time_index = line.lower().find(\"for\")\n                \n                time_str = line[start_time_index:end_time_index].strip()\n                \n                if \"in the morning\" in time_str:\n                    time_str = time_str.replace(\"in the morning\", \"\").strip()\n                    hour = int(time_str.split()[0])\n                    start_hour = hour\n                    end_hour = hour + 2\n                else:\n                    start_hour = int(time_str.split()[0])\n                    end_hour = start_hour + 2\n\n                tasks.append({\n                    \"work\": \"Complete task checklist\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where parsing fails\n            except"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2021-01-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-01-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-01-09\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"painting a mural for a local school\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-01-10\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"sketching\",\n    \"days\": [\n      \"2021-01-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-01-13\",\n      \"2024-01-14\",\n      \"2024-01-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"maintain a daily checklist\"\n    \n    for line in conversation:\n        if work_task in line:\n            try:\n                # Extract the number of days from now\n                days_from_now = int(line.split(\"starting in \")[1].split(\" days\")[0])\n                \n                # Calculate the start date\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_from_now)\n                start_date_str = start_date.strftime(\"%Y-%m-%d\")\n                \n                # Calculate the dates for the consecutive days\n                days = [start_date + timedelta(days=i) for i in range(4)]\n                days_str = [day.strftime(\"%Y-%m-%d\") for day in days]\n                \n                # Extract the time range\n                hours = (8, 12)  # 8 AM to 12 PM (8 + 4 hours)\n\n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": days_str,\n                    \"hours\": hours\n                })\n            except (ValueError, IndexError):\n                pass  # Handle potential errors during parsing\n\n    return task_details\n\n# Example Usage:\nconversation = [\n    \"It feels like ages since we last spoke.\",\n    \"Camila: Hey Yuri! It's been hectic. I've been super busy lately \u2013 I had to maintain a daily checklist starting in sixteen days, for four consecutive days, all from 8 in the morning for four hours.\","
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2021-01-19\",\n      \"2021-01-24\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\",\n      \"2024-03-09\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2021-01-16\",\n      \"2021-01-17\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2021-01-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"new sketches\",\n    \"days\": [\n      \"2021-01-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"incorporating more textures into my next mural\",\n    \"days\": [\n      \"2021-01-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2021-01-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-01-12\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2021-01-11\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"start a new community project\",\n    \"days\": [\n      \"2021-01-31\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Interview with a journalist\",\n    \"days\": [\n      \"2021-01-16\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"Debuting a new song\",\n    \"days\": [\n      \"2021-01-27\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"Proposing a new mural design to the city council\",\n    \"days\": [\n      \"2021-02-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"Working on an arrangement of an old Billie Holiday song\",\n    \"days\": [\n      \"2021-01-20\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-01-13\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"prepare a workshop agenda\" in line:\n            utterance = line.split(\": \", 1)[1]\n            days = []\n            hours = (9, 11)  # 9 AM to 11 AM\n\n            if \"tomorrow\" in utterance:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"in 2 days\" in utterance:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"yesterday\" in utterance:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            else:\n                continue\n\n            tasks.append({\n                \"work\": \"prepare a workshop agenda\",\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-01-15\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"sketching designs for a community center\",\n    \"days\": [\n      \"2021-01-15\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    tasks = []\n    work_task = \"conducting a daily safety check\"\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    seventeen_days_ago = start_date - timedelta(days=17)\n    \n    dates = []\n    for i in range(3):\n      current_date = seventeen_days_ago + timedelta(days=i)\n      dates.append(current_date.strftime(\"%Y-%m-%d\"))\n\n    today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    dates.append(today.strftime(\"%Y-%m-%d\"))\n\n    yesterday = today - timedelta(days=1)\n    dates.append(yesterday.strftime(\"%Y-%m-%d\"))\n    \n    hours = (15, 18)\n\n    tasks.append({\n        \"work\": work_task,\n        \"days\": dates,\n        \"hours\": hours\n    })\n\n    return tasks\n\n# Example Usage (with the provided input)\nconversation = [\n    \"Stella: What\u2019s been keeping you busy lately?\",\n    \"Helen: Oh, hi Stella! Well, it\u2019s been quite a stretch of conducting a daily safety check. It started seventeen days ago, for three consecutive days, and I\u2019ve been doing it from 3 p.m. until three hours after that every day since then.\",\n    \"Stella: That sounds\u2026thorough, Helen! I actually had a really interesting rehearsal last night.\",\n    \"Helen: That\u2019s wonderful to hear! I am glad that you're having a good time. It\u2019s a bit more mundane on my end; I just finished conducting a daily safety check.\",\n    \"Stella: Mundane sometimes has its own kind of"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2022-02-06\",\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"planning a new expedition route\",\n    \"days\": [\n      \"2022-02-09\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"gear maintenance\",\n    \"days\": [\n      \"2022-02-09\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2022-01-30\",\n      \"2022-02-01\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"plan out my next archaeological tour to Delphi\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2022-01-29\",\n      \"2022-01-31\",\n      \"2022-02-07\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"plan a workshop\",\n    \"days\": [\n      \"2022-03-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-01-11\",\n      \"2024-01-12\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2022-01-29\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  },\n  {\n    \"work\": \"summarizing past findings at the Acropolis\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-02-10\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"gather materials for a course on the Peloponnesian War\",\n    \"days\": [\n      \"2022-02-11\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2022-02-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"revisiting Plato\u2019s Republic\",\n    \"days\": [\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\",\n      \"2022-02-10\",\n      \"2022-02-11\",\n      \"2022-02-12\",\n      \"2022-02-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"debut a poem at an open mic night\",\n    \"days\": [\n      \"2022-02-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting a customer feedback report\",\n    \"days\": [\n      \"2022-02-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2022-02-05\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"giving a small lecture\",\n    \"days\": [\n      \"2022-02-21\",\n      \"2022-02-22\",\n      \"2022-02-23\",\n      \"2022-02-24\",\n      \"2022-02-25\",\n      \"2022-02-26\",\n      \"2022-02-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"preparing for a meeting with the museum director\",\n    \"days\": [\n      \"2022-02-15\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"tackling logistical problems with the excavation site\",\n    \"days\": [\n      \"2022-02-14\",\n      \"2022-02-15\",\n      \"2022-02-16\",\n      \"2022-02-17\",\n      \"2022-02-18\",\n      \"2022-02-19\",\n      \"2022-02-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"submit a project proposal\" in line:\n            try:\n                # Extract temporal information\n                offset_days = 2\n                start_hour = 9\n                duration_hours = 4\n\n                # Calculate the absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                end_hour = start_hour + duration_hours\n\n                tasks.append({\n                    \"work\": \"submit a project proposal\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where date parsing fails\n\n        elif \"preparing for a performance\" in line:\n            try:\n                # Extract temporal information\n                offset_days = 30  # Assuming \"next month\" is 30 days away.This can be inaccurate.\n                start_hour = 0  # Assuming the preparation happens throughout the day.\n                end_hour = 23\n\n                # Calculate the absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"preparing for a performance\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass\n\n    return tasks\n"
"```json\n[\n  {\n    \"work\": \"updating a project report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      8,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Responding to customer inquiries\",\n    \"days\": [\n      \"2022-02-15\",\n      \"2022-02-16\",\n      \"2022-02-17\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2022-02-16\",\n      \"2022-02-17\",\n      \"2022-02-18\",\n      \"2022-02-19\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2022-02-11\",\n      \"2022-02-22\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare for my lecture on Plato's Republic\",\n    \"days\": [\n      \"2022-02-21\",\n      \"2022-02-22\",\n      \"2022-02-23\",\n      \"2022-02-24\",\n      \"2022-02-25\",\n      \"2022-02-26\",\n      \"2022-02-27\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"experiment\",\n    \"days\": [\n      \"2022-02-21\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"code reviews\" in line:\n            task = \"code reviews\"\n            start_time_str = line.split(\"from \")[-1].split(\" until \")[0]\n            start_hour = int(start_time_str.split(\" p.m.\")[0].split(\" a.m.\")[0])\n            if \"p.m.\" in start_time_str:\n                start_hour += 12\n            end_hour = start_hour + 3\n\n            days_ago_mentions = []\n            if \"13 days ago\" in line:\n                days_ago_mentions.append(13)\n            if \"three days ago\" in line:\n                days_ago_mentions.append(3)\n            if \"yesterday\" in line:\n                days_ago_mentions.append(1)\n            \n            dates = []\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            for days_ago in days_ago_mentions:\n                date = conversation_datetime - timedelta(days=days_ago)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"preparing a lecture\" in line:\n            task = \"preparing a lecture\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [],\n                \"hours\": (0, 0)\n            })\n    return tasks\n\n# Example usage with the provided conversation\nconversation = [\n    \"How are you holding up?\",\n    \""
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2022-02-15\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-02-24\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2022-02-18\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2022-02-22\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"researching interpretations of Thucydides' account of the Peloponnesian War\",\n    \"days\": [\n      \"2022-02-18\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Complete an expense report\",\n    \"days\": [\n      \"2022-02-21\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2022-02-11\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2022-02-23\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update the sales log\" in line:\n            try:\n                # Extract temporal information\n                start_days_ago = 15\n                duration_days = 3\n                start_hour = 7\n                duration_hours = 4\n\n                # Convert relative dates to absolute dates\n                conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                start_date_obj = conversation_date_obj - timedelta(days=start_days_ago)\n                dates = [(start_date_obj + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n                # Create a dictionary for the task\n                task = {\n                    \"work\": \"update the sales log\",\n                    \"days\": dates,\n                    \"hours\": (start_hour, start_hour + duration_hours),\n                }\n                tasks.append(task)\n            except ValueError:\n                # Handle potential errors in date parsing\n                pass\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Thomas: What\u2019s been keeping you busy?\",\n    \"Irina: Oh, hi Thomas! It's been a hectic few weeks. I had to update the sales log, starting fifteen days ago for three consecutive days, all from 7 in the morning for four hours.\",\n    \"Thomas: That sounds like it took a lot of focus. I bet you were glad to have some downtime after that.\",\n    \"Irina: Absolutely! It feels good to finally have a little breathing room. I was able to work on some new choreography ideas during my breaks.\",\n    \"Thomas: That\u2019s wonderful, it's important to pursue your passions. I was just finishing"
"```python\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"checking routine communications\" in line:\n            task = \"checking routine communications\"\n            days_ago = 6\n            duration = 4\n            start_hour = 7\n            hours = 3\n\n            dates = []\n            from datetime import datetime, timedelta\n            date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            for i in range(duration):\n                date = date_obj - timedelta(days=days_ago + i)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_hour, start_hour + hours)\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-09\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2022-07-07\",\n      \"2022-07-09\",\n      \"2022-07-11\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2022-07-03\",\n      \"2022-07-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2022-06-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-07-11\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"practise ribbon routine\",\n    \"days\": [\n      \"2024-07-19\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"set up a summer reading program\",\n    \"days\": [\n      \"2024-07-19\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"conference call\" in line and \"set up\" in line:\n            try:\n                # Extract time information\n                start_time_str = \"11 in the morning\"\n                end_duration_str = \"three hours\"\n\n                start_hour = 11\n                duration = 3\n                end_hour = start_hour + duration\n\n                # Calculate the date\n                offset_days = 19\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"Set up a conference call\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2022-07-04\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2022-07-11\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2022-07-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"working on a new piece for a local exhibition\",\n    \"days\": [\n      \"2022-07-24\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2022-07-13\",\n      \"2022-07-14\",\n      \"2022-07-15\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2022-07-15\",\n      \"2022-07-16\",\n      \"2022-07-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2022-07-06\",\n      \"2022-07-07\",\n      \"2022-07-08\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2022-07-09\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2024-01-30\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      10,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-07-17\",\n      \"2022-07-23\",\n      \"2022-07-25\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing the task, dates, and hours.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"check daily emails\" in line:\n            task = \"check daily emails\"\n            try:\n                # Extract days offset\n                days_offset_1 = int(line.split(\" \")[-3])\n                days_offset_2 = int(line.split(\" \")[-1])\n                \n                # Convert to absolute dates\n                date_1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_offset_1)\n                date_2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_offset_2)\n\n                date_1_str = date_1.strftime(\"%Y-%m-%d\")\n                date_2_str = date_2.strftime(\"%Y-%m-%d\")\n\n                # Extract hours\n                start_hour = 14  # 2 p.m.\n                end_hour = start_hour + 4\n\n                tasks.append({\n                    \"work\": task,\n                    \"days\": [date_1_str, date_2_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where the offset is not an integer\n\n    return tasks\n\n# Example Usage:\nconversation = [\n    \"How are you holding up?\",\n    \"Irina: Hey Jayden! It's been a busy stretch. I had to check daily emails 16 days later and then again 21 days later, both times from 2 p.m. until"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2022-07-25\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-07-14\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-07-24\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2022-07-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2022-07-13\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-07-23\"\n    ],\n    \"hours\": [\n      14,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2022-07-22\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  },\n  {\n    \"work\": \"playing a concert\",\n    \"days\": [\n      \"2022-07-21\"\n    ],\n    \"hours\": (\n      18,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2022-07-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-03-07\",\n      \"2024-03-08\",\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \"2024-03-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \"2024-03-05\",\n      \"2024-03-06\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"receiving a new shipment of 1960s dresses\",\n    \"days\": [\n      \"2024-03-22\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-03-06\",\n      \"2024-03-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"re-arranging the window display at the shop\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"update a status report\" in line:\n            if \"three days later\" in line:\n                try:\n                    date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                    date_str = date.strftime(\"%Y-%m-%d\")\n                    tasks.append({\n                        \"work\": \"Update status report\",\n                        \"days\": [date_str],\n                        \"hours\": (7, 10)\n                    })\n                except ValueError:\n                    pass\n            if \"ten days later\" in line:\n                try:\n                    date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=10)\n                    date_str = date.strftime(\"%Y-%m-%d\")\n                    tasks.append({\n                        \"work\": \"Update status report\",\n                        \"days\": [date_str],\n                        \"hours\": (7, 10)\n                    })\n                except ValueError:\n                    pass\n        if \"commission\" in line and \"lawyer\" in line:\n            tasks.append({\n                \"work\": \"Work on commission for a lawyer\",\n                \"days\": [],\n                \"hours\": []\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"host a vintage styling workshop\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"optimize a new model for pattern recognition\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-03-07\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"rehearsals for the new play\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"reorganize the store\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"sourcing trip to Paris\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-03-21\",\n      \"2024-03-22\",\n      \"2024-03-23\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article for a new inventory system\",\n    \"days\": [\n      \"2024-03-21\",\n      \"2024-03-22\",\n      \"2024-03-23\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-03-12\",\n      \"2024-03-13\",\n      \"2024-03-14\",\n      \"2024-03-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-03-17\",\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-03-13\",\n      \"2024-03-15\",\n      \"2024-03-21\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2024-03-16\",\n      \"2024-03-22\"\n    ],\n    \"hours\": [\n      14,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-03-20\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"host a 1960s themed fashion show\",\n    \"days\": [\n      \"2024-04-08\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  },\n  {\n    \"work\": \"layout for a new exhibit on Victorian fashion photography\",\n    \"days\": [\n      \"2024-03-25\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-03-25\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-03-15\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  },\n  {\n    \"work\": \"source new pieces for the store\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      10,\n      17\n    ]\n  },\n  {\n    \"work\": \"work on a new briefcase design\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-03-24\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-03-23\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-03-17\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  },\n  {\n    \"work\": \"post photos on the shop\u2019s instagram\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      18,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\",\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2020-03-23\",\n      \"2020-03-24\",\n      \"2020-03-25\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project metrics\",\n    \"days\": [\n      \"2024-01-19\",\n      \"2024-01-20\",\n      \"2024-01-21\",\n      \"2024-01-22\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"debugging code\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"AI model for predicting traffic patterns\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"midday walk\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-03-19\",\n      \"2020-03-22\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a client meeting\",\n    \"days\": [\n      \"2020-03-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"editing footage from an expedition\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"practicing for a new opera role\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-02-01\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\ndef extract_task_and_time(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    work_task = \"analyzing sales data\"\n    start_time = 15  # 3 p.m.\n    end_time = 19  # 4 hours after 3 p.m.\n\n    days = [conversation_date]\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": (start_time, end_time)\n    })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-03-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2020-03-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-03-28\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-03-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"rehearsal\",\n    \"days\": [\n      \"2020-03-23\"\n    ],\n    \"hours\": (\n      12,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2020-03-15\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"finish a new wallet design\",\n    \"days\": [\n      \"2020-04-04\",\n      \"2020-04-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"rehearsals for *La Traviata*\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2020-03-29\",\n      \"2020-03-30\",\n      \"2020-03-31\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"monitor website analytics\"\n    start_time = 15  # 3 p.m.\n    duration = 4  # 4 hours\n    end_time = start_time + duration\n\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    dates = []\n\n    # Find mentions of the task and associated temporal expressions\n    for line in conversation:\n        if task_description in line.lower():\n            if \"two days ago\" in line.lower():\n                date = conversation_datetime - timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"today\" in line.lower():\n                date = conversation_datetime\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"tomorrow\" in line.lower():\n                date = conversation_datetime + timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"one more time after that\" in line.lower() and dates:\n                date = conversation_datetime + timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n    if dates:\n        tasks.append({\n            \"work\": task_description,\n            \"days\": dates,\n            \"hours\": (start_time, end_time)\n        })\n\n    return tasks\n\n\nconversation = [\n    \"Feeling good today, you?\",\n    \"Alessia: Hey Dominic! Just letting you know, I started to monitor website analytics two days ago, and I have to continue for three consecutive days from 3 p.m"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2020-04-06\",\n      \"2020-04-07\",\n      \"2020-04-08\",\n      \"2020-04-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' for a task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"analyze daily reports\"\n    hours = (11, 14)  # 11 am to 3 pm\n\n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates based on relative time expressions\n    dates = []\n    for line in conversation:\n        if task_description in line.lower():\n            if \"5 days ago\" in line.lower():\n                date = date_obj - timedelta(days=5)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"3 days later\" in line.lower():\n                date = date_obj + timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"today\" in line.lower():\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            elif \"yesterday\" in line.lower():\n                date = date_obj - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"in 2 days from now\" in line.lower():\n                date = date_obj + timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"two days ago\" in line.lower():\n                date = date_obj - timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n    if"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    for line in conversation:\n        if \"routine inspections\" in line.lower():\n            task = \"routine inspections\"\n            try:\n                # Extract dates\n                dates = []\n                days_later_list = [\"8 days later\", \"11 days later\", \"16 days later\"]\n                conv_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                for days_later in days_later_list:\n                    days = int(days_later.split(\" \")[0])\n                    date = conv_date + timedelta(days=days)\n                    dates.append(date.strftime(\"%Y-%m-%d\"))\n\n                # Extract hours\n                start_hour = 11\n                end_hour = start_hour + 4\n                hours = (start_hour, end_hour)\n\n                task_details.append({\n                    \"work\": task,\n                    \"days\": dates,\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass  # Handle potential errors in date parsing\n    return task_details\n\n# Example usage with the provided input:\nconversation = [\n    \"Hailey: How are things on your end?\",\n    \"Alessia: Oh, hello Hailey! Things are quite busy. I had to conduct routine inspections 8 days later, then again 11 days later, and then once more 16 days later, all from 11 in the morning until 4 hours after that. It's quite a commitment alongside rehearsals, but it has to be done.\",\n    \"Hailey: That sounds like a lot to juggle, especially with everything else you've got going on. I'"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2020-04-03\",\n      \"2020-04-07\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2020-04-11\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-04-05\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2020-04-08\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no work task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    work_task = \"deliver a training session\"\n    offset_days = 20\n    start_hour = 13\n    end_hour = 15\n\n    days = []\n    task_date = conversation_date + timedelta(days=offset_days)\n    days.append(task_date.strftime(\"%Y-%m-%d\"))\n\n    tasks.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2020-04-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (13, 16)\n  },\n  {\n    \"work\": \"volunteer work\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (0, 23)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-04-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-07-27\",\n      \"2024-07-28\",\n      \"2024-07-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a daily review session\",\n    \"days\": [\n      \"2024-07-30\",\n      \"2024-07-31\",\n      \"2024-08-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"routine inspections\"\n    start_hour = 7\n    end_hour = 11  # 7 + 4\n    hours = (start_hour, end_hour)\n    \n    days = []\n    \n    # Parse the conversation to find dates mentioned\n    for line in conversation:\n        if \"four days ago\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=4)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"yesterday\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"today\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"tomorrow\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"in two days\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n            \n    if days:\n        tasks.append({\n            \"work\": work_task,\n            \"days\":"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-07-23\",\n      \"2024-07-27\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"monitor production output\" in line.lower():\n            task = \"Monitor production output\"\n            \n            # Extract dates\n            dates = []\n            if \"tomorrow\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"5 days later\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=5)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"6 days later\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=6)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"in a few days, starting in 5 days from now\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=5)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            \n            # Extract hours\n            if \"3 p.m. until two hours after that\" in line.lower():\n                hours = (15, 17)\n            elif \"3 p.m. until 5 p.m.\" in line.lower():\n                hours = (15, 17)\n            else:\n                hours = None\n                \n            if hours:\n                tasks.append({\n                    \"work\": task,\n                    \"days\": dates,\n                    \"hours\": hours\n                })\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Victoria: How are things on your end?\",\n    \""
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-07-25\",\n      \"2024-08-01\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"working on the proposal\",\n    \"days\": [\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-07-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-07-27\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-07-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-07-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-07-28\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-08-11\",\n      \"2024-08-12\",\n      \"2024-08-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-08-05\",\n      \"2024-08-06\",\n      \"2024-08-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"work on daily planning\",\n    \"days\": [\n      \"2024-08-12\",\n      \"2024-08-13\",\n      \"2024-08-14\",\n      \"2024-08-15\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-08-04\",\n      \"2024-08-13\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"preparing for a small exhibition of local artists\",\n    \"days\": [\n      \"2024-09-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-08-10\",\n      \"2024-08-14\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-08-02\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"visit a small antique fair\",\n    \"days\": [\n      \"2024-08-12\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    work_task = \"prepare a workshop agenda\"\n    days = []\n    hours = None\n\n    for line in conversation:\n        if work_task in line.lower():\n            if \"18 days later\" in line.lower():\n                task_date = conversation_date + timedelta(days=18)\n                days.append(task_date.strftime(\"%Y-%m-%d\"))\n            if \"11 in the morning\" in line.lower() and \"3 in the afternoon\" in line.lower():\n                hours = (11, 15)\n            elif \"11 in the morning for four hours\" in line.lower():\n                hours = (11, 15)\n            elif \"from 11 in the morning\" in line.lower():\n                hours = (11, 15)\n\n    if days and hours:\n        tasks.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return tasks\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation \n                                             in YYYY-MM-DD format. \n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries containing task details.  \n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"organize a workshop\" in line:\n            utterance = line.split(\":\")[1].strip()\n            days_offset = None\n            try:\n                days_offset = int(utterance.split(\" \")[-3])\n            except:\n                pass\n            \n            if days_offset is not None:\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_str = \"11 in the morning\"\n                start_hour = 11\n                end_hour = start_hour + 4\n\n                task_details.append({\n                    \"work\": \"organize a workshop\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n    return task_details\n\n# Example usage with the provided input:\nconversation = [\n    \"Just dropping you a line.\",\n    \"Victoria: Hey Malik, just wanted to let you know that I have to organize a workshop 16 days later, from 11 in the morning for four hours.\",\n    \"Malik: That sounds like a really interesting task, Victoria! What kind of workshop will it be?\",\n    \"Victoria: It\u2019s for local history enthusiasts, focusing on Victorian-era crafts. I'm really excited about it!\",\n    \"Malik: Oh, that's perfect for you, given your line of work! You'll definitely bring"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-08-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-08-06\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-08-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-08-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a research paper\",\n    \"days\": [\n      \"2024-08-11\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"prepping for a Victorian-era jewellery exhibit\",\n    \"days\": [\n      \"2024-08-12\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2021-11-22\",\n      \"2021-11-23\",\n      \"2021-11-24\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"monitor production output\"\n    \n    # Find mentions of the work task\n    for line in conversation:\n        if work_task in line.lower():\n            # Extract temporal information\n            if \"ten days ago\" in line.lower():\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=10)\n                days = [start_date.strftime(\"%Y-%m-%d\"),\n                        (start_date + timedelta(days=1)).strftime(\"%Y-%m-%d\"),\n                        (start_date + timedelta(days=2)).strftime(\"%Y-%m-%d\")]\n                \n                if \"1 p.m.\" in line:\n                    start_hour = 13\n                    end_hour = 13 + 3 \n                    hours = (start_hour, end_hour)\n                else:\n                    hours = None\n\n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            \n            \n            \n    return task_details\n\n# Example usage:\nconversation = [\n    \"Ali: What\u2019s been keeping you busy lately?\",\n    \"Hailey: Oh, hey! Well, it's been pretty hectic. I\u2019ve been having to monitor production output, started ten days ago for three consecutive days, all from 1 p.m. until 3 hours after that.\",\n    \"Ali: That sounds intense. I've been practicing a new piece for my next concert; it\u2019s a bit of a challenge.\",\n    \"Hailey: I can imagine! It feels good to get that work done, though. Plus,"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  },\n  {\n    \"work\": \"finished a new tasting menu\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2021-11-29\",\n      \"2021-11-30\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking daily emails\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-11-24\",\n      \"2021-11-25\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2021-11-22\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"vaccination campaign\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"analyze sales data\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = 14\n                # Calculate the date\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end times\n                start_hour = 7\n                end_hour = start_hour + 4\n\n                tasks.append({\n                    \"work\": \"analyze sales data\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where date parsing fails\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"How\u2019s everything going?\",\n    \"Hailey: Hey Helen! Things are pretty good, just been super busy. I had to analyze sales data fourteen days ago from 7 in the morning for four hours, and it took a lot out of me.\",\n    \"Helen: Oh, that sounds intense, Hailey! I'm glad you're managing though. I was just reading a fascinating passage about Pericles\u2026 it really put things in perspective.\",\n    \"Hailey: That\u2019s cool! I\u2019m trying to relax a little now before heading out for a hike. It's a good way to clear my head after staring at spreadsheets all day.\",\n    \"Helen: A hike sounds perfect. I\u2019ve been meaning to"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2021-12-01\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2021-11-28\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2021-12-02\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"snowboarding competition\",\n    \"days\": [\n      \"2021-12-06\",\n      \"2021-12-07\",\n      \"2021-12-08\",\n      \"2021-12-09\",\n      \"2021-12-10\",\n      \"2021-12-11\",\n      \"2021-12-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-11-26\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"revisions for a new piece\",\n    \"days\": [\n      \"2022-01-04\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"off-snow conditioning, strength training and agility work\",\n    \"days\": [\n      \"2021-12-04\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-12-11\",\n      \"2021-12-12\",\n      \"2021-12-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2021-12-08\",\n      \"2021-12-09\",\n      \"2021-12-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2021-12-13\",\n      \"2021-12-14\",\n      \"2021-12-15\",\n      \"2021-12-16\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2021-12-03\",\n      \"2021-12-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2021-12-07\",\n      \"2021-12-12\",\n      \"2021-12-14\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2021-12-06\",\n      \"2021-12-13\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-12-14\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-12-04\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"performing at a small venue\",\n    \"days\": [\n      \"2021-12-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details.  Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details_list = []\n\n    for line in conversation:\n        if \"organize a workshop\" in line or \"workshop\" in line:\n            if \"23 days later\" in line:\n                offset_days = 23\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                if \"3 in the afternoon\" in line and \"4 hours after that\" in line:\n                    start_hour = 15\n                    end_hour = 19\n                elif \"3 p.m.\" in line and \"7 p.m.\" in line:\n                    start_hour = 15\n                    end_hour = 19\n                elif \"3 in the afternoon for four hours\" in line:\n                    start_hour = 15\n                    end_hour = 19\n                else:\n                    start_hour = None\n                    end_hour = None\n\n                task_details = {\n                    \"work\": \"organize a workshop\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                }\n                task_details_list.append(task_details)\n\n    return task_details_list\n```\n```output\n[\n    {\n        \"work\": \"organize a workshop\",\n        \"days\": [\"2024-01-24\"],\n        \"hours\": (15, 19)\n    }"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"compile a weekly summary\" in line:\n            try:\n                # Extract temporal information\n                offset_days = 5\n                start_time_str = \"7 a.m.\"\n                start_hour = int(start_time_str.split(\" \")[0])\n                if start_time_str.endswith(\"p.m.\"):\n                    start_hour += 12\n                elif start_time_str.endswith(\"a.m.\") and start_hour == 12:\n                    start_hour = 0\n                \n                end_hour = start_hour + 2\n\n                # Calculate the date\n                task_date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)).strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"compile a weekly summary\",\n                    \"days\": [task_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"leading a kayaking expedition\" in line:\n            try:\n                # Extract temporal information\n                offset_days = 14\n                start_hour = 9\n                end_hour = 17\n\n                # Calculate the date\n                task_date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)).strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"leading a kayaking expedition\",\n                    \"days\": [task_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"scheduling an interview\",\n    \"days\": [\n      \"2021-12-08\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"host a webinar session\" in line:\n            try:\n                # Extract temporal information\n                date_str = \"10 days later from\"\n                time_str = \"11 in the morning\"\n                duration_str = \"three hours\"\n\n                # Calculate the date\n                date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                offset_days = 10\n                task_date = date_object + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Calculate the time\n                start_hour = 11\n                end_hour = start_hour + 3\n\n                task_details = {\n                    \"work\": \"host a webinar session\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour),\n                }\n                tasks.append(task_details)\n            except ValueError as e:\n                print(f\"Error processing temporal information: {e}\")\n                continue\n\n    return tasks\n\n# Example Usage:\nconversation = [\n    \"Just a quick hello from me!\",\n    \"Hailey: Hey Atsuko! Just wanted to let you know, I have to host a webinar session 10 days later from 11 in the morning for three hours.\",\n    \"Atsuko: Oh, that sounds interesting, Hailey! What will the webinar be about? I\u2019m always curious to learn new things.\",\n    \"Hailey: It's focused on snowboarding techniques for hitting the park. It's a bit nerve-wracking being in front of a screen like that but should be good practice.\",\n    \"Atsuko: I can"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-12-08\",\n      \"2021-12-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2021-12-10\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2023-10-15\",\n      \"2023-10-16\",\n      \"2023-10-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2023-10-12\",\n      \"2023-10-13\",\n      \"2023-10-14\",\n      \"2023-10-15\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2023-10-06\",\n      \"2023-10-08\",\n      \"2023-10-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2023-10-07\",\n      \"2023-10-09\",\n      \"2023-10-14\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2023-10-07\",\n      \"2023-10-11\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-10-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-10-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2023-10-12\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2023-10-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-10-08\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2023-10-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"planning a workshop for the local youth center\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"preliminary research for a story\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-10-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2023-10-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-10-08\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2023-10-22\",\n      \"2023-10-23\",\n      \"2023-10-24\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-10-27\",\n      \"2023-10-28\",\n      \"2023-10-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-10-24\",\n      \"2023-10-25\",\n      \"2023-10-26\",\n      \"2023-10-27\"\n    ],\n    \"hours\": [\n      13,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-13\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2023-10-20\",\n      \"2023-10-23\",\n      \"2023-10-28\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2023-10-20\",\n      \"2023-10-22\"\n    ],\n    \"hours\": [\n      9,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a budget proposal\",\n    \"days\": [\n      \"2023-10-23\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"wrestling with a balance spring\",\n    \"days\": [\n      \"2023-10-31\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-10-31\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"market analysis\" in line.lower():\n            try:\n                # Extract time information\n                start_time_str = \"4 p.m.\"\n                start_hour = datetime.strptime(start_time_str, \"%I %p\").hour\n                end_hour = start_hour + 3\n\n                # Calculate the date\n                days_ago = 2\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                task_date = date_obj.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"market analysis\",\n                    \"days\": [task_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass # Ignore lines that mention market analysis but don't have valid time information\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2023-11-02\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-10-26\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2023-10-22\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2023-10-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Submit a project proposal for covering the humanitarian crisis unfolding in Sudan\",\n    \"days\": [\n      \"2024-07-18\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-01-23\",\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-28\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-01-13\",\n      \"2024-01-14\",\n      \"2024-01-15\",\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    task_description = \"review operational data\"\n    hours = (7, 9)\n\n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    dates = []\n    for line in conversation:\n        if task_description in line:\n            if \"7 days\" in line:\n                date = date_obj + timedelta(days=7)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"yesterday\" in line:\n                date = date_obj - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"two days ago\" in line:\n                date = date_obj - timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"three days ago\" in line:\n                date = date_obj - timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"today\" in line:\n                date = date_obj\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"in 3 days\" in line:\n                date = date_obj + timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n    \n    \n    # Remove duplicates\n    dates = list(set(dates))\n\n    if dates:\n        tasks.append({\n            \"work\": task_description,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2022-03-21\",\n      \"2022-03-22\",\n      \"2022-03-24\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"restore '57 Chevy\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"decipher data from ocean sampling\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"present evidence to policymakers\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2022-03-12\",\n      \"2022-03-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-03-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-03-22\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"finalizing the wine list for a special event\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-03-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"reorganize the local history section at the library\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2022-03-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"car restoration\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"planning a small exhibition\",\n    \"days\": [\n      \"2022-04-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"tinkering with a '57 Chevy\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-03-17\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"designing new collection\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"restoration projects\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"bodywork on Chevy\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"working on the engine of Chevy\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"sewing\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2022-03-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"tinkering with a \u201867 Mustang\",\n    \"days\": [\n      \"2024-01-29\",\n      \"2024-01-30\",\n      \"2024-01-31\",\n      \"2024-02-01\",\n      \"2024-02-02\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-03-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"restoring a Packard from '35\",\n    \"days\": [\n      \"2022-04-07\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2022-03-12\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"restore a '67 Mustang\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-23\",\n      \"2022-03-24\",\n      \"2022-03-25\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\",\n      \"2022-03-30\",\n      \"2022-03-31\",\n      \"2022-04-01\",\n      \"2022-04-02\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2022-03-30\",\n      \"2022-03-31\",\n      \"2022-04-01\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2022-03-28\",\n      \"2022-04-05\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record daily observations\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-04-02\",\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"restoring a 1967 Mustang\",\n    \"days\": [\n      \"2022-03-17\"\n    ],\n    \"hours\": (\n      9,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2022-03-30\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2022-03-30\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"organizing a workshop for families\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\",\n      \"2022-03-30\",\n      \"2022-03-31\",\n      \"2022-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-04-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"restore a '67 Mustang\",\n    \"days\": [\n      \"2022-04-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2022-03-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-03-25\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                           Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"record a podcast episode\" in line:\n            try:\n                parts = line.split(\"record a podcast episode\")\n                days_later_str = parts[1].split(\"days later\")[0].strip()\n                days_later = int(days_later_str)\n                \n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_str = \"7 in the morning\"\n                start_hour = 7\n                end_hour = start_hour + 4\n\n                task = {\n                    \"work\": \"record a podcast episode\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                }\n                tasks.append(task)\n            except Exception as e:\n                print(f\"Error processing line: {line}. Error: {e}\")\n    \n    return tasks\n\n# Example usage\nconversation = [\n    \"Is everything going okay?\",\n    \"Henry: Hey Dominic, just letting you know I have to record a podcast episode 16 days later, from 7 in the morning for four hours. It\u2019s been a busy few weeks getting everything prepped!\",\n    \"Dominic: That sounds like a fascinating project, Henry. I always enjoy hearing about what you're working on.\",\n    \"Henry: Thanks, Dominic! It's a bit different from carburetors"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"water the office plants\"\n    \n    # Parse the conversation date\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract temporal details\n    dates = []\n    \n    for line in conversation:\n        if work_task in line:\n            if \"16 days ago\" in line:\n                date = date_obj - timedelta(days=16)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"yesterday\" in line:\n                date = date_obj - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"today\" in line:\n                date = date_obj\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"in 2 days\" in line:\n                date = date_obj + timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"in 3 days\" in line:\n                date = date_obj + timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            \n            hours = (7, 11)  # From 7 in the morning for four hours\n\n            tasks.append({\n                \"work\": work_task,\n                \"days\": dates,\n                \"hours\": hours\n            })\n\n    return tasks\n\n\n# Example usage with the provided input:\nconversation = [\n    \"How have you been lately?\",\n    \"Noor: Hey Jin"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2023-12-22\",\n      \"2023-12-23\",\n      \"2023-12-24\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2023-12-25\",\n      \"2023-12-26\",\n      \"2023-12-27\",\n      \"2023-12-28\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2023-12-15\",\n      \"2023-12-24\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2023-12-19\",\n      \"2023-12-23\",\n      \"2023-12-28\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"responding to customer inquiries\",\n    \"days\": [\n      \"2023-12-17\",\n      \"2023-12-19\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"collaborative mural project\",\n    \"days\": [\n      \"2024-02-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2023-12-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-12-16\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-12-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"village health education session\",\n    \"days\": [\n      \"2024-01-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2023-12-27\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"tea ceremony\",\n    \"days\": [\n      \"2024-01-08\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"workshop on parenting skills\",\n    \"days\": [\n      \"2024-01-02\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-12-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a proposal document\",\n    \"days\": [\n      \"2023-12-20\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-12-22\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-12-19\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-01-07\",\n      \"2024-01-08\",\n      \"2024-01-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating client records\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2023-12-31\",\n      \"2024-01-08\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-01-03\",\n      \"2024-01-05\",\n      \"2024-01-07\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring social media trends\",\n    \"days\": [\n      \"2023-12-30\",\n      \"2024-01-04\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-16\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview\",\n    \"days\": [\n      \"2024-01-04\"\n    ],\n    \"hours\": (13, 17)\n  },\n  {\n    \"work\": \"Performing at a small event\",\n    \"days\": [\n      \"2024-01-15\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-01-11\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"meeting with a potential investor\",\n    \"days\": [\n      \"2023-12-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-12-29\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-01-01\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\"2024-01-24\"],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-01-02\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  },\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-01-10\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating a work log\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2024-10-02\",\n      \"2024-10-03\",\n      \"2024-10-04\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"plan a fall festival\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"safety check\" in line.lower():\n            try:\n                # Extract temporal information\n                start_days_ago = 11\n                duration_days = 4\n                start_time_str = \"3 p.m.\"\n                duration_hours = 4\n\n                # Convert relative dates to absolute dates\n                conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                start_date_obj = conversation_date_obj - timedelta(days=start_days_ago)\n                days = [(start_date_obj + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n                # Convert time to 24-hour format\n                start_time_obj = datetime.strptime(start_time_str, \"%I %p\")\n                start_hour = start_time_obj.hour\n                end_hour = (start_hour + duration_hours) % 24\n\n                hours = (start_hour, end_hour)\n\n                tasks.append({\n                    \"work\": \"Conduct daily safety check\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            except ValueError as e:\n                print(f\"Error processing temporal information: {e}\")\n\n    return tasks\n\n# Example usage\nconversation = [\n    \"Long time no talk!\",\n    \"Yuna: Hey Victoria! It\u2019s been a while. I just wanted to let you know I\u2019ve been really busy lately with work. I had to conduct a daily safety check, starting eleven days ago for four consecutive days, from 3 p.m. until 4 hours after that.\",\n    \"Victoria: Oh, hello Yuna! That sounds\u2026"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-10-01\",\n      \"2024-10-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    tasks = []\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Identify the work task: responding to customer inquiries\n    task_description = \"responding to customer inquiries\"\n\n    # Extract temporal details\n    days = []\n    hours = (11, 13)  # 11 AM to 1 PM (two hours)\n\n    # Calculate dates based on relative references\n    days.append((date_obj - timedelta(days=19)).strftime(\"%Y-%m-%d\"))\n    days.append((date_obj - timedelta(days=12)).strftime(\"%Y-%m-%d\"))\n    days.append((date_obj - timedelta(days=8)).strftime(\"%Y-%m-%d\"))\n\n    # Create a dictionary for the task\n    task_data = {\n        \"work\": task_description,\n        \"days\": days,\n        \"hours\": hours\n    }\n    tasks.append(task_data)\n\n    return tasks\n\n# Example Usage\nconversation = [\n    \"Victoria: Just checking in to say hi.\",\n    \"Yuna: Hi Victoria! Just wanted to let you know I\u2019ve been responding to customer inquiries nineteen days ago, twelve days ago, and eight days ago, all from 11 in the morning for two hours. It's been keeping me busy!\",\n    \"Victoria: Oh, that sounds like it requires a lot of patience. How are things going with your class currently?\",\n    \"Yuna: They\u2019re so energetic this week! We're preparing a little play based on a traditional Korean folktale. It\u2019s chaotic, but so much fun.\",\n    \"Victoria: That sounds lovely! Children's plays are always heartwarming. I'm currently working on cataloging a new collection of Victorian-era letters.\",\n    \"Yuna"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-09-28\",\n      \"2024-10-09\"\n    ],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-10-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"planning a team outing\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-22\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-10-06\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"make felt animals\",\n    \"days\": [\n      \"2024-10-28\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  },\n  {\n    \"work\": \"compete\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-10-03\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"nature walk with students\",\n    \"days\": [\n      \"2024-10-14\",\n      \"2024-10-15\",\n      \"2024-10-16\",\n      \"2024-10-17\",\n      \"2024-10-18\",\n      \"2024-10-19\",\n      \"2024-10-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\"2024-02-15\"],\n    \"hours\": [13, 15]\n  },\n  {\n    \"work\": \"start a new crafting project with my class\",\n    \"days\": [\"2024-02-17\"],\n    \"hours\": [9, 17]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-10-05\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"preparing for class/story time\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  },\n  {\n    \"work\": \"find a venue for a workshop\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-10-02\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"plan activities for students\",\n    \"days\": [\n      \"2024-10-21\",\n      \"2024-10-22\",\n      \"2024-10-23\",\n      \"2024-10-24\",\n      \"2024-10-25\",\n      \"2024-10-26\",\n      \"2024-10-27\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-10-17\",\n      \"2024-10-18\",\n      \"2024-10-19\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-10-22\",\n      \"2024-10-23\",\n      \"2024-10-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"sourcing rare spices\",\n    \"days\": [\n      \"2024-10-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-10-11\",\n      \"2024-10-12\",\n      \"2024-10-13\",\n      \"2024-10-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-10-20\",\n      \"2024-10-21\",\n      \"2024-10-23\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-10-15\",\n      \"2024-10-18\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-10-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-10-18\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting a customer feedback report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-10-19\"\n    ],\n    \"hours\": (15, 19)\n  },\n  {\n    \"work\": \"start a unit on storytelling\",\n    \"days\": [\n      \"2024-10-14\"\n    ],\n    \"hours\": (0, 23)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting a market survey\",\n    \"days\": [\n      \"2024-10-24\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details = []\n\n    for line in conversation:\n        if \"market analysis\" in line:\n            try:\n                parts = line.split(\"from\")\n                time_part = parts[1].strip()\n                \n                # Extract the number of days offset\n                offset_days = 19\n                \n                # Calculate the absolute date\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract time and duration\n                time_str = time_part.split(\"for\")[0].strip()\n                start_time_str = time_str.replace(\" in the morning\", \"\")\n                start_hour = datetime.strptime(start_time_str, \"%I %p\").hour\n                duration_hours = 3\n                end_hour = (start_hour + duration_hours) % 24\n\n                hours = (start_hour, end_hour)\n\n                task_details.append({\n                    \"work\": \"complete a market analysis\",\n                    \"days\": [task_date_str],\n                    \"hours\": hours\n                })\n            except:\n                pass #ignore if parsing fails.\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2024-10-15\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  },\n  {\n    \"work\": \"planning a fall-themed story time\",\n    \"days\": [\n      \"2024-10-14\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"compile a weekly summary\" in line:\n            try:\n                # Extract date\n                days_later = int(line.split(\" \")[-3])\n                task_date = conversation_date + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract time\n                start_hour = 12\n                end_hour = start_hour + 3\n\n                tasks.append({\n                    \"work\": \"compile a weekly summary\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-10-15\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-11-17\",\n      \"2022-11-18\",\n      \"2022-11-19\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct code reviews\",\n    \"days\": [\n      \"2022-11-17\",\n      \"2022-11-18\",\n      \"2022-11-19\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reading a technical article\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-11-15\",\n      \"2022-11-26\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its details.\n    \"\"\"\n\n    tasks = []\n    reference_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"meeting\" in line.lower() and \"virtual\" in line.lower():\n            if \"24 days ago\" in line.lower():\n                date = reference_date - timedelta(days=24)\n                tasks.append({\n                    \"work\": \"virtual meeting\",\n                    \"days\": [date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (7, 9)\n                })\n            if \"22 days ago\" in line.lower():\n                date = reference_date - timedelta(days=22)\n                tasks.append({\n                    \"work\": \"virtual meeting\",\n                    \"days\": [date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (7, 9)\n                })\n            if \"17 days ago\" in line.lower():\n                date = reference_date - timedelta(days=17)\n                tasks.append({\n                    \"work\": \"virtual meeting\",\n                    \"days\": [date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (7, 9)\n                })\n        if \"rehearsals\" in line.lower() and \"play\" in line.lower() and \"next month\" in line.lower():\n            next_month = reference_date.replace(day=1) + timedelta(days=32)\n            tasks.append({\n                \"work\": \"play rehearsals\",\n                \"days\": [next_month.strftime(\"%Y-%m-%d\")],\n                \"hours\": (9, 17)  # Assuming typical rehearsal hours\n            })\n        if \"filming wildlife\" in line:\n            tasks.append({\n                \""
"```json\n[\n  {\n    \"work\": \"Manage daily work schedule\",\n    \"days\": [\n      \"2022-11-18\",\n      \"2022-11-25\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Filming orangutans in Borneo\",\n    \"days\": [\n      \"2022-12-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-11-15\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2022-11-27\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"fundraising for next project\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2022-11-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2022-11-25\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-11-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"preparing for another trip to the Amazon\",\n    \"days\": [\n      \"2022-12-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  },\n  {\n    \"work\": \"filming penguins in Antarctica\",\n    \"days\": [\n      \"2024-12-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-11-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Write a technical blog post\",\n    \"days\": [\n      \"2022-11-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-11-28\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"conservation project in Borneo, focusing on orangutan rehabilitation\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2022-12-10\",\n      \"2022-12-11\",\n      \"2022-12-12\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"monitor system performance\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract temporal details\n    for line in conversation:\n        if task_description in line:\n            if \"4 days\" in line:\n                date = date_obj + timedelta(days=4)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (12, 14)\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})\n                \n            elif \"yesterday\" in line:\n                date = date_obj - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (12, 14)\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})\n                \n            elif \"three days ago\" in line:\n                date = date_obj - timedelta(days=3)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (12, 14)\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})\n                \n            elif \"today\" in line:\n                date = date_obj\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (12, 14)\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"Analyze daily reports\"\n    \n    # Calculate the start date based on \"ten days ago\"\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=10)\n    \n    # Create a list of dates for the four consecutive days\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(4)]\n    \n    hours = (15, 17)  # 3 p.m. to 5 p.m. (two hours after 3 p.m.)\n\n    task_details.append({\n        \"work\": task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2022-12-06\",\n      \"2022-12-12\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-07-11\",\n      \"2024-07-14\",\n      \"2024-07-19\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily review session\",\n    \"days\": [\n      \"2022-11-29\",\n      \"2022-11-30\"\n    ],\n    \"hours\": (12, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-12-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"filming b-roll footage for a potential documentary\",\n    \"days\": [\n      \"2022-11-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2022-12-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2022-12-03\",\n      \"2022-12-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    for line in conversation:\n        if \"submit a project proposal\" in line:\n            try:\n                parts = line.split(\"16 days later\")\n                time_info = parts[1].strip()\n                start_time_str = time_info.split(\"from \")[1].split(\" until \")[0].strip()\n                end_time_offset_str = time_info.split(\"until \")[1].strip().replace(\" hours after that\", \"\")\n                \n                start_hour = int(datetime.strptime(start_time_str, \"%I %p\").strftime(\"%H\"))\n                end_hour = start_hour + int(end_time_offset_str)\n\n                task_date = conversation_date + timedelta(days=16)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"submit a project proposal\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass # ignore if we can't parse the data\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2022-12-07\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2022-12-07\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2022-12-10\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-11-29\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"organizing the holiday reading program\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-10\",\n      \"2024-02-11\",\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    \n    # Parse the conversation date\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Identify the task and extract temporal details\n    for line in conversation:\n        if \"daily huddle\" in line.lower():\n            task = \"attend daily huddle\"\n            days = []\n            hours = (15, 18)\n            \n            # Extract dates based on relative time expressions\n            if \"9 days\" in line.lower():\n                date = conversation_datetime + timedelta(days=9)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"4 consecutive days\" in line.lower() or \"4 days after that\" in line.lower():\n                start_date = conversation_datetime + timedelta(days=9)\n                for i in range(4):\n                    date = start_date + timedelta(days=i)\n                    days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"3 days ago\" in line.lower():\n                date = conversation_datetime - timedelta(days=3)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line.lower():\n                date = conversation_datetime - timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"today\" in line.lower():\n                date = conversation_datetime\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"two days ago\" in line.lower():\n"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-01-13\",\n      \"2020-01-15\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2020-01-10\",\n      \"2020-01-13\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2020-01-14\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2020-01-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2020-01-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-01-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"coding projects\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2020-01-21\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"prepare for next assignment, heading to Ukraine\",\n    \"days\": [\n      \"2020-01-29\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2020-01-08\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2020-01-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2020-01-18\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-27\",\n      \"2020-01-28\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reading a technical article\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-27\",\n      \"2020-01-28\",\n      \"2020-01-29\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-29\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2020-01-28\",\n      \"2020-01-23\",\n      \"2020-01-22\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"coding\",\n    \"days\": [\n      \"2020-01-28\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"sketches for the new collection\",\n    \"days\": [\n      \"2020-01-28\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"design\",\n    \"days\": [\n      \"2020-01-28\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-03-14\",\n      \"2024-03-18\"\n    ],\n    \"hours\": [\n      13,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2020-01-25\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2020-02-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-01-22\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"debugging a particularly nasty AI algorithm\",\n    \"days\": [\n      \"2020-01-22\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2020-02-01\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"review a budget proposal\"\n    \n    # Calculate the date sixteen days from the conversation date\n    date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    target_date = date_object + timedelta(days=16)\n    target_date_str = target_date.strftime(\"%Y-%m-%d\")\n\n    # Extract time range\n    start_hour = 7\n    end_hour = start_hour + 4\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": [target_date_str],\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2020-02-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2020-01-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details.  Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details = []\n\n    for line in conversation:\n        if \"organizing a workshop\" in line:\n            task = \"organizing a workshop\"\n            try:\n                time_str = line.split(\"from \")[1].split(\" for \")[0]\n                hour = int(time_str.split(\" \")[0])\n                duration_str = line.split(\"for \")[1].split(\" \")[0]\n                duration = int(duration_str)\n\n                offset_days = 10\n                task_date = conversation_date + timedelta(days=offset_days)\n\n                start_hour = hour\n                end_hour = hour + duration\n\n                task_details.append({\n                    \"work\": task,\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError) as e:\n                print(f\"Error parsing time information: {e}\")\n                continue\n\n    return task_details\n```\n\n```\n[\n    {\n        \"work\": \"organizing a workshop\",\n        \"days\": [\n            \"2024-01-11\"\n        ],\n        \"hours\": (\n            7,\n            11\n        )\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-01-18\",\n      \"2024-01-19\",\n      \"2024-01-20\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update a performance log\",\n    \"days\": [\n      \"2021-09-11\",\n      \"2021-09-12\",\n      \"2021-09-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2021-09-15\",\n      \"2021-09-16\",\n      \"2021-09-17\",\n      \"2021-09-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a work task and its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"review daily feedback\" in line.lower():\n            # Extract temporal information\n            days_ago = None\n            if \"three days ago\" in line.lower():\n                days_ago = 3\n            elif \"yesterday\" in line.lower():\n                days_ago = 1\n            \n            if days_ago is not None:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                \n                start_hour = 9\n                end_hour = 11\n\n                tasks.append({\n                    \"work\": \"review daily feedback\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n                \n    return tasks\n\n# Example usage:\nconversation = [\n    \"How are things on your end?\",\n    \"Evan: Hey Xavier! Things are alright, just been keeping busy. I had to review daily feedback three days ago and yesterday, both from 9 in the morning for two hours. It's always good to get a pulse on how things are going with the audience, you know?\",\n    \"Xavier: That\u2019s good, man. I've been doing alright myself. It's been pretty laid back, practicing a bit and getting ready for a gig next week.\",\n    \"Evan: Oh cool, a gig! Where are you playing? I'm always looking for new places to check out music.\",\n    \"Xavier: It's at The"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2021-09-08\",\n      \"2021-09-19\",\n      \"2021-09-20\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-09-07\",\n      \"2021-09-11\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a community event\",\n    \"days\": [\n      \"2021-09-09\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-09-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"calligraphy commission for a local mosque\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"composing a new piece\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"private commission - a large panel for a collector in Riyadh\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-09-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2021-09-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"gig\",\n    \"days\": [\n      \"2021-09-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.  Empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"finalizing a business plan\" in line:\n            try:\n                # Extract the number of days ago\n                days_ago = int(line.split(\" \")[-2])\n\n                # Calculate the start date\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                start_date_str = start_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end hours\n                start_hour = 10\n                end_hour = start_hour + 3\n                \n                tasks.append({\n                    \"work\": \"Finalizing a business plan\",\n                    \"days\": [start_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n\n                #Second mention of finalizing business plan\n                start_hour_second = 10\n                end_hour_second = start_hour_second + 3\n                \n                tasks.append({\n                    \"work\": \"Finalizing a business plan\",\n                    \"days\": [start_date_str],\n                    \"hours\": (start_hour_second, end_hour_second)\n                })\n            except ValueError:\n                pass\n        if \"exhibiting some pieces\" in line:\n            try:\n                # Assuming \"next month\" refers to the month after the conversation date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                next_month = (conversation_datetime.month % 12) + 1\n                next_year = conversation_datetime.year + (1 if conversation_datetime.month == 12 else 0)\n                "
"```json\n[\n  {\n    \"work\": \"updating a training manual\",\n    \"days\": [\n      \"2021-09-14\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"gig with the trio\",\n    \"days\": [\n      \"2021-11-01\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\"2024-02-15\"],\n    \"hours\": [13, 15]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-09-12\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"brainstorm new menu items\",\n    \"days\": [\n      \"2021-09-22\"\n    ],\n    \"hours\": (18, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-09-29\",\n      \"2021-09-30\",\n      \"2021-10-01\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-09-22\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-09-24\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-09-25\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-27\",\n      \"2021-09-28\",\n      \"2021-09-29\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-08\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-09\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-11\",\n      \"2021-09-12\",\n      \"2021-09-13\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-06\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    current_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"schedule routine maintenance\" in line:\n            task = \"schedule routine maintenance\"\n            days = []\n            hours = (8, 11)\n\n            if \"starting in 10 days\" in line:\n                start_date = current_date + timedelta(days=10)\n                for i in range(4):\n                    days.append(start_date.strftime(\"%Y-%m-%d\"))\n                    start_date += timedelta(days=1)\n\n            if \"yesterday\" in line:\n                days.append((current_date - timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            \n            if \"two days ago\" in line:\n                 days.append((current_date - timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n\n            if \"3 days ago\" in line:\n                days.append((current_date - timedelta(days=3)).strftime(\"%Y-%m-%d\"))\n            \n            if \"today\" in line:\n                days.append(current_date.strftime(\"%Y-%m-%d\"))\n                \n            if days:\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n                \n        elif \"testing a new level\" in line:\n            task = \"testing a new level\"\n            hours = None\n            days = None\n            if \"by the end of the week\" in line:\n                end_of_week = current_date + timedelta(days=(6 - current_date.weekday()))\n                days = [end_of_week.strftime(\"%Y-%m-%d\")]\n            \n            if days:\n                tasks.append({\"work\":"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-07-12\",\n      \"2024-07-13\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring website analytics\",\n    \"days\": [\"2024-02-29\"],\n    \"hours\": (11, 13)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2021-09-21\",\n      \"2021-09-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-09-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-09-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"on-snow training\",\n    \"days\": [\n      \"2021-10-11\",\n      \"2021-10-12\",\n      \"2021-10-13\",\n      \"2021-10-14\",\n      \"2021-10-15\",\n      \"2021-10-16\",\n      \"2021-10-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-09-28\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2021-09-28\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"prepare a proposal document\" in line or \"proposal document\" in line:\n            # Extract temporal details\n            if \"three days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours_str = \"11 in the morning until 3 hours after that\"\n                start_hour = 11\n                end_hour = 11 + 3\n                tasks.append({\n                    \"work\": \"Prepare a proposal document\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            elif \"soon\" in line:\n                # Assuming \"soon\" means within the next week\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                for i in range(7):\n                    date_str = (date + timedelta(days=i)).strftime(\"%Y-%m-%d\")\n                    tasks.append({\n                        \"work\": \"Prepare a proposal document\",\n                        \"days\": [date_str],\n                        \"hours\": (9, 17)  # Assuming a standard workday\n                    })\n            elif \"again\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                date_str = date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": \"Prepare a proposal document\",\n                    "
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    \n    for line in conversation:\n        if \"prepare a project summary\" in line:\n            try:\n                parts = line.split(\" - \")\n                time_part = parts[1]\n                start_time_str, duration_str = time_part.split(\" for \")\n                start_hour = int(start_time_str.split(\" \")[0])\n                duration = int(duration_str.split(\" \")[0])\n                end_hour = start_hour + duration\n                \n                offset_days = int(line.split(\" \")[-3])\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                task_details.append({\n                    \"work\": \"prepare a project summary\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return task_details\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"design a product prototype\"\n    \n    # Calculate the target date\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    offset_days = 9\n    target_date = conversation_datetime + timedelta(days=offset_days)\n    target_date_str = target_date.strftime(\"%Y-%m-%d\")\n    \n    start_hour = 13\n    end_hour = 14\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": [target_date_str],\n        \"hours\": (start_hour, end_hour)\n    })\n    \n    return task_details\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-07-03\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            try:\n                parts = line.split(\"from \")\n                time_part = parts[1].split(\" for \")\n                start_time_str = time_part[0]\n                duration_str = time_part[1]\n\n                start_hour = int(start_time_str.split(\" \")[0])\n\n                duration_hours = int(duration_str.split(\" \")[0])\n                end_hour = start_hour + duration_hours\n                \n                offset_days = 10\n                task_date = conversation_date + timedelta(days=offset_days)\n                \n                task = {\n                    \"work\": \"organize a strategy meeting\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour),\n                }\n                tasks.append(task)\n            except:\n                pass\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2023-03-07\",\n      \"2023-03-08\",\n      \"2023-03-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2023-03-01\",\n      \"2023-03-02\",\n      \"2023-03-03\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing daily KPIs\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (16, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-03-04\",\n      \"2023-03-10\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"monitor team activity\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    date_references = {\n        \"eight days ago\": date_obj - timedelta(days=8),\n        \"six days ago\": date_obj - timedelta(days=6),\n        \"five days ago\": date_obj - timedelta(days=5)\n    }\n\n    # Extract time range\n    start_hour = 15\n    end_hour = 18  # 3 p.m. + 3 hours\n\n    for ref, date in date_references.items():\n        tasks.append({\n            \"work\": work_task,\n            \"days\": [date.strftime(\"%Y-%m-%d\")],\n            \"hours\": (start_hour, end_hour)\n        })\n        \n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2023-03-10\",\n      \"2023-03-11\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    for line in conversation:\n        if \"update a project report\" in line:\n            try:\n                # Extract the number of days ago\n                days_ago = int(line.split(\" \")[-2])  #Fixed index here as the number of days ago is the 2nd last word\n                \n                # Calculate the start date\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                start_date_str = start_date.strftime(\"%Y-%m-%d\")\n                \n                # Extract the start and end times\n                start_time_str = \"12 p.m.\"\n                start_hour = datetime.strptime(start_time_str, \"%I %p\").hour\n                end_hour = start_hour + 3\n\n                task_details.append({\n                    \"work\": \"update a project report\",\n                    \"days\": [start_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where days_ago is not a valid integer\n            except IndexError:\n                pass\n\n    return task_details\n\n# Example Usage:\nconversation = [\n    \"Hope you\u2019re having a good day.\",\n    \"Leonardo: Hey Yuri, just wanted to let you know I had to update a project report 19 days ago, working from 12 p.m. until 3 hours after that. It felt good to get it finished.\",\n    \"Yuri: That sounds like a good feeling, getting things finalized. I was just remembering a particularly vivid sunrise I saw from orbit.\",\n    \"Leonardo: Oh, that sounds incredible! I've been spending a lot of time lately trying to capture a sense of awe in my sculptures"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2023-03-11\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2023-03-13\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2023-03-06\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-03-02\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"sculpting a bronze figure of Hercules\",\n    \"days\": [\n      \"2023-03-11\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2023-03-12\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2023-03-04\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-03-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2023-03-19\",\n      \"2023-03-20\",\n      \"2023-03-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking system alerts\",\n    \"days\": [\n      \"2023-03-16\",\n      \"2023-03-17\",\n      \"2023-03-18\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2023-03-20\",\n      \"2023-03-21\",\n      \"2023-03-22\",\n      \"2023-03-23\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2023-03-17\",\n      \"2023-03-24\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2023-03-14\",\n      \"2023-03-18\",\n      \"2023-03-19\"\n    ],\n    \"hours\": (9, 13)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2023-03-15\",\n      \"2023-03-18\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"finishing up sketches for a bronze commission\",\n    \"days\": [\n      \"2023-03-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n    {\n    \"work\": \"shape planks\",\n    \"days\": [\n      \"2023-03-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2023-03-26\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-03-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2023-03-16\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2023-03-18\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    work_tasks = []\n    for line in conversation:\n        if \"complete a market analysis\" in line or \"completing a market analysis\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\"days later\")[0].split(\" \")[-1])\n\n                # Calculate the absolute date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_time_str = line.split(\"from \")[1].split(\" in the morning\")[0]\n                start_hour = int(start_time_str)\n                end_hour = start_hour + 2\n\n\n                work_tasks.append({\n                    \"work\": \"complete a market analysis\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return work_tasks\n\n# Example Usage (with the provided input):\nconversation = [\n    \"INPUT: How are you navigating things?\",\n    \"Leonardo: Hey Ali, things are alright. I just wanted to let you know I have to complete a market analysis twelve days later from 7 in the morning for two hours.\",\n    \"Ali: That sounds like a detailed project, Leonardo. I\u2019ve been spending a lot of time refining a new piece for my next performance.\",\n    \"Leonardo: Oh, that\u2019s great!"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-03-14\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-03-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2021-08-07\",\n      \"2021-08-08\",\n      \"2021-08-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-13\",\n      \"2021-08-14\",\n      \"2021-08-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-06\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-03\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-06\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article on new rendering techniques for VR\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"Narrow down ideas for a new game\",\n    \"days\": [\n      \"2024-01-13\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording daily observations\",\n    \"days\": [\n      \"2021-08-02\",\n      \"2021-08-06\"\n    ],\n    \"hours\": (13, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-08-04\",\n      \"2021-08-07\",\n      \"2021-08-10\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"starting a new VR project\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2021-08-03\",\n      \"2021-08-06\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2021-08-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"coding\",\n    \"days\": [\n      \"2021-08-14\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  },\n  {\n    \"work\": \"running a series of health workshops\",\n    \"days\": [\n      \"2021-08-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a market survey for the new VR project\",\n    \"days\": [\n      \"2021-08-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-08-02\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"brainstorming some new worlds\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"adding a puzzle element to the VR game\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      16,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a figure inspired by Icarus\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-08-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2021-08-09\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"designing new mechanics for a multi-player experience\",\n    \"days\": [\n      \"2021-08-02\"\n    ],\n    \"hours\": (8, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-08-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"perfect a new rose iron design\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"expand the VR world with more interactive elements\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"trying a new technique with Damascus steel\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-08-05\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"cataloging a new collection of Victorian-era scientific instruments\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-08-12\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n    \"\"\"\n\n    tasks = []\n    current_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"monitor website analytics\" in line:\n            task_description = \"monitor website analytics\"\n            hours = (8, 11)\n\n            days = []\n            if \"starting in 9 days\" in line:\n                start_date = current_date + timedelta(days=9)\n                for i in range(3):\n                    days.append(start_date.strftime(\"%Y-%m-%d\"))\n                    start_date += timedelta(days=1)\n            elif \"three days ago\" in line:\n                start_date = current_date - timedelta(days=3)\n                days.append(start_date.strftime(\"%Y-%m-%d\"))\n            elif \"yesterday\" in line:\n                start_date = current_date - timedelta(days=1)\n                days.append(start_date.strftime(\"%Y-%m-%d\"))\n            elif \"today\" in line:\n                days.append(current_date.strftime(\"%Y-%m-%d\"))\n            \n            tasks.append({\n                \"work\": task_description,\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return tasks\n\n\n# Example usage with the provided conversation:\nconversation = [\n    \"INPUT: Just wanted to say hello.\",\n    \"Ethan: Hey Tom, just wanted to say hello. I've got a bit on my plate with work \u2013 I need to monitor website analytics starting in 9 days, for 3 consecutive days, from 8 in the morning for three hours each day.\",\n    \"Tom: Hey Ethan, good to hear from you! That sounds\u2026 involved. Been keeping busy myself, trying to finish up a custom order.\",\n    \"Ethan: It is"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2021-08-21\",\n      \"2021-08-22\",\n      \"2021-08-23\",\n      \"2021-08-24\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2021-08-24\",\n      \"2021-08-25\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  },\n  {\n    \"work\": \"VR design work\",\n    \"days\": [\n      \"2021-08-14\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meetings\",\n    \"days\": [\n      \"2021-08-16\",\n      \"2021-08-17\",\n      \"2021-08-19\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"finish the briefcase\",\n    \"days\": [\n      \"2021-08-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2021-08-17\",\n      \"2021-08-18\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    report_reviews = []\n\n    for line in conversation:\n        if \"review a performance report\" in line:\n            # Extract temporal information\n            if \"tomorrow\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                start_time_str = \"3 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").hour\n                end_time = (start_time + 3) % 24  # 3 hours after 3 p.m.\n                report_reviews.append({\"date\": date_str, \"start\": start_time, \"end\": end_time})\n            elif \"yesterday\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                report_reviews.append({\"date\": date_str, \"start\": 0, \"end\": 24}) #Assume full day\n            elif \"two days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                report_reviews.append({\"date\": date_str, \"start\": 0, \"end\": 24})  #Assume full day\n            elif \"3 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                date_"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2021-08-25\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-08-16\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  },\n  {\n    \"work\": \"squash some bugs\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"starting a new commission\",\n    \"days\": [\n      \"2021-08-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\"2024-01-30\"],\n    \"hours\": [16, 18]\n  },\n  {\n    \"work\": \"developing a VR game\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2021-08-21\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2021-08-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2022-01-06\",\n      \"2022-01-07\",\n      \"2022-01-08\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking system alerts\",\n    \"days\": [\n      \"2024-02-01\",\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-24\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2022-01-09\",\n      \"2022-01-10\",\n      \"2022-01-12\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2022-01-04\",\n      \"2022-01-11\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a workshop agenda\" in line:\n            try:\n                parts = line.split(\"from\")\n                time_part = parts[1].strip()\n                time_details = time_part.split(\"for\")\n                start_time_str = time_details[0].strip()\n                duration_str = time_details[1].strip().split(\"hours\")[0].strip()\n\n                start_hour = int(start_time_str.split(\" \")[0])\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n\n                days_ago_str = line.split(\"ago\")[0].split(\"days\")[0].strip()\n                days_ago = int(days_ago_str)\n                task_date = conversation_date - timedelta(days=days_ago)\n\n                tasks.append({\n                    \"work\": \"prepare a workshop agenda\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass # Handle lines which contain the task but not all the required information\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-01-04\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task and its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"quarterly report\" in line.lower():\n            try:\n                # Extract temporal information\n                time_expression = \"24 days ago\"\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days_ago = int(time_expression.split(\" \")[0])\n                task_date = date_obj - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_str = \"4 p.m.\"\n                start_time_obj = datetime.strptime(start_time_str, \"%I %p\")\n                start_hour = start_time_obj.hour\n\n                end_time_offset = 2\n                end_hour = (start_hour + end_time_offset) % 24\n\n\n                tasks.append({\n                    \"work\": \"produce a quarterly report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError as e:\n                print(f\"Error parsing date or time: {e}\")\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-01-02\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update the company website\",\n    \"days\": [\n      \"2022-01-11\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Rehearsal\",\n    \"days\": [\n      \"2022-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            # Extract temporal information\n            try:\n                date_str = \"22 days ago from\"\n                date_index = line.find(date_str)\n                if date_index != -1:\n                    date_str = line[date_index + len(date_str):].split(\" \")[0]\n                    start_time_str = line.split(\"from \")[1].split(\" until \")[0]\n                    end_time_str = line.split(\"until \")[1].split(\" \")[0]\n                    \n                    start_hour = int(start_time_str.split(\" \")[0].replace(\"a.m.\", \"\").replace(\"p.m.\", \"\"))\n                    if \"p.m.\" in start_time_str and start_hour != 12:\n                        start_hour += 12\n\n                    end_hour = int(end_time_str.split(\" \")[0].replace(\"a.m.\", \"\").replace(\"p.m.\", \"\"))\n                    if \"p.m.\" in end_time_str and end_hour != 12:\n                        end_hour += 12\n\n                    # Calculate the date\n                    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                    task_date = date_obj - timedelta(days=22)\n                    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                    tasks.append({\n                        \"work\": \"Organize a strategy meeting\",\n                        \"days\": [task_date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n            except (ValueError, IndexError) as e:\n"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2022-01-05\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"research for a new exhibit\",\n    \"days\": [\n      \"2022-01-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Reading a technical article for professional development\",\n    \"days\": [\n      \"2022-01-15\",\n      \"2022-01-16\",\n      \"2022-01-17\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2022-01-23\",\n      \"2022-01-24\",\n      \"2022-01-25\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\",\n      \"2024-02-19\",\n      \"2024-02-18\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2022-01-20\",\n      \"2022-01-23\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"maintain a training schedule\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract days\n    days = []\n    \n    # Find all mentions of days later\n    days_later = []\n    for line in conversation:\n        if \"days later\" in line:\n            parts = line.split()\n            for i, part in enumerate(parts):\n                if part.isdigit() and \"days\" in parts[i+1] and \"later\" in parts[i+2]:\n                    days_later.append(int(part))\n\n    # Calculate absolute dates based on conversation date\n    for offset_days in days_later:\n        target_date = date_obj + timedelta(days=offset_days)\n        days.append(target_date.strftime(\"%Y-%m-%d\"))\n    \n    # Extract hours\n    hours = (7, 11)  # 7 AM to 11 AM (7 + 4 hours)\n\n    if work_task and days and hours:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n\n# Example Usage:\nconversation = [\n    \"Hope things are well.\",\n    \"Heidi: So, I have to maintain a training schedule 14 days later, then again 15 days later, and once more 17 days later, all from 7 in the morning for four hours. It's going to be a busy stretch!\",\n    \"Emil: That sounds demanding, Heidi! It must"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2022-01-21\",\n      \"2022-01-26\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2022-01-20\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting a customer feedback report\",\n    \"days\": [\n      \"2022-01-18\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"catch a flight\",\n    \"days\": [\n      \"2022-01-25\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Organize a community event\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"Finish a grant application\",\n    \"days\": [\n      \"2024-03-12\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a meal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-01-30\",\n      \"2023-01-31\",\n      \"2023-02-01\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2023-01-31\",\n      \"2023-02-01\",\n      \"2023-02-02\",\n      \"2023-02-03\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2023-01-27\",\n      \"2023-01-30\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct routine inspections\",\n    \"days\": [\n      \"2023-01-25\",\n      \"2023-01-28\",\n      \"2023-02-03\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-07\",\n      \"2024-02-11\",\n      \"2024-02-13\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2023-02-06\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"making larger pieces\",\n    \"days\": [\n      \"2023-02-13\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"sharpening tools\",\n    \"days\": [\n      \"2023-02-06\",\n      \"2023-02-07\",\n      \"2023-02-08\",\n      \"2023-02-09\",\n      \"2023-02-10\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"work out a new design for the seating\",\n    \"days\": [\n      \"2023-02-10\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"experimenting with new technique with layering glass\",\n    \"days\": [\n      \"2023-02-10\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-01-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"finish the '57 Chevy Bel Air\",\n    \"days\": [\n      \"2023-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"get accepted into a gallery showing in Prague\",\n    \"days\": [\n      \"2023-03-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze customer feedback\",\n    \"days\": [\n      \"2023-01-30\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record a podcast episode\",\n    \"days\": [\n      \"2023-01-28\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-01-26\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-01-30\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2023-02-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-02-02\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"preparing for my visit to the clinic\",\n    \"days\": [\n      \"2023-02-18\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2023-02-14\",\n      \"2023-02-15\",\n      \"2023-02-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2023-02-11\",\n      \"2023-02-12\",\n      \"2023-02-13\",\n      \"2023-02-14\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"tracking daily expenses\",\n    \"days\": [\n      \"2024-02-20\",\n      \"2024-02-23\",\n      \"2024-02-27\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\",\n      \"2024-03-11\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-02-07\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2023-02-18\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-02-10\",\n      \"2023-02-10\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Writing a performance review\",\n    \"days\": [\n      \"2023-02-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"Creating a glass sculpture for a hotel lobby\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-02-12\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-02-18\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2023-02-17\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-03-12\",\n      \"2024-03-28\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2023-02-20\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2023-02-20\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2023-02-20\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-09-06\",\n      \"2023-09-07\",\n      \"2023-09-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2023-09-07\",\n      \"2023-09-08\",\n      \"2023-09-09\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"update the sales log\" in line:\n            # Extract temporal information\n            days_ago = 10\n            duration = 4\n            start_time = 15  # 3 PM in 24-hour format\n            hours = 2\n\n            # Calculate start and end dates\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n\n            # Extract time range\n            time_range = (start_time, start_time + hours)\n\n            tasks.append({\n                \"work\": \"update the sales log\",\n                \"days\": dates,\n                \"hours\": time_range\n            })\n        if \"coding workshops\" in line and \"next month\" in line:\n            # Extract temporal information\n            reference_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            next_month_date = (reference_date.replace(day=1) + timedelta(days=32)).strftime(\"%Y-%m-%d\")\n            \n            tasks.append({\n                \"work\": \"coding workshops\",\n                \"days\": [next_month_date],\n                \"hours\": (9, 17) # Assuming 9AM to 5PM\n            })\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2024-07-19\",\n      \"2024-07-21\",\n      \"2024-07-22\"\n    ],\n    \"hours\": (16, 19)\n  },\n  {\n    \"work\": \"preparing for a new reading program at the library\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"organizing a workshop on digital storytelling\",\n    \"days\": [\n      \"2024-07-22\"\n    ],\n    \"hours\": (0, 24)\n  },\n    {\n    \"work\": \"walk\",\n    \"days\": [\n      \"2024-07-25\"\n    ],\n    \"hours\": (0, 0)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-09-02\",\n      \"2023-09-05\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-08-31\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2023-09-07\"\n    ],\n    \"hours\": [\n      12,\n      15\n  ]\n  },\n  {\n    \"work\": \"app design\",\n    \"days\": [\n      \"2023-09-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n  ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a financial report\",\n    \"days\": [\n      \"2023-09-04\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"building an app to help kids learn basic math skills\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2023-08-29\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"design a product prototype\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-2])\n\n                # Calculate the date of the task\n                task_date = conversation_date - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 11\n                end_hour = 11 + 2\n\n                tasks.append({\n                    \"work\": \"design a product prototype\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where the offset is not a valid integer\n\n    return tasks\n```\n\n```\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-01-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-09-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"volunteering teaching a coding workshop\",\n    \"days\": [\n      \"2023-09-23\",\n      \"2023-09-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2023-09-02\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event (coding workshop for kids)\",\n    \"days\": [\n      \"2023-08-28\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-08-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2023-09-14\",\n      \"2023-09-15\",\n      \"2023-09-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2023-09-17\",\n      \"2023-09-18\",\n      \"2023-09-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"work on lavender sauce\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    work_task = \"review daily feedback\"\n    \n    # Convert conversation date to datetime object\n    conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates and times\n    dates = []\n    hours = None\n\n    for line in conversation:\n        if work_task in line:\n            if \"14 days\" in line:\n                date = conversation_date_obj + timedelta(days=14)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                hours = (16, 19)  # 4 p.m. to 7 p.m.\n            elif \"two weeks\" in line:\n                date = conversation_date_obj + timedelta(weeks=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                hours = (16, 19)\n            elif \"yesterday\" in line:\n                date = conversation_date_obj - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                hours = (16, 19)\n            elif \"two days ago\" in line:\n                date = conversation_date_obj - timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                hours = (16, 19)\n            elif \"three days ago\" in line:\n                date = conversation_date_obj - timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                hours = (16, 19)\n            elif \"next three days\" in line:\n                start_date = conversation_date_obj + timedelta(weeks=2)\n                for i in"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2023-09-18\",\n      \"2023-09-20\",\n      \"2023-09-22\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2023-09-16\",\n      \"2023-09-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2023-09-14\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"app project\",\n    \"days\": [\n      \"2023-09-12\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-09-23\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-09-22\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"next development project\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"incorporate more accessibility features into my educational apps\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Finalize a presentation\",\n    \"days\": [\n      \"2023-09-16\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"preparing for our annual book fair\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"organizing the book displays\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"teaching coding\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-09-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2023-09-17\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"work on a new app idea (coding)\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"finishing up some lesson plans\",\n    \"days\": [\n      \"2023-09-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.  Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"record a tutorial video\" in line:\n            # Extract the time information\n            start_time_str = \"2 p.m.\"\n            start_hour = datetime.strptime(start_time_str, \"%I %p\").hour\n            end_hour = start_hour + 2\n            \n            # Calculate the date\n            five_days_ago = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=5)\n            task_date = five_days_ago.strftime(\"%Y-%m-%d\")\n            \n            tasks.append({\n                \"work\": \"record a tutorial video\",\n                \"days\": [task_date],\n                \"hours\": (start_hour, end_hour)\n            })\n        elif \"debugging a new app feature\" in line:\n            tasks.append({\n                \"work\": \"debugging a new app feature\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)  # Assuming a standard 9-to-5 workday\n            })\n        elif \"reviewing data from our last solar flare observations\" in line:\n             tasks.append({\n                \"work\": \"reviewing data from our last solar flare observations\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)  # Assuming a standard 9-to-5 workday\n            })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-02-11\",\n      \"2021-02-12\",\n      \"2021-02-13\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"daily safety check\"\n    start_hour = 11\n    end_hour = 14\n\n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Find the starting date of the task\n    start_date_offset = -24\n    start_date = date_obj + timedelta(days=start_date_offset)\n    \n    # Extract dates when the task occurred\n    days = []\n    current_date = start_date\n    for i in range(4):\n        days.append(current_date.strftime(\"%Y-%m-%d\"))\n        current_date += timedelta(days=1)\n    \n    # Add other dates mentioned in the conversation\n    yesterday = date_obj - timedelta(days=1)\n    days.append(yesterday.strftime(\"%Y-%m-%d\"))\n    today = date_obj\n    days.append(today.strftime(\"%Y-%m-%d\"))\n    \n    tasks.append({\n        \"work\": task_description,\n        \"days\": days,\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return tasks\n  \n# Example usage (assuming the conversation date is 2024-01-26):\nconversation = [\n    \"Long time no talk!\",\n    \"Carmen: Hi Malik! It's good to hear from you. I've been super busy lately - I started to conduct a daily safety check 24 days ago, for 4 consecutive days, from 11 in the morning for three hours each day.\",\n    \"Malik: Hey Carmen, it\u2019s great to connect with you too! That"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2021-02-13\",\n      \"2021-02-19\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  },\n  {\n    \"work\": \"children's story hour\",\n    \"days\": [\n      \"2021-03-03\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2021-02-14\",\n      \"2021-02-17\",\n      \"2021-02-18\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2021-02-11\",\n      \"2021-02-15\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2021-02-20\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"expense report\",\n    \"days\": [\n      \"2021-02-10\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"preparations for the children's reading program\",\n    \"days\": [\n      \"2021-03-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"workshop for parents on supporting their kids' education\",\n    \"days\": [\n      \"2021-03-03\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"expand online resources\",\n    \"days\": [\n      \"2021-02-27\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"computer literacy classes for adults\",\n    \"days\": [\n      \"2021-02-27\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"special event featuring a local author\",\n    \"days\": [\n      \"2021-02-27\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update a training manual\" in line:\n            task = \"update training manual\"\n            offset_days = -5\n            task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n            task_date = task_date.strftime(\"%Y-%m-%d\")\n\n            start_hour = 15  # 3 p.m.\n            end_hour = start_hour + 3  # 3 hours after 3 p.m.\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date],\n                \"hours\": (start_hour, end_hour)\n            })\n\n        if \"host a poetry reading\" in line:\n            task = \"host a poetry reading\"\n            offset_days = 30  # Next month\n            task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n            task_date = task_date.strftime(\"%Y-%m-%d\")\n            \n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date],\n                \"hours\": (0, 23) # Assuming the whole day is for coordination\n            })\n            \n        if \"hosting a private ceremony\" in line:\n            task = \"host tea ceremony\"\n            offset_days = 7\n            task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n            task_date = task_date.strftime(\"%Y-%m-%d\")\n\n            tasks.append({\n                "
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2021-02-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2021-02-13\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"organizing new arrivals\",\n    \"days\": [\n      \"2021-02-27\"\n    ],\n    \"hours\": (\n      13,\n      17\n    )\n  },\n  {\n    \"work\": \"planning the next author talk\",\n    \"days\": [\n      \"2021-03-01\",\n      \"2021-03-02\",\n      \"2021-03-03\",\n      \"2021-03-04\",\n      \"2021-03-05\",\n      \"2021-03-06\",\n      \"2021-03-07\"\n    ],\n    \"hours\": (\n      10,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-02-17\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-02-23\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\"2024-03-15\"],\n    \"hours\": (11, 15)\n  },\n  {\n    \"work\": \"preparing for a lecture on Pericles\",\n    \"days\": [\"2024-03-22\"],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2021-03-01\",\n      \"2021-03-02\",\n      \"2021-03-03\",\n      \"2021-03-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2021-02-25\",\n      \"2021-02-27\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update work log\",\n    \"days\": [\n      \"2021-02-22\",\n      \"2021-02-24\",\n      \"2021-03-06\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"editing footage\",\n    \"days\": [\n      \"2021-03-04\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"planning a new author talk\",\n    \"days\": [\n      \"2021-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-03-08\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"KPI\" in line and \"review\" in line and \"hours\" in line:\n            task = \"Review daily KPIs\"\n            \n            # Extract temporal information\n            days_ago_1 = int(line.split(\"six days ago\")[0].split()[-1])\n            days_ago_2 = int(line.split(\"three days ago\")[0].split()[-1])\n            \n            date_1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago_1)\n            date_2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago_2)\n            \n            start_hour = 9\n            end_hour = start_hour + 2\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [date_1.strftime(\"%Y-%m-%d\"), date_2.strftime(\"%Y-%m-%d\")],\n                \"hours\": (start_hour, end_hour)\n            })\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"INPUT: Just popping in to say hello.\",\n    \"Carmen: Hi Chen! Just wanted to let you know that I had to review daily KPIs six days ago and then again three days ago, both times from 9 in the morning for two hours.\",\n    \"Chen: Hi Carmen! That sounds like a lot of numbers to look at. How are things going at the library? We just got a new shipment of white peony tea.\",\n    \"Carmen: The library's been quite busy, thankfully! We're preparing for a big children's book drive. I'm hoping to get some new picture books that will really capture their imaginations.\",\n    \""
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-02-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2021-02-23\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2021-02-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-03-05\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2021-02-26\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2021-02-26\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2021-03-07\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-03-05\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"manage a support ticket queue\" in line:\n            task = \"manage support ticket queue\"\n            days_ago = int(line.split(\" \")[-3])\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n            start_hour = 16\n            end_hour = 18\n            hours = (start_hour, end_hour)\n\n            task_details.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": hours\n            })\n            break  # Assuming only one relevant task in this conversation\n\n    return task_details\n\n# Example usage with the provided input:\nconversation = [\n    \"Hey, how have you been?\",\n    \"Logan: So, just letting you know, I started to manage a support ticket queue 22 days ago, for 3 consecutive days, and I've been doing it from 4 in the afternoon until two hours after that each day.\",\n    \"Andrei: Oh, that sounds\u2026involved. I\u2019ve mostly been practicing for an upcoming concert \u2013 trying to get everything just right, you know how it is.\",\n    \"Logan: Totally! It was pretty busy, spending those days managing all those tickets. I was pretty exhausted afterward. Still, happy to get it done.\",\n    \"Andrei: That\u2019s good. I\u2019m performing a rather difficult piece, so exhaustion is also familiar to me! It requires complete focus, of course.\",\n    \"Logan: Yeah, focus is key with"
"```json\n[\n  {\n    \"work\": \"Daily briefing on safety protocols and weather updates\",\n    \"days\": [\n      \"2023-05-21\",\n      \"2023-05-22\",\n      \"2023-05-23\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2023-05-18\",\n      \"2023-05-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-05-17\",\n      \"2023-05-27\",\n      \"2023-05-28\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2023-05-23\",\n      \"2023-05-26\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Updating the company website\",\n    \"days\": [\n      \"2023-05-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-05-19\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2023-05-27\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"concert\",\n    \"days\": [\n      \"2023-06-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-05-16\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-05-15\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"designing a new collection using handwoven fabrics\",\n    \"days\": [],\n    \"hours\": (0, 0)\n  },\n  {\n    \"work\": \"map out a new kayaking route\",\n    \"days\": [\n      \"2023-05-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-05-16\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  },\n  {\n    \"work\": \"planning routes for bird watchers\",\n    \"days\": [\n      \"2023-05-24\",\n      \"2023-05-25\",\n      \"2023-05-26\",\n      \"2023-05-27\",\n      \"2023-05-28\",\n      \"2023-05-29\",\n      \"2023-05-30\",\n      \"2023-05-31\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-05-17\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2023-05-30\",\n      \"2023-05-31\",\n      \"2023-06-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2023-06-01\",\n      \"2023-06-02\",\n      \"2023-06-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2023-06-06\",\n      \"2023-06-07\",\n      \"2023-06-08\",\n      \"2023-06-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine maintenance\",\n    \"days\": [\n      \"2023-05-31\",\n      \"2023-06-08\",\n      \"2023-06-08\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2023-05-29\",\n      \"2023-06-07\",\n      \"2023-06-10\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2023-05-29\",\n      \"2023-06-07\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2023-06-07\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"design a product prototype\" in line:\n            task_details = {}\n            task_details[\"work\"] = \"Design a product prototype\"\n\n            # Extract dates\n            if \"seven days ago\" in line:\n                date = conversation_date - timedelta(days=7)\n                task_details[\"days\"] = [date.strftime(\"%Y-%m-%d\")]\n            elif \"a week ago\" in line:\n                date = conversation_date - timedelta(days=7)\n                task_details[\"days\"] = [date.strftime(\"%Y-%m-%d\")]\n            else:\n                task_details[\"days\"] = []\n\n            # Extract hours\n            if \"7 a.m. until 10 a.m.\" in line:\n                task_details[\"hours\"] = (7, 10)\n            elif \"7 in the morning for three hours\" in line:\n                task_details[\"hours\"] = (7, 10)\n            elif \"7 a.m.\" in line and \"three hours\" in line:\n                task_details[\"hours\"] = (7, 10)\n            else:\n                task_details[\"hours\"] = None\n\n            tasks.append(task_details)\n\n    return tasks\n```\n```\n[\n    {\n        \"work\": \"Design a product prototype\",\n        \"days\": [\n            \"2023-05-31\"\n        ],\n        \"hours\": (\n            7,\n            10\n        )\n    },\n    {\n        \"work\": \"Design a product prototype\",\n        \"days\": [\n            \"2"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2023-06-07\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-06-08\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2023-05-29\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-06-06\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"building a currach\",\n    \"days\": [\n      \"2023-06-08\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"launching a currach\",\n    \"days\": [\n      \"2023-09-01\",\n      \"2023-11-30\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-06-11\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\"2023-05-29\"],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2023-06-08\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"long day\",\n    \"days\": [\n      \"2023-05-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"deliver a training session\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n\n                # Calculate the date of the training session\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start time and duration\n                start_time_str = line.split(\"from \")[1].split(\" for \")[0]\n                start_hour = int(datetime.strptime(start_time_str, \"%I %p\").strftime(\"%H\"))\n                duration_hours = int(line.split(\"for \")[1].split(\" hours\")[0])\n                end_hour = (start_hour + duration_hours) % 24  # Handle cases where the task ends past midnight\n\n                tasks.append({\n                    \"work\": \"Deliver training session\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing task details: {e}\")\n\n    return tasks\n\n\nconversation = [\n    \"Hope all is well.\",\n    \"Logan: Hey Atsuko, just letting you know my schedule is filling up. I have to deliver a training session 15 days later from 11 in the morning for two hours.\",\n    \"Atsuko: Oh, that sounds\u2026intense! I was just sketching out some panels for the new chapter. It's a complicated scene, lots of emotions to convey.\","
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2023-04-17\",\n      \"2023-04-18\",\n      \"2023-04-19\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2023-04-13\",\n      \"2023-04-14\",\n      \"2023-04-15\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2023-04-15\",\n      \"2023-04-16\"\n    ],\n    \"hours\": (9, 12)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"daily huddle\" in line.lower():\n            task = \"daily huddle\"\n            # Extract dates\n            days_ago = [int(s) for s in line.split() if s.isdigit()]\n            dates = []\n            for days in days_ago:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n            # Extract hours\n            start_hour = 13  # 1 p.m.\n            end_hour = start_hour + 1\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"machine learning stuff\" in line.lower() or \"coding languages\" in line.lower():\n            task = \"machine learning project\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)\n            })\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"How are things treating you?\",\n    \"Liam: Hey Joel, things have been hectic! I've had to attend a daily huddle 19 days ago, 14 days ago, and 13 days ago, all from 1 p.m. until 2 hours after that.\",\n    \"Joel: That sounds intense, Liam. I\u2019ve been wrestling with some tricky footage"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-04-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2023-04-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2023-04-09\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-04-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2023-04-22\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2023-04-13\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-04-09\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-04-25\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-04-11\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"perform at a small festival\",\n    \"days\": [\n      \"2023-05-06\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2023-04-24\",\n      \"2023-04-25\",\n      \"2023-04-26\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2023-04-19\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2023-04-15\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2023-05-04\",\n      \"2023-05-05\",\n      \"2023-05-06\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-04-24\",\n      \"2023-04-25\",\n      \"2023-04-26\",\n      \"2023-04-27\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2023-04-23\",\n      \"2023-04-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-06\",\n      \"2024-02-11\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2023-05-01\",\n      \"2023-05-02\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"sketching out ideas related to sustainable energy\",\n    \"days\": [\n      \"2023-04-24\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-04-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Finalizing a business plan\",\n    \"days\": [\n      \"2023-05-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"Level design for VR project\",\n    \"days\": [\n      \"2023-04-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-05-03\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2023-04-29\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2023-04-26\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview\",\n    \"days\": [\n      \"2023-04-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"Explore a new Python library\",\n    \"days\": [\n      \"2023-05-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-04-24\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-04-27\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-04-28\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2022-09-16\",\n      \"2022-09-17\",\n      \"2022-09-18\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2022-09-15\",\n      \"2022-09-16\",\n      \"2022-09-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details. Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"record daily observations\"\n    \n    # Calculate the start date based on \"eighteen days ago\"\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=18)\n    \n    # Create a list of dates for the four consecutive days\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(4)]\n    \n    # Extract the time range (7 a.m. for three hours)\n    hours = (7, 10)  # 7 a.m. to 10 a.m.\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-09-12\",\n      \"2022-09-18\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-28\",\n      \"2024-03-05\",\n      \"2024-02-22\",\n      \"2024-02-24\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details and their temporal expressions from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"work on daily planning\"\n    \n    # Convert conversation date to datetime object\n    conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    days = []\n    \n    #Eleven days ago\n    date_1 = conversation_date_obj - timedelta(days=11)\n    days.append(date_1.strftime(\"%Y-%m-%d\"))\n    \n    #Three days ago\n    date_2 = conversation_date_obj - timedelta(days=3)\n    days.append(date_2.strftime(\"%Y-%m-%d\"))\n\n    # Extract hours\n    hours = (15, 19)  # 3 p.m. to 7 p.m. (3 + 4)\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2022-09-19\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-09-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\n      \"2022-09-09\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-09-21\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2022-09-10\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  },\n  {\n    \"work\": \"live stream of practice session\",\n    \"days\": [\n      \"2022-09-19\",\n      \"2022-09-20\",\n      \"2022-09-21\",\n      \"2022-09-22\",\n      \"2022-09-23\",\n      \"2022-09-24\",\n      \"2022-09-25\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"playing a small gig\",\n    \"days\": [\n      \"2022-09-15\"\n    ],\n    \"hours\": [\n      18,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-01-10\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"practicing for a tournament\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-09-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking routine communications\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-07-03\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each describing a task with its details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"conduct a daily review session\" in line:\n            task = \"Conduct daily review session\"\n            \n            if \"thirteen days\" in line:\n                offset_days = 13\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                for i in range(1, 3):\n                    date = datetime.strptime(days[0], \"%Y-%m-%d\") + timedelta(days=i)\n                    days.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"three days ago\" in line:\n                offset_days = -3\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"yesterday\" in line:\n                offset_days = -1\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"today\" in line:\n                days = [conversation_date]\n            else:\n                days = []\n                \n            hours_start = 16  # 4 p.m.\n            hours_end = 19  # 4 p.m. + 3 hours\n\n            tasks.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": (hours_start, hours_end)\n            })\n    return tasks\n\n# Example usage with the provided conversation\nconversation = [\n    \""
"```json\n[\n  {\n    \"work\": \"midday walk as part of training regimen\",\n    \"days\": [\n      \"2022-09-29\",\n      \"2022-09-30\",\n      \"2022-10-01\",\n      \"2022-10-02\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2022-09-28\",\n      \"2022-10-03\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    work_tasks = []\n    task_description = \"update the sales log\"\n    hours = (7, 11)  # 7 AM to 11 AM (4 hours)\n\n    # Calculate dates based on offsets\n    dates = []\n    offsets = [5, 6, 10]\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for offset in offsets:\n        date = conversation_datetime + timedelta(days=offset)\n        dates.append(date.strftime(\"%Y-%m-%d\"))\n\n    # Extract the task details\n    task_details = {\n        \"work\": task_description,\n        \"days\": dates,\n        \"hours\": hours\n    }\n\n    work_tasks.append(task_details)\n\n    return work_tasks\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2022-09-23\",\n      \"2022-09-27\",\n      \"2022-09-27\"\n    ],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"finish a new briefcase\",\n    \"days\": [\n      \"2022-10-01\",\n      \"2022-10-02\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-03-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2022-09-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"practicing and scrims for the next tournament\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"new program to support young mothers (workshops and childcare resources)\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-07-04\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing details about a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"draft a customer feedback report\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n                # Calculate the absolute date\n                date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date = date_object.strftime(\"%Y-%m-%d\")\n\n                # Extract the start hour and duration\n                start_hour = int(line.split(\" \")[-6])\n                duration_hours = int(line.split(\" \")[-2])\n                end_hour = start_hour + duration_hours\n                \n                tasks.append({\n                    \"work\": \"draft a customer feedback report\",\n                    \"days\": [task_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where extraction fails\n\n        if \"championship qualifiers are coming up soon\" in line:\n            tasks.append({\n                    \"work\": \"practicing for championship qualifiers\",\n                    \"days\": [conversation_date],\n                    \"hours\": (9, 17)\n                })\n    return tasks\n\n# Example usage\nconversation = [\n    \"Anything good going on?\",\n    \"Jayden: Hey Bianca, things have been pretty hectic! I had to draft a customer feedback report 7 days later, starting from 7 in the morning for four hours. It took up a lot of focus.\",\n    \"Bianca: Oh, that sounds... thorough. I just finished a very interesting wine tasting with a producer from Tuscany.\",\n    \"Jayden: That sounds amazing! I"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-21\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\",\n      \"2024-02-27\",\n      \"2024-02-19\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2022-10-04\",\n      \"2022-10-04\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2022-09-24\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2022-09-22\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2020-07-14\",\n      \"2020-07-15\",\n      \"2020-07-16\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2020-07-14\",\n      \"2020-07-15\",\n      \"2020-07-16\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2020-07-11\",\n      \"2020-07-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2020-07-03\",\n      \"2020-07-16\",\n      \"2020-07-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-02\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"sketching out designs\" in line or \"sustainable collection\" in line:\n            task = \"Designing sustainable collection\"\n            if \"tomorrow\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": task,\n                    \"days\": [date_str],\n                    \"hours\": (9, 17)  # Assuming a typical workday\n                })\n        elif \"debugging\" in line or \"app\" in line or \"project\" in line:\n            task = \"Developing a coding app for kids\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date], #assuming the task is happening today\n                \"hours\": (9,17) #assuming a typical workday\n            })\n        elif \"watering the office plants\" in line:\n            task = \"Watering office plants\"\n            #Handling the 11 and 8 days ago statements\n            date1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=11)\n            date1_str = date1.strftime(\"%Y-%m-%d\")\n            date2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=8)\n            date2_str = date2.strftime(\"%Y-%m-%d\")\n            \n            tasks.append({\n                \"work\": task,\n                \"days\": [date1_str, date2_str],\n                \"hours\": ("
"```json\n[\n  {\n    \"work\": \"Conduct a product demo\",\n    \"days\": [\n      \"2020-07-08\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-07-07\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its temporal details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"workshop agenda\" in line:\n            try:\n                # Extract the number of days ago\n                days_ago = int(line.split(\" \")[-3])\n\n                # Calculate the absolute date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_time = 12  # 12 p.m.\n                end_time = start_time + 2  # 2 hours after\n\n                tasks.append({\n                    \"work\": \"prepare a workshop agenda\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_time, end_time)\n                })\n            except ValueError:\n                pass  # Ignore lines that don't have the expected format\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"gallery submission\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2020-07-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"designing a new collection\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"sketch out some new designs\",\n    \"days\": [\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"holding a small exhibition\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"make a trip to the market\",\n    \"days\": [\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"grab coffee\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"expense report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"pop-up shop organization\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-07-17\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2020-07-20\",\n      \"2020-07-21\",\n      \"2020-07-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-07-28\",\n      \"2020-07-29\",\n      \"2020-07-30\",\n      \"2020-07-31\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2020-07-18\",\n      \"2020-07-20\",\n      \"2020-07-30\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a daily safety check\",\n    \"days\": [\n      \"2020-07-23\",\n      \"2020-07-28\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-07-21\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_and_time(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.  Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a meal\" in line:\n            try:\n                parts = line.split(\"from\")\n                time_part = parts[1].strip()\n                \n                days_later_str = line.split(\"days later\")[0].split(\"had to\")[-1].strip()\n                days_later = int(days_later_str)\n                task_date = conversation_date + timedelta(days=days_later)\n\n                time_range = time_part.split(\"for\")\n                start_time_str = time_range[0].strip()\n                duration_str = time_range[1].strip()\n                \n                start_hour = int(start_time_str.split(\" in the \")[1].split(\":\")[0])\n                \n                duration_hours = int(duration_str.split(\" \")[0])\n                end_hour = start_hour + duration_hours\n                \n                tasks.append({\n                    \"work\": \"Prepare a meal\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n```\n\n```\n[\n    {\n        'work': 'Prepare a meal',\n        'days': ['2024-01-17'],\n        'hours': (10, 13)\n    },\n    {\n        'work"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2020-07-29\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"team outing\",\n    \"days\": [\n      \"2020-07-19\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"new composition\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"small concert\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"designing a collection with indigo block prints\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"planning a capsule collection\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-07-24\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"designing the new collection\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"fabric swatches for the next season\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2020-07-19\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  },\n  {\n    \"work\": \"designing the autumn collection\",\n    \"days\": [\n      \"2020-07-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-07-18\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"midday walk\",\n    \"days\": [\n      \"2024-01-27\",\n      \"2024-01-28\",\n      \"2024-01-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"ironwork\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"future projects\",\n    \"days\": [\n      \"2024-01-27\",\n      \"2024-01-28\",\n      \"2024-01-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-01\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2024-01-25\",\n      \"2024-01-30\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"a large panel for a local cultural center\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-01-28\",\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-01-27\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"new commission - a set of fireplace tools\",\n    \"days\": [\n      \"2024-01-30\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-01-24\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"rehearsals for a new play\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-01-27\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a gate for a new manor house\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"rewrites on my new play\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-02-11\",\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project progress\",\n    \"days\": [\n      \"2024-03-12\",\n      \"2024-03-27\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2024-02-10\",\n      \"2024-02-14\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"designing a gate\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-09\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"producing a quarterly report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design gate for local estate\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"starting on a new gate design\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"sketch forge designs\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-04-05\",\n      \"2024-04-06\",\n      \"2024-04-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-13\",\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-04-05\",\n      \"2024-04-06\",\n      \"2024-04-07\",\n      \"2024-04-08\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-15\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"managing a support ticket queue\",\n    \"days\": [\n      \"2024-04-09\",\n      \"2024-04-11\",\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-04-08\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"practicing for a gig\",\n    \"days\": [\n      \"2024-04-27\",\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2024-04-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"practice hours\",\n    \"days\": [\n      \"2024-04-15\",\n      \"2024-04-16\",\n      \"2024-04-17\",\n      \"2024-04-18\",\n      \"2024-04-19\",\n      \"2024-04-20\",\n      \"2024-04-21\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"collect more samples\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-04-05\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"write something for the club anniversary\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a budget proposal\",\n    \"days\": [\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"performing at The Blue Note\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-04-04\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"songwriting\",\n    \"days\": [\n      \"2024-04-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-04-11\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-04-07\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"working on a new interpretation of \\\"Summertime\\\"\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-04-17\",\n      \"2024-04-18\",\n      \"2024-04-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-25\",\n      \"2024-04-26\",\n      \"2024-04-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-19\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-04-18\",\n      \"2024-04-19\",\n      \"2024-04-20\",\n      \"2024-04-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"set at The Blue Note\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-04-19\",\n      \"2024-04-28\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-04-17\",\n      \"2024-04-22\",\n      \"2024-04-29\",\n      \"2024-04-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    task = []\n    for line in conversation:\n        if \"schedule routine maintenance\" in line:\n            days_later_indices = [i for i, x in enumerate(line.split()) if x == \"days\"]\n            if len(days_later_indices) > 0:\n                days_later_index = days_later_indices[0]\n                try:\n                    days_offset_1 = int(line.split()[days_later_index - 1])\n                    days_offset_2 = int(line.split()[days_later_index + 1])\n                except ValueError:\n                    continue  # Skip if days offset is not an integer\n\n                date_1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_offset_1)\n                date_2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_offset_2)\n                date_1_str = date_1.strftime(\"%Y-%m-%d\")\n                date_2_str = date_2.strftime(\"%Y-%m-%d\")\n\n                start_hour = 8\n                end_hour = 11\n\n                task.append({\n                    \"work\": \"schedule routine maintenance\",\n                    \"days\": [date_1_str, date_2_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n\n    return task\n\nconversation = [\n    \"Just popping in to say hi.\",\n    \"Stella: Hi Victoria! Just wanted to let you know I have to schedule routine maintenance four days later and then again sixteen days later, both times from 8 in the morning for three hours.\",\n    \"Victoria: Oh, hello Stella! That\u2019s lovely to hear from you."
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-04-20\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-04-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2024-04-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"finalizing the menu\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"training\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": [\n      10,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2021-06-01\",\n      \"2021-06-02\",\n      \"2021-06-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-04\",\n      \"2021-06-05\",\n      \"2021-06-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-05\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-06\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine testing\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-01-27\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work-related task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    task_description = \"check routine communications\"\n    \n    # Find all mentions of the task and extract temporal details\n    for line in conversation:\n        if task_description in line.lower():\n            if \"five days ago\" in line.lower():\n                date = conversation_date - timedelta(days=5)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (12, 16)  # 12 noon to 4 hours after\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})\n            elif \"yesterday\" in line.lower():\n                date = conversation_date - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (12, 16)  # 12 noon to 4 hours after\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})\n    \n    return tasks\n\n# Example usage with the provided input\nconversation = [\n    \"Long time no talk!\",\n    \"Dominic: Hi Heidi! It\u2019s good to chat with you. I\u2019ve been quite busy with work lately \u2013 I had to check routine communications five days ago, and then again yesterday, both times from 12 noon until four hours after that.\",\n    \"Heidi: Dominic, that's fantastic to hear from you! Things have been pretty hectic with training, but always good to catch up.\",\n    \"Dominic: It's good to hear you're training hard"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2021-05-25\",\n      \"2021-05-27\",\n      \"2021-06-02\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"designing the next boat\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"working on a new collection\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2021-05-27\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a contract\",\n    \"days\": [\n      \"2021-06-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"sketching designs for a new community project\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      12,\n      17\n    )\n  },\n  {\n    \"work\": \"starting on a small currach\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task and contains\n              'work', 'days', and 'hours' keys.  Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"prepare a proposal document\" in line:\n            task_description = \"Prepare proposal document for a currach commission\"\n            try:\n                offset_days = int(line.split(\" \")[-2])\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                start_hour = 7\n                end_hour = 7 + 3\n                tasks.append({\n                    \"work\": task_description,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where the offset isn't a number\n\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-05-30\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"restoring an old boat\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2021-06-05\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2021-06-06\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2021-06-03\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"finalizing the next chapter of manga\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2021-06-05\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2021-05-26\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"building a small currach for a local fisherman\",\n    \"days\": [\n      \"2021-06-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"finish manga chapter\",\n    \"days\": [\n      \"2021-06-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2021-06-18\",\n      \"2021-06-19\",\n      \"2021-06-20\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Take a midday walk\",\n    \"days\": [\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2021-06-18\",\n      \"2021-06-19\",\n      \"2021-06-20\",\n      \"2021-06-21\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2021-06-15\",\n      \"2021-06-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating the project dashboard\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-30\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"bending some oak planks for shaping the frame\",\n    \"days\": [\n      \"2024-02-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2021-06-14\",\n      \"2021-06-21\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\"2024-02-23\"],\n    \"hours\": [15, 18]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"repair a rowing skiff\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-06-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"commission\" in line and \"currach\" in line:\n            task = \"building a currach\"\n            \n            # No specific dates or times given, so we assume the task starts now (conversation date)\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\").date()\n            # No deadline mentioned, so task is ongoing\n            \n            hours = (9, 17)  # Assuming a standard workday\n            \n            task_details.append({\n                \"work\": task,\n                \"days\": [start_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": hours\n            })\n        if \"five days ago\" in line:\n            task = \"writing a technical blog post\"\n            # Calculate the date five days ago\n            five_days_ago = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=5)\n            five_days_ago_str = five_days_ago.strftime(\"%Y-%m-%d\")\n            \n            # Extract the time range\n            start_hour = 13  # 1 p.m.\n            end_hour = start_hour + 2  # 2 hours after 1 p.m.\n\n            task_details.append({\n                \"work\": task,\n                \"days\": [five_days_ago_str],\n                \"hours\": (start_hour, end_hour)\n            })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2021-06-20\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking system alerts\",\n    \"days\": [\n      \"2023-07-25\",\n      \"2023-07-26\",\n      \"2023-07-27\"\n    ],\n    \"hours\": (16, 18)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"safety check\" in line.lower():\n            try:\n                start_date_offset = int(line.lower().split(\"started \")[1].split(\" days\")[0])\n                consecutive_days = int(line.lower().split(\"for \")[1].split(\" consecutive\")[0])\n\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=start_date_offset)\n\n                days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n\n                start_hour = 8\n                end_hour = 8 + 3\n\n                task_details.append({\n                    \"work\": \"Daily safety check\",\n                    \"days\": days,\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return task_details\n\n# Example usage with the provided conversation\nconversation = [\n    \"Makayla: What\u2019s been keeping you busy lately?\",\n    \"Malik: Not too much, just enjoying the evening after wrapping up a project. How about you? Anything new in the gymnastics world?\",\n    \"Makayla: Well, it's been a pretty consistent schedule actually. I've been conducting a daily safety check, started 21 days ago, for 3 consecutive days, and it\u2019s been happening from 8 in the morning for three hours each time. It\u2019s a really important part of keeping the gym safe for everyone.\",\n    \"Malik: That sounds"
"```json\n[\n  {\n    \"work\": \"take a midday walk\",\n    \"days\": [\n      \"2023-08-03\",\n      \"2023-08-04\",\n      \"2023-08-05\",\n      \"2023-08-06\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"update the project dashboard\" in line:\n            days_ago = None\n            if \"8 days ago\" in line:\n                days_ago = 8\n            elif \"6 days ago\" in line:\n                 days_ago = 6\n            if days_ago is not None:\n                task_date = date_obj - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": \"update the project dashboard\",\n                    \"days\": [task_date_str],\n                    \"hours\": (7, 11)  # 7 a.m. for four hours\n                })\n        if \"meeting a composer\" in line:\n            tasks.append({\n                \"work\": \"meeting a composer\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 0)\n            })\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"recording daily observations\",\n    \"days\": [\n      \"2023-07-24\",\n      \"2023-08-01\",\n      \"2023-08-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-08-04\",\n      \"2023-08-06\",\n      \"2023-08-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"composing a new piece\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"training\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"practicing the oud\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-07-30\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-07-31\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-08-02\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-07-29\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"perfect new dishes at the restaurant\",\n    \"days\": [\n      \"2023-08-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"training schedule\",\n    \"days\": [\n      \"2023-08-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-07-18\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2023-08-05\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"gymnastics training\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"pitching an idea for a new community art project\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\"2023-07-24\"],\n    \"hours\": (10, 13)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2023-08-02\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with keys 'work', 'days', and 'hours'.\n              Returns an empty list if no task or offset_days is found.\n    \"\"\"\n\n    work_tasks = []\n    watering_task = []\n    \n    for line in conversation:\n        if \"water the office plants\" in line:\n            watering_task.append(line)\n            \n    if not watering_task:\n        return []\n    \n    \n    days = []\n    hours = (15, 17) \n    \n    \n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    \n    \n    \n    if \"yesterday\" in conversation[1]:\n        date_yesterday = conversation_datetime - timedelta(days=1)\n        days.append(date_yesterday.strftime(\"%Y-%m-%d\"))\n        \n    if \"two days ago\" in conversation[6]:\n        date_two_days_ago = conversation_datetime - timedelta(days=2)\n        days.append(date_two_days_ago.strftime(\"%Y-%m-%d\"))\n        \n    if \"today\" in conversation[9]:\n        date_today = conversation_datetime\n        days.append(date_today.strftime(\"%Y-%m-%d\"))\n\n    if \"tomorrow\" in conversation[12]:\n        date_tomorrow = conversation_datetime + timedelta(days=1)\n        days.append(date_tomorrow.strftime(\"%Y-%m-%d\"))\n    \n    work_tasks.append({\n        \"work\": \"Water the office plants\",\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return work_tasks\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2023-08-17\",\n      \"2023-08-18\",\n      \"2023-08-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"update a status report\" in line.lower():\n            try:\n                # Extract temporal information\n                start_in_days = int(line.lower().split(\"starting in \")[1].split(\" days\")[0])\n                duration_days = int(line.lower().split(\"for \")[1].split(\" consecutive days\")[0])\n                start_time_str = line.lower().split(\"from \")[1].split(\" p.m.\")[0].split(\" \")[0]\n                start_hour = int(start_time_str.split(\":\")[0])\n                end_hour = start_hour + 2\n\n                # Convert relative dates to absolute dates\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=start_in_days)\n                days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n                task_details = {\n                    \"work\": \"update a status report\",\n                    \"days\": days,\n                    \"hours\": (start_hour, end_hour),\n                }\n                tasks.append(task_details)\n            except (ValueError, IndexError) as e:\n                print(f\"Error extracting task details: {e}\")\n                continue  # Skip to the next line if there's an error\n\n    return tasks\n\n\nconversation = [\n    \"INPUT: What's new in your world?\",\n    \"Makayla: Hey Evan! So much has been going on. I have to update a status report Starting in 5 days, for "
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-07-17\",\n      \"2024-07-18\",\n      \"2024-07-19\",\n      \"2024-07-20\",\n      \"2024-07-31\",\n      \"2024-08-01\",\n      \"2024-08-02\",\n      \"2024-08-03\"\n    ],\n    \"hours\": [\n      8,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2023-08-07\",\n      \"2023-08-11\",\n      \"2023-08-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2023-08-13\",\n      \"2023-08-20\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-08-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"start a new floor routine\",\n    \"days\": [\n      \"2023-08-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str, optional): The date of the conversation.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its\n              temporal details.  Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    for line in conversation:\n        if \"draft a press release\" in line:\n            try:\n                days_offset = int(line.split(\" \")[-3])\n\n                task_date = conversation_date + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_hour = 8\n                end_hour = start_hour + 4\n\n                tasks.append({\n                    \"work\": \"draft a press release\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass #ignore lines that mention the task but do not contain valid temporal information\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-08-07\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-08-09\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"monitor social media trends\"\n    start_hour = 17\n    end_hour = 19\n    hours = (start_hour, end_hour)\n\n    dates = []\n    # Yesterday\n    yesterday = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n    dates.append(yesterday.strftime(\"%Y-%m-%d\"))\n    \n    # Today\n    today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    dates.append(today.strftime(\"%Y-%m-%d\"))\n    \n    # Starting in two days for 3 consecutive days\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n    for i in range(3):\n        dates.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": dates,\n        \"hours\": hours\n    })\n\n    return task_details\n```\n\n```\n[\n    {\n        \"work\": \"monitor social media trends\",\n        \"days\": [\n            \"2024-02-28\",\n            \"2024-02-29\",\n            \"2024-03-01\",\n            \"2024-03-02\",\n            \"2024-03-03\",\n            \"2024-03-04\"\n        ],"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2020-10-29\",\n      \"2020-10-30\",\n      \"2020-10-31\",\n      \"2020-11-01\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Review daily KPIs\",\n    \"days\": [\n      \"2020-10-23\",\n      \"2020-10-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"Developing a new play\",\n    \"days\": [\n      \"2020-11-02\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-10-30\",\n      \"2020-10-31\",\n      \"2020-11-02\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"secure funding for community centre\",\n    \"days\": [\n      \"2020-11-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-12\"\n    ],\n    \"hours\": (9, 13)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-11-01\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"getting ready for a small exhibition\",\n    \"days\": [\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"suggesting a new performance venue\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-01-11\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-10-25\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2020-11-02\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2020-11-01\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"restoration project\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"writing\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"sketch out ideas for a new play\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting to discuss a new play\",\n    \"days\": [\n      \"2020-11-16\",\n      \"2020-11-17\",\n      \"2020-11-18\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2020-11-07\",\n      \"2020-11-08\",\n      \"2020-11-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"brainstorm ideas for a new play\",\n    \"days\": [\n      \"2020-11-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2020-11-11\",\n      \"2020-11-12\",\n      \"2020-11-13\",\n      \"2020-11-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-02-28\",\n      \"2024-03-06\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-28\",\n      \"2024-03-08\",\n      \"2024-03-21\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"rehearsals for a new play\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\n[\n    {\n        \"work\": \"prepare a daily briefing\",\n        \"days\": [\"2020-11-09\", \"2020-11-15\"],\n        \"hours\": (11, 15)\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-11-11\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\"2020-11-19\"],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\"2020-11-16\"],\n    \"hours\": (15, 17)\n  },\n  {\n    \"work\": \"theatre work (rehearsals, script readings, lighting)\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"workshopping a new play\",\n    \"days\": [\"2020-11-23\", \"2020-11-24\", \"2020-11-25\", \"2020-11-26\", \"2020-11-27\", \"2020-11-28\", \"2020-11-29\"],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2020-11-10\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"bringing together the work for a museum exhibit\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"managing a client presentation\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"editing a new play\",\n    \"days\": [\n      \"2020-11-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-11-10\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"brainstorm new ideas for a play\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"catch a new production\",\n    \"days\": [\n      \"2020-11-15\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing for a small concert\",\n    \"days\": [\n      \"2024-07-01\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"reviewing a research paper\",\n    \"days\": [\n      \"2024-06-19\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-06-22\",\n      \"2024-06-23\",\n      \"2024-06-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-06-14\",\n      \"2024-06-15\",\n      \"2024-06-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring social media trends\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-06-16\",\n      \"2024-06-17\",\n      \"2024-06-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project progress\",\n    \"days\": [\n      \"2024-06-17\",\n      \"2024-06-22\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-06-18\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-06-24\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"creating a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"working on a custom briefcase\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating an inventory list\",\n    \"days\": [\n      \"2024-06-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"new wallet design\",\n    \"days\": [\n      \"2024-07-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"visiting a new supplier\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-06-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"starting a new community project\",\n    \"days\": [\n      \"2024-06-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"new briefcase commission\",\n    \"days\": [\n      \"2024-06-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Submit a project proposal\",\n    \"days\": [\n      \"2024-06-14\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"Working on a briefcase\",\n    \"days\": [\n      \"2024-06-17\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-06-20\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-06-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-03-11\",\n      \"2024-03-12\",\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-07-01\",\n      \"2024-07-02\",\n      \"2024-07-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-07-01\",\n      \"2024-07-02\",\n      \"2024-07-03\",\n      \"2024-07-04\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-07-03\",\n      \"2024-07-04\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-06-28\",\n      \"2024-07-04\"\n    ],\n    \"hours\": (12, 16)\n  },\n  {\n    \"work\": \"making a custom briefcase\",\n    \"days\": [\n      \"2024-06-28\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-06-27\",\n      \"2024-07-07\",\n      \"2024-07-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"making a custom briefcase\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"routine testing\",\n    \"days\": [\n      \"2024-01-13\",\n      \"2024-01-15\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"cataloging new arrivals\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-07-01\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  },\n  {\n    \"work\": \"tooling a floral design on a wallet\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-07-04\"\n    ],\n    \"hours\": [\n      9,\n      12\n    ]\n  },\n  {\n    \"work\": \"work on a briefcase\",\n    \"days\": [\n      \"2024-07-09\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-07-09\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-07-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"working on a special briefcase\",\n    \"days\": [\n      \"2024-06-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-07-07\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"prep work for the next batch of orders\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-07-10\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2022-12-24\",\n      \"2022-12-25\",\n      \"2022-12-26\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2022-12-19\",\n      \"2022-12-20\",\n      \"2022-12-21\",\n      \"2022-12-22\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2022-12-17\",\n      \"2022-12-22\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine maintenance\",\n    \"days\": [\n      \"2022-12-17\",\n      \"2022-12-27\",\n      \"2022-12-29\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2022-12-18\",\n      \"2022-12-23\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-12-17\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-12-23\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  },\n  {\n    \"work\": \"work on reports\",\n    \"days\": [\n      \"2023-01-12\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2022-12-19\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2022-12-20\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-12-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-12-19\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2022-12-21\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"start a new briefcase project\",\n    \"days\": [\n      \"2023-01-03\",\n      \"2023-01-04\",\n      \"2023-01-05\",\n      \"2023-01-06\",\n      \"2023-01-07\",\n      \"2023-01-08\",\n      \"2023-01-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2022-12-18\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"debugging a new feature for my app\",\n    \"days\": [\n      \"2022-12-31\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-07-19\",\n      \"2024-07-20\",\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2023-01-04\",\n      \"2023-01-05\",\n      \"2023-01-06\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2023-01-09\",\n      \"2023-01-10\",\n      \"2023-01-11\",\n      \"2023-01-12\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-28\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-01-07\",\n      \"2023-01-10\",\n      \"2023-01-13\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2022-12-31\",\n      \"2023-01-04\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-01-08\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-01-09\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2023-01-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-01-11\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2023-01-04\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-12-31\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-01-01\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2022-12-31\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-01-15\",\n      \"2024-01-16\",\n      \"2024-01-17\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2023-06-27\",\n      \"2023-06-28\",\n      \"2023-06-29\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update a status report\"\n    \n    # Find mentions of the task and extract temporal information\n    for line in conversation:\n        if work_task in line:\n            if \"seven days ago\" in line and \"four consecutive days\" in line and \"11 in the morning until 4 in the afternoon\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=7)\n                days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(4)]\n                hours = (11, 16)  # 11 AM to 4 PM in 24-hour format\n                \n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n\n    return task_details\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Good to hear from you!\",\n    \"Louis: Hey Camila, just wanted to share what I\u2019ve been up to. I started to update a status report seven days ago, for four consecutive days, working from 11 in the morning until 4 in the afternoon.\",\n    \"Camila: Oh, that sounds\u2026thorough, Louis! I\u2019ve been trying out some new layering techniques with my aerosols. It's messy, but exhilarating!\",\n    \"Louis: Messy is good! It means you're pushing boundaries. I often find that the most flavorful dishes come from a bit of happy chaos in the kitchen. I really had my"
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2023-07-02\",\n      \"2023-07-05\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"working on a new dessert\",\n    \"days\": [\n      \"2023-07-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing daily feedback\",\n    \"days\": [\n      \"2023-06-22\",\n      \"2023-06-27\",\n      \"2023-07-01\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Developing new dishes / taking a midday walk for inspiration\",\n    \"days\": [\n      \"2023-06-26\",\n      \"2023-07-01\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2023-07-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2023-06-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"experimenting with new fermentation techniques\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-06-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2023-07-04\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a project timeline\",\n    \"days\": [\n      \"2023-06-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-06-28\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-01-18\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-01-23\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"scheduling routine maintenance\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-04\",\n      \"2024-03-05\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"Prepare for a special wine tasting event\",\n    \"days\": [\n      \"2024-03-04\"\n    ],\n    \"hours\": (0, 23)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2023-07-14\",\n      \"2023-07-15\",\n      \"2023-07-16\",\n      \"2023-07-17\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2023-07-07\",\n      \"2023-07-11\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2023-07-10\",\n      \"2023-07-12\",\n      \"2023-07-17\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-07-11\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2023-07-12\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a workshop agenda eleven days later\" in line:\n            task_description = \"prepare a workshop agenda\"\n            offset_days = 11\n            task_date = conversation_date + timedelta(days=offset_days)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            start_time_str = \"11 in the morning\"\n            start_hour = datetime.strptime(start_time_str, \"%I in the %p\").hour\n            duration_hours = 2\n            end_hour = start_hour + duration_hours\n\n            tasks.append({\n                \"work\": task_description,\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2023-07-13\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-07-18\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-07-07\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2023-07-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-07-09\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2023-07-17\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-08-26\",\n      \"2024-08-27\",\n      \"2024-08-28\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-08-22\",\n      \"2024-08-23\",\n      \"2024-08-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"finish the boat\u2019s frame\",\n    \"days\": [\n      \"2024-08-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct routine inspections\",\n    \"days\": [\n      \"2024-08-24\",\n      \"2024-08-30\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Practice a new solo for the show\",\n    \"days\": [\n      \"2024-09-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"Workshop for young musicians\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finish the briefcase\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-08-21\",\n      \"2024-08-26\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"band practice\",\n    \"days\": [\n      \"2024-08-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"playing at The Spotted Cat\",\n    \"days\": [\n      \"2024-09-02\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-09-02\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"gig at The Spotted Cat\",\n    \"days\": [\n      \"2024-09-21\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"working on a new solo piece\",\n    \"days\": [\n      \"2024-09-13\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-08-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-08-27\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-08-23\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  },\n  {\n    \"work\": \"work on a new composition\",\n    \"days\": [\n      \"2024-08-23\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-08-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-08-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"analyzing samples\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a piece inspired by the Mississippi River\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"record a tutorial video\" in line and \"5 days later from 7 in the morning for three hours\" in line:\n            task_description = \"record a tutorial video\"\n            offset_days = 5\n            start_time_str = \"7 in the morning\"\n            duration_hours = 3\n\n            task_date = conversation_date + timedelta(days=offset_days)\n            start_hour = 7\n            end_hour = start_hour + duration_hours\n\n            tasks.append({\n                \"work\": task_description,\n                \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (start_hour, end_hour)\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2024-08-28\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"report\",\n    \"days\": [\n      \"2024-09-09\",\n      \"2024-09-10\",\n      \"2024-09-11\"\n    ],\n    \"hours\": (0, 23)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-08-25\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2024-09-04\",\n      \"2024-09-05\",\n      \"2024-09-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-09-07\",\n      \"2024-09-08\",\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-09-07\",\n      \"2024-09-08\",\n      \"2024-09-09\",\n      \"2024-09-10\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    work_task = \"practicing a musical instrument\"\n    days = []\n    hours = (11, 15)  # 11 AM to 3 PM (11 + 4 hours)\n    \n    date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    days.append((date + timedelta(days=9)).strftime(\"%Y-%m-%d\"))\n    days.append((date + timedelta(days=16)).strftime(\"%Y-%m-%d\"))\n    \n    return [{\"work\": work_task, \"days\": days, \"hours\": hours}]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct code reviews\",\n    \"days\": [\n      \"2024-09-11\",\n      \"2024-09-12\",\n      \"2024-09-16\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"Practicing a new solo\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"Workshops sharing oud techniques\",\n    \"days\": [\n      \"2024-10-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"playing at The Spotted Cat\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-09-14\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-09-12\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"start a unit on autumn leaves\",\n    \"days\": [\n      \"2024-09-16\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"do a few gigs\",\n    \"days\": [\n      \"2024-09-16\",\n      \"2024-09-17\",\n      \"2024-09-18\",\n      \"2024-09-19\",\n      \"2024-09-20\",\n      \"2024-09-21\",\n      \"2024-09-22\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"working on a new solo\",\n    \"days\": [\n      \"2024-09-08\",\n      \"2024-09-09\",\n      \"2024-09-10\",\n      \"2024-09-11\",\n      \"2024-09-12\",\n      \"2024-09-13\",\n      \"2024-09-14\",\n      \"2024-09-15\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\"2024-09-13\"],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-09-11\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-09-05\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-09-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-09-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2024-09-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update progress tracker\",\n    \"days\": [\n      \"2021-10-26\",\n      \"2021-10-27\",\n      \"2021-10-28\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2021-10-24\",\n      \"2021-10-25\",\n      \"2021-10-26\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2021-10-25\",\n      \"2021-10-26\",\n      \"2021-10-27\",\n      \"2021-10-28\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2021-10-17\",\n      \"2021-10-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2021-10-17\",\n      \"2021-10-22\",\n      \"2021-10-28\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-25\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"finalize shooting script\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-10-20\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    results = []\n\n    for line in conversation:\n        if \"revising a project timeline\" in line:\n            task = \"revising a project timeline\"\n            days_ago = 14\n            date = conversation_date - timedelta(days=days_ago)\n            hours = (13, 16)  # 1 p.m. to 4 p.m.\n            results.append({\n                \"work\": task,\n                \"days\": [date.strftime(\"%Y-%m-%d\")],\n                \"hours\": hours\n            })\n        elif \"presenting some of our findings at a conference next month\" in line:\n            task = \"presenting research findings at a conference\"\n            next_month = conversation_date.month + 1\n            next_month_year = conversation_date.year\n            if next_month > 12:\n                next_month = 1\n                next_month_year += 1\n            \n            # Assuming the conference is on the 15th of next month as a reasonable guess\n            conference_date = datetime(next_month_year, next_month, 15)\n            \n            results.append({\n                \"work\": task,\n                \"days\": [conference_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (9, 17) # Assuming a full workday for the presentation\n            })\n        elif \"go check on an experiment\" in line:\n            task = \"checking on an experiment\"\n            date = conversation_date\n            results.append({\n                \"work\": task,\n                \"days\": [date"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2021-10-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Identifies a work-related task and extracts its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"market analysis\" in line.lower():\n            if \"yesterday\" in line.lower():\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n                start_time_str = \"1 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").hour\n                end_time = start_time + 2\n                tasks.append({\n                    \"work\": \"market analysis\",\n                    \"days\": [date],\n                    \"hours\": (start_time, end_time)\n                })\n        if \"analysing some samples\" in line.lower() and \"tomorrow\" in line.lower():\n            date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n            tasks.append({\n                \"work\": \"analysing samples\",\n                \"days\": [date],\n                \"hours\": (9, 17)  # Assuming a typical lab day\n            })\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"How\u2019s everything?\",\n    \"Greta: Hey Henry! Things are pretty busy. I had to complete a market analysis yesterday from 1 p.m. until two hours after that, and it took a lot out of me.\",\n    \"Henry: Sounds intense, Greta! I spent the day tinkering with a '67 Mustang, trying to get the engine purring like a kitten. It's"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-10-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"poetry reading\",\n    \"days\": [\n      \"2021-11-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"grab a coffee and talk\",\n    \"days\": [\n      \"2021-11-01\",\n      \"2021-11-02\",\n      \"2021-11-03\",\n      \"2021-11-04\",\n      \"2021-11-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2021-10-27\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-10-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"organize a small workshop on microplastics\",\n    \"days\": [\n      \"2021-12-03\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2021-10-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"analyzing some data\",\n    \"days\": [\n      \"2021-10-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2021-10-21\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2021-11-07\",\n      \"2021-11-08\",\n      \"2021-11-09\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-30\",\n      \"2021-10-31\",\n      \"2021-11-01\",\n      \"2021-11-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-18\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-25\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2021-10-29\",\n      \"2021-11-01\",\n      \"2021-11-06\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-18\",\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2021-10-29\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2021-10-30\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-11-09\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-11-03\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"developing a new character\",\n    \"days\": [\n      \"2021-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview with journalists\",\n    \"days\": [\n      \"2021-11-03\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-11-08\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"starting a new chapter of my manga\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-11-02\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-11-07\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-09-19\",\n      \"2020-09-20\",\n      \"2020-09-21\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2020-09-25\",\n      \"2020-09-26\",\n      \"2020-09-27\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-01-23\",\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2020-09-18\",\n      \"2020-09-20\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"sketches for a new mural\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-14\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2020-09-18\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyzing sales data\",\n    \"days\": [\n      \"2020-09-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-09-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"sketching out ideas for a new character\",\n    \"days\": [\n      \"2020-09-30\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-09-27\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-09-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-09-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2020-09-17\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"starting a new manga chapter\",\n    \"days\": [\n      \"2020-10-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-09-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2020-09-17\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"character design\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"restoration work on a painting\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-10-07\",\n      \"2020-10-08\",\n      \"2020-10-09\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2020-10-01\",\n      \"2020-10-03\",\n      \"2020-10-11\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"finalize a new composition\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"work on the manga\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"focusing on our setlist for the upcoming jazz festival\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2020-10-01\",\n      \"2020-10-12\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2020-10-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-10-05\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-09-30\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-09-30\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"working on the next chapter of my manga\",\n    \"days\": [],\n    \"hours\": ()\n  },\n  {\n    \"work\": \"preparing for a small performance\",\n    \"days\": [\n      \"2020-10-01\"\n    ],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2020-10-07\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2020-10-03\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"finishing up the new chapter for my manga\",\n    \"days\": [\n      \"2020-09-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2020-09-29\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2020-09-29\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2020-10-07\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-09-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"design a new character's outfit\",\n    \"days\": [\n      \"2020-09-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2020-08-18\",\n      \"2020-08-19\",\n      \"2020-08-20\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"update the task board\" in line:\n            try:\n                # Extract temporal information\n                start_days_ago = int(line.split(\"ago\")[0].split(\"days \")[1])\n                duration_days = int(line.split(\"for \")[1].split(\" consecutive\")[0])\n                start_time_str = line.split(\"from \")[1].split(\" for\")[0]\n                start_hour = int(start_time_str.split(\" p\")[0])\n                if \"a.m.\" in start_time_str:\n                    start_hour = start_hour\n                elif \"p.m.\" in start_time_str:\n                    start_hour += 12\n                duration_hours = int(line.split(\"for \")[2].split(\" hours\")[0])\n                end_hour = start_hour + duration_hours\n\n                # Convert relative dates to absolute dates\n                days = []\n                start_date = conversation_date - timedelta(days=start_days_ago)\n                for i in range(duration_days):\n                    date = start_date + timedelta(days=i)\n                    days.append(date.strftime(\"%Y-%m-%d\"))\n\n                tasks.append({\n                    \"work\": \"update the task board\",\n                    \"days\": days,\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing task details: {e}\")\n                continue\n\n        if \"staircase\" in line and \"commission\" in"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2020-08-16\",\n      \"2020-08-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-01-28\",\n      \"2024-01-30\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-08-17\",\n      \"2020-08-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"prep for a new concert series / rehearsals\",\n    \"days\": [\n      \"2020-08-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2020-08-21\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-08-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"concert preparations\",\n    \"days\": [],\n    \"hours\": ()\n  },\n  {\n    \"work\": \"sketching out new character designs\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2020-08-20\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-08-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2020-08-19\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"preparing for a concerto with the philharmonic\",\n    \"days\": [\n      \"2020-09-01\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"update a training manual\" in line:\n            # Extract temporal information\n            try:\n                date_string = \"two days later\"\n                date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                task_date = date_object.strftime(\"%Y-%m-%d\")\n\n                start_time_string = \"12 p.m.\" if \"12 p.m.\" in line else \"noon\"\n                start_hour = int(datetime.strptime(start_time_string, \"%I %p\").strftime(\"%H\"))\n\n                end_time_string = \"2 p.m.\" if \"2 p.m.\" in line else \"a couple of hours\"\n                if \"a couple of hours\" in end_time_string:\n                    end_hour = start_hour + 2\n                else:\n                    end_hour = int(datetime.strptime(end_time_string, \"%I %p\").strftime(\"%H\"))\n                \n                task_details.append({\n                    \"work\": \"update a training manual\",\n                    \"days\": [task_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where time parsing fails\n\n    return task_details\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Is life treating you well?\",\n    \"Andrei: Hey Chen, life is good, though a bit hectic! I just wanted to let you know that I have to update a training manual two days later from 12 p.m. until 2 p.m.\",\n    \"Chen: That sounds\u2026involved,"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-08-26\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"practicing for my next concert\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"working on a new program at the community center to help children with their reading skills\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2020-08-21\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (16, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2020-09-01\",\n      \"2020-09-02\",\n      \"2020-09-03\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-09-06\",\n      \"2020-09-07\",\n      \"2020-09-08\",\n      \"2020-09-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-08-28\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-08-26\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, date_str=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                   Defaults to \"2024-02-29\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its\n              temporal details.  Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    # Identify task: monitoring production output\n    if \"monitoring production output\" in \"\".join(conversation):\n        task_description = \"monitoring production output\"\n        \n        # Extract dates: ten days ago, two days ago\n        ten_days_ago = conversation_date - timedelta(days=10)\n        two_days_ago = conversation_date - timedelta(days=2)\n        dates = [ten_days_ago.strftime(\"%Y-%m-%d\"), two_days_ago.strftime(\"%Y-%m-%d\")]\n\n        # Extract hours: 3 p.m. until 4 hours after that\n        start_hour = 15\n        end_hour = 15 + 4\n        hours = (start_hour, end_hour)\n\n        tasks.append({\n            \"work\": task_description,\n            \"days\": dates,\n            \"hours\": hours\n        })\n    \n    return tasks\n```\n\n```\n[\n    {\n        \"work\": \"monitoring production output\",\n        \"days\": [\n            \"2024-02-19\",\n            \"2024-02-27\"\n        ],\n        \"hours\": (\n            15,\n            19\n        )\n    }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation \n                                             in YYYY-MM-DD format. \n                                             Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with \n              'work', 'days', and 'hours' keys.  Returns an empty list\n              if no task is found.\n    \"\"\"\n    tasks = []\n    task_mentions = []\n\n    for line in conversation:\n        if \"routine inspections\" in line.lower() or \"teaching a masterclass\" in line.lower():\n            task_mentions.append(line)\n\n    if not task_mentions:\n        return []\n\n    for line in task_mentions:\n        if \"routine inspections\" in line.lower():\n            work = \"Conducting routine inspections\"\n            days = []\n            hours = None\n            \n            if \"four days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=4)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"three days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"three days later\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line.lower():\n                 date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                 days.append(date.strftime(\"%Y-%m-%d\"))   \n            if \"in three days again\" in"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2020-08-30\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2020-09-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation, used for resolving relative dates.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"training session\" in line.lower() and \"deliver\" in line.lower():\n            try:\n                # Extract the number of days offset\n                days_offset = int(line.lower().split(\"days later\")[0].split(\" \")[-1])\n                task_date = conversation_date + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract start and end times\n                if \"10 in the morning\" in line.lower():\n                    start_hour = 10\n                elif \"10 a.m.\" in line.lower():\n                    start_hour = 10\n                else:\n                    start_hour = None\n\n                if \"four hours\" in line.lower():\n                    end_hour = start_hour + 4\n                elif \"four in the afternoon\" in line.lower():\n                    end_hour = 16\n                else:\n                    end_hour = None\n\n                if start_hour is not None and end_hour is not None:\n                    tasks.append({\n                        \"work\": \"Deliver training session\",\n                        \"days\": [task_date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n            except (ValueError, IndexError):\n                pass  # Handle cases where offset or time is not properly formatted\n\n\n    return tasks\n\n# Example usage (with the provided conversation):\nconversation = [\n    \"Jin: I was just wondering how you were.\",\n    \"Andrei: I\u2019m doing well, thank you! It's a bit"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2020-09-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"finalizing a business plan\" in line:\n            task = \"Finalize business plan\"\n            relative_days = -3\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=relative_days)\n            date_str = date.strftime(\"%Y-%m-%d\")\n            start_hour = 14\n            end_hour = 18\n            tasks.append({\n                \"work\": task,\n                \"days\": [date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        elif \"preparing for a concert\" in line:\n            task = \"Prepare for concert\"\n            relative_months = 1\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=30*relative_months)\n            date_str = date.strftime(\"%Y-%m-%d\")\n            #No hours mentioned for concert preparation in the conversation\n            tasks.append({\n                \"work\": task,\n                \"days\": [date_str],\n                \"hours\": (0, 24)\n            })\n\n    return tasks\n\n\n# Example usage:\nconversation = [\n    \"What\u2019s the latest?\",\n    \"Andrei: Hey Greta, so much has been going on! I had to finalize a business plan three days ago, working from 2 p.m. until 4 hours after that, and it was quite a task juggling that with rehearsals.\",\n    \"Greta: Oh, that sounds stressful, Andrei! Rehearsals must take up so much of your time. How did it all go with the plan?\",\n    \"Andrei:"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-09-08\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2020-09-08\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2022-05-20\",\n      \"2022-05-21\",\n      \"2022-05-22\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"rehearsals with the band\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2022-05-27\",\n      \"2022-05-28\",\n      \"2022-05-29\",\n      \"2022-05-30\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2022-05-23\",\n      \"2022-05-26\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-01-19\",\n      \"2024-01-24\",\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-02-01\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n    import datetime\n\n    tasks = []\n    for line in conversation:\n        if \"track daily expenses\" in line.lower():\n            task = \"track daily expenses\"\n            \n            if \"2 days ago\" in line.lower():\n                date = datetime.datetime.strptime(conversation_date, \"%Y-%m-%d\") - datetime.timedelta(days=2)\n                date = date.strftime(\"%Y-%m-%d\")\n                days = [date]\n                hours = (8, 11)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            \n            if \"3 days later\" in line.lower():\n                date = datetime.datetime.strptime(conversation_date, \"%Y-%m-%d\") + datetime.timedelta(days=3)\n                date = date.strftime(\"%Y-%m-%d\")\n                days = [date]\n                hours = (8, 11)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n                \n            if \"yesterday\" in line.lower():\n                date = datetime.datetime.strptime(conversation_date, \"%Y-%m-%d\") - datetime.timedelta(days=1)\n                date = date.strftime(\"%Y-%m-%d\")\n                days = [date]\n                hours = (8, 11)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n    return tasks\n```\n```python\nconversation = [\n    \"Anything interesting happen recently?\",\n    \"Imani: Hey Dante! You won't believe how busy I've been. I had to track daily expenses 2 days ago, and then again starting 3 days later, all from 8 in the morning for three hours. It\u2019"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2022-05-30\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2022-05-30\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2022-05-30\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-05-21\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"gig at The Spotted Cat\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      19,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2022-05-21\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2022-05-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-06-01\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a presentation\",\n    \"days\": [\n      \"2022-06-01\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-15\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring system performance\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2022-06-10\",\n      \"2022-06-16\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practicing a musical instrument\",\n    \"days\": [\n      \"2024-02-01\",\n      \"2024-02-03\",\n      \"2024-02-05\",\n      \"2024-02-06\",\n      \"2024-02-08\",\n      \"2024-02-10\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-07-18\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2022-06-05\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"plan for next week\",\n    \"days\": [\n      \"2022-06-06\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"wrestling with some tricky code\",\n    \"days\": [\n      \"2022-05-28\",\n      \"2022-05-29\",\n      \"2022-05-30\",\n      \"2022-05-31\",\n      \"2022-06-01\",\n      \"2022-06-02\",\n      \"2022-06-03\",\n      \"2022-06-04\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"focused on preventative care\",\n    \"days\": [\n      \"2022-05-28\",\n      \"2022-05-29\",\n      \"2022-05-30\",\n      \"2022-05-31\",\n      \"2022-06-01\",\n      \"2022-06-02\",\n      \"2022-06-03\",\n      \"2022-06-04\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2022-06-07\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"preparations for a concert\",\n    \"days\": [\n      \"2022-06-23\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-06-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2022-06-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-06-03\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2022-06-11\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2022-06-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-06-09\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
