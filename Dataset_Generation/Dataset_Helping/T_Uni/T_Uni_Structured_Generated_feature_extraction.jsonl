"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-04-25\",\n      \"2021-04-26\",\n      \"2021-04-27\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking daily emails\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2021-04-17\",\n      \"2021-04-25\"\n    ],\n    \"hours\": (11, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-04-16\",\n      \"2021-04-20\"\n    ],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-04-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-01-14\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conducting a market survey\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2021-04-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-04-16\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\",\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2021-05-09\",\n      \"2021-05-12\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"artwork for the next volume\",\n    \"days\": [\n      \"2021-04-26\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"track daily expenses\" in line:\n            task = \"track daily expenses\"\n            days = []\n            hours = (7, 9)  # 7 in the morning for two hours\n\n            # Extract dates based on relative time expressions\n            nine_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=9)\n            days.append(nine_days_later.strftime(\"%Y-%m-%d\"))\n\n            thirteen_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=13)\n            days.append(thirteen_days_later.strftime(\"%Y-%m-%d\"))\n            \n            twenty_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=20)\n            days.append(twenty_days_later.strftime(\"%Y-%m-%d\"))\n\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        elif \"revising that poem\" in line:\n            task = \"revising a poem\"\n            # No specific dates or times mentioned for this task\n            \n    return tasks\n\n# Example usage (with the provided input):\nconversation = [\n    \"Yuri: Anything interesting happen recently?\",\n    \"Dante: Actually, yes. I had to track daily expenses nine days later from 7 in the morning for two hours, and then again thirteen days later, and one more time twenty days later, all from 7 in the morning for"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-05-06\",\n      \"2021-05-11\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2021-04-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2021-05-11\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2021-04-30\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Prepare a proposal document\",\n    \"days\": [\n      \"2021-05-08\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"Wrestling with a block of marble\",\n    \"days\": [\n      \"2021-05-05\",\n      \"2021-05-06\",\n      \"2021-05-07\",\n      \"2021-05-08\",\n      \"2021-05-09\",\n      \"2021-05-10\",\n      \"2021-05-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2021-05-09\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2021-05-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2021-05-11\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"repair a pocket watch\",\n    \"days\": [\n      \"2021-04-20\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-01-14\",\n      \"2024-01-15\",\n      \"2024-01-16\",\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-01-27\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-01-18\",\n      \"2024-01-19\",\n      \"2024-01-20\",\n      \"2024-01-23\",\n      \"2024-01-24\",\n      \"2024-01-25\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2020-02-13\",\n      \"2020-02-14\",\n      \"2020-02-15\",\n      \"2020-02-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor production output\" in line:\n            # Extract dates\n            days_ago = [27, 22, 15]\n            dates = []\n            for day_ago in days_ago:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=day_ago)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n            # Extract hours\n            hours = (7, 10)  # 7 AM for 3 hours\n\n            tasks.append({\n                \"work\": \"monitor production output\",\n                \"days\": dates,\n                \"hours\": hours\n            })\n        elif \"preparing a story for tomorrow\" in line:\n            # Extract date\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n            date_str = date.strftime(\"%Y-%m-%d\")\n\n            # Extract hours (assuming all day)\n            hours = (9, 17)\n\n            tasks.append({\n                \"work\": \"preparing a story\",\n                \"days\": [date_str],\n                \"hours\": hours\n            })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2020-02-13\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"glassblowing\",\n    \"days\": [\n      \"2020-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-01-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"creating a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2020-02-11\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2020-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2020-02-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"harvesting\",\n    \"days\": [\n      \"2020-02-17\",\n      \"2020-02-18\",\n      \"2020-02-19\",\n      \"2020-02-20\",\n      \"2020-02-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"draft a customer feedback report\" in line:\n            try:\n                # Extract temporal information\n                time_expression = \"two days later\"\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                start_hour = 7\n                end_hour = start_hour + 3\n\n                tasks.append({\n                    \"work\": \"draft a customer feedback report\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass\n    return tasks\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with work, days, and hours information.\n    \"\"\"\n\n    work_tasks = []\n    for line in conversation:\n        if \"respond to customer inquiries\" in line:\n            task = \"Respond to customer inquiries\"\n            hours = (16, 19)  # 4 PM to 7 PM\n            \n            if \"today\" in line:\n                date = conversation_date\n            elif \"yesterday\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n            elif \"tomorrow\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n            elif \"2 days ago\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n            else:\n                date = None\n            \n            if date:\n                work_tasks.append({\n                    \"work\": task,\n                    \"days\": [date],\n                    \"hours\": hours\n                })\n    \n    # Consolidate days for 3 consecutive days\n    consolidated_tasks = []\n    if len(work_tasks) == 3:\n        dates = sorted([task[\"days\"][0] for task in work_tasks])\n        start_date = dates[0]\n        end_date = dates[-1]\n        \n        all_dates = []\n        current_date = datetime.strptime(start_date, \"%Y-%m-%d\")\n        while current_date <= datetime.strptime(end_date, \"%Y-%m-%d\"):\n            all_dates.append(current_date.strftime(\"%Y"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2020-02-24\",\n      \"2020-02-25\",\n      \"2020-02-26\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.  \n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update client records\" in line:\n            if \"five days later\" in line:\n                date_str = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=5)).strftime(\"%Y-%m-%d\")\n                start_hour = 10\n                end_hour = 12\n                tasks.append({\n                    \"work\": \"update client records\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            if \"six days later\" in line:\n                date_str = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=6)).strftime(\"%Y-%m-%d\")\n                start_hour = 10\n                end_hour = 12\n                tasks.append({\n                    \"work\": \"update client records\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n    return tasks\n```\n\n```\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-01-06\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-01-07\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-24\",\n      \"2024-03-02\",\n      \"2024-03-12\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n    \"\"\"\n\n    tasks = []\n    work_task = \"check inventory levels\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    # Extract dates\n    days_15 = date_obj + timedelta(days=15)\n    days_21 = date_obj + timedelta(days=21)\n    \n    # Extract hours\n    hours = (11, 16)  # 11:00 to 16:00 (4:00 PM)\n\n    tasks.append({\n        \"work\": work_task,\n        \"days\": [days_15.strftime(\"%Y-%m-%d\"), days_21.strftime(\"%Y-%m-%d\")],\n        \"hours\": hours\n    })\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Rose: How's everything going on your end?\",\n    \"Alejandro: Hey Rose! Things are busy here on the farm. I had to check inventory levels 15 days later, and then again 21 days later, both times from 11 in the morning until 4 in the afternoon. It's a lot of work keeping everything organized, but it's essential for the cooperative.\",\n    \"Rose: Oh, that sounds like a lot to juggle! I've been trying to sort through a new collection that just arrived, it's endless.\",\n    \"Alejandro: I can imagine! Finding hidden gems must be exciting though. I remember when I was checking inventory levels 15 days later, it was a really hot day, but we found a whole bin of perfectly ripened beans.\",\n    \"Rose: That's wonderful! It feels like every"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-02-28\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"submit a project proposal\" in line:\n            try:\n                # Extract temporal information\n                parts = line.split(\"from\")\n                hours_part = parts[1].strip()\n                hours_info = hours_part.split(\"for\")\n                start_time_str = hours_info[0].strip()\n                duration_str = hours_info[1].strip().split(\" \")[0]\n\n                start_hour = int(start_time_str.split(\" in the morning\")[0])\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n                hours = (start_hour, end_hour)\n\n                # Calculate the due date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                due_date = date_obj + timedelta(days=22)\n                due_date_str = due_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"submit a project proposal\",\n                    \"days\": [due_date_str],\n                    \"hours\": hours\n                })\n            except:\n                pass #ignore if parsing fails\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"How\u2019s your world?\",\n    \"Alejandro: Hey Ananya! Things are good, though I've been busy with work. I had to submit a project proposal 22 days later from 7 in the morning for three hours.\",\n    \"Ananya: Oh, that"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update an inventory list\"\n    offset_days = 10\n    start_time = 16  # 4 p.m. in 24-hour format\n    duration_hours = 2\n    end_time = start_time + duration_hours\n\n    # Calculate the date\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    task_date = conversation_datetime + timedelta(days=offset_days)\n    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n    task_details = [{\n        \"work\": work_task,\n        \"days\": [task_date_str],\n        \"hours\": (start_time, end_time)\n    }]\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2020-02-27\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a performance report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2022-10-20\",\n      \"2022-10-21\",\n      \"2022-10-22\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practicing a musical instrument\",\n    \"days\": [\n      \"2022-10-15\",\n      \"2022-10-16\",\n      \"2022-10-17\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"prep for lunch service\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": (10, 12)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2022-10-15\",\n      \"2022-10-24\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2022-10-16\",\n      \"2022-10-19\",\n      \"2022-10-26\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a daily review session\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"Offer a cooking class\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-10-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"cataloging a new acquisition\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"prepping for dinner service\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      17,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"review a research paper\" in line:\n            try:\n                parts = line.split(\"from\")\n                time_part = parts[1].strip()\n                time_info = time_part.split(\"for\")\n                start_time_str = time_info[0].strip()\n                duration_str = time_info[1].strip()\n\n                # Extract duration in hours\n                duration = int(duration_str.split(\" \")[0])\n\n                # Extract start time\n                start_hour = int(start_time_str.split(\" in the \")[1].split(\" \")[0])\n\n                # Calculate end time\n                end_hour = start_hour + duration\n                \n                # Calculate the date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj + timedelta(days=3)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"review a research paper\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Just checking in.\",\n    \"Jin: Hey Carmen, just wanted to let you know I have to review a research paper three days later from 7 in the morning for two hours.\",\n    \"Carmen: Oh, that sounds intense, Jin! What have you been cooking up at the restaurant lately? Anything"
"```json\n[\n  {\n    \"work\": \"organizing a community event\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"finishing a rowing skiff\",\n    \"days\": [\n      \"2024-11-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```python\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation\n            in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"prepare a proposal document\" in line:\n            task_description = \"prepare a proposal document\"\n            try:\n                days_ago = int(line.split(\" \")[-2])\n                from datetime import datetime, timedelta\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            except ValueError:\n                task_date_str = None\n            start_hour = 9\n            end_hour = 9 + 3  # 9 a.m. for three hours\n            tasks.append({\n                \"work\": task_description,\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"stress-testing a new recipe\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"hosting a Korean cooking class\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"working on a custom briefcase\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"experimenting with edge treatments\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"get those stitches perfect\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update client records\" in line:\n            try:\n                # Extract temporal information\n                start_in_days = int(line.split(\"in \")[1].split(\" days\")[0])\n                consecutive_days = int(line.split(\"for \")[1].split(\" consecutive days\")[0])\n                start_time_str = line.split(\"from \")[1].split(\" until\")[0]\n                start_hour = int(start_time_str[:2]) if \":\" in start_time_str else int(start_time_str.split(\" \")[0])\n                end_hour = start_hour + int(line.split(\"until \")[1].split(\" hours\")[0])\n                \n                # Convert relative dates to absolute dates\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=start_in_days)\n                dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n                \n                tasks.append({\n                    \"work\": \"update client records\",\n                    \"days\": dates,\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing temporal information: {e}\")\n\n    return tasks\n\n# Example usage:\nconversation = [\n    \"How are things progressing?\",\n    \"Jin: Hey Atsuko! Things have been pretty busy. I have to update client records starting in 9 days, for 3 consecutive days, from 12 noon until 3 hours after that. It feels like a lot, but it needs to be done.\",\n    \"A"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"update a performance log\"\n    start_hour = 10\n    duration = 2\n\n    # Convert conversation date to datetime object\n    conversation_date_dt = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    date_offsets = [3, 8]\n    dates = []\n    for offset in date_offsets:\n        task_date = conversation_date_dt + timedelta(days=offset)\n        dates.append(task_date.strftime(\"%Y-%m-%d\"))\n\n    tasks.append({\n        \"work\": task_description,\n        \"days\": dates,\n        \"hours\": (start_hour, start_hour + duration)\n    })\n\n    return tasks\n# Example usage:\nconversation = [\n    \"Jin: Hey Joel! I wanted to let you know I have to update a performance log three days later and then again eight days later, both times from 10 in the morning for two hours. It's a bit tedious, but it needs to be done.\",\n    \"Joel: Hey Jin, good to hear from you! That sounds\u2026 thorough. How\u2019s the restaurant been doing? Anything new on the menu?\",\n    \"Jin: Things are good, actually! We just started using a new type of kimchi in our kimchi jjigae, and people are loving it. I spent three days later updating a performance log, and I can tell you, I was much more excited about the kimchi!\",\n    \"Joel: That sounds amazing. I always appreciate good food, especially when it\u2019s made with passion. It's a skill, that\u2019s for sure.\",\n    \"Jin: Thanks, Joel! It's definitely a labor of love. And I\u2019m already dreading when I"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update the sales log\"\n    dates = []\n    hours = (11, 15)  # 11 a.m. for four hours\n\n    # Convert conversation date to datetime object\n    conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates based on relative references to conversation date\n    dates.append((conversation_date_obj + timedelta(days=9)).strftime(\"%Y-%m-%d\"))\n    dates.append((conversation_date_obj + timedelta(days=18)).strftime(\"%Y-%m-%d\"))\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": dates,\n        \"hours\": hours\n    })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"finish a large gate\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"work on a new appetizer\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"new commission - a set of fireplace tools\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"develop a new kimchi recipe\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-10-29\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2022-10-28\",\n      \"2022-10-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-11-07\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"running a cooking class for the neighborhood kids\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2022-11-06\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no relevant information is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"monitor production output\"\n    \n    for line in conversation:\n        if work_task in line:\n            if \"today\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\").date()\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"yesterday\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\").date() - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"in 2 days\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\").date() + timedelta(days=2)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"23 days ago\" in line and \"for 3 consecutive days\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\").date() - timedelta(days=23)\n                days = [(date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n            else:\n                days = []\n\n            if \"from 7 in the morning for four hours\" in line:\n                hours = (7, 11)\n            else:\n                hours = None\n\n            if days and hours:\n                tasks.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n    \n    return tasks\n\n# Example usage with the"
"```json\n[\n  {\n    \"work\": \"Practicing a musical instrument\",\n    \"days\": [\n      \"2022-08-08\",\n      \"2022-08-09\",\n      \"2022-08-10\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"Hosting a pop-up restaurant\",\n    \"days\": [\n      \"2022-09-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2022-08-09\",\n      \"2022-08-10\",\n      \"2022-08-11\",\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (15, 19)\n  },\n  {\n    \"work\": \"finalizing everything for demonstration\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (0, 23)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-08-04\",\n      \"2022-08-05\",\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"new sculpture inspired by the myth of Icarus\",\n    \"days\": [\n      \"2022-08-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2022-08-06\",\n      \"2022-08-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-08-05\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2022-08-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-08-07\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2022-08-10\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  },\n  {\n    \"work\": \"hosting a trunk show\",\n    \"days\": [\n      \"2022-09-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing for a wine tasting event\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  },\n  {\n    \"work\": \"finalizing the tasting menu\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  },\n  {\n    \"work\": \"analyzing older games\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"visit a small family-run winery in Piedmont\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"play a few practice games to prepare for my next tournament\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-08-06\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\"2024-02-13\"],\n    \"hours\": [16, 19]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-08-01\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"authenticate a recent acquisition\",\n    \"days\": [\n      \"2022-08-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-08-11\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-15\",\n      \"2022-08-16\",\n      \"2022-08-17\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-06\",\n      \"2022-08-07\",\n      \"2022-08-08\",\n      \"2022-08-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-06\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-07-18\",\n      \"2024-07-19\",\n      \"2024-07-20\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2022-08-16\",\n      \"2022-08-17\",\n      \"2022-08-18\",\n      \"2022-08-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2022-08-13\",\n      \"2022-08-20\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"finish the roof framing\",\n    \"days\": [\n      \"2022-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2022-08-13\",\n      \"2022-08-20\",\n      \"2022-08-21\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"conduct code reviews\"\n    \n    # Convert the conversation date to a datetime object\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Find mentions of the task and extract temporal information\n    for line in conversation:\n        if task in line:\n            if \"5 days later\" in line:\n                date = conversation_datetime + timedelta(days=5)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                \n                if \"1 p.m.\" in line:\n                    start_hour = 13\n                    end_hour = 16\n                    hours = (start_hour, end_hour)\n                else:\n                    hours = None\n\n                task_details.append({\n                    \"work\": task,\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n            \n            if \"11 days later\" in line:\n                date = conversation_datetime + timedelta(days=11)\n                date_str = date.strftime(\"%Y-%m-%d\")\n\n                if \"1 p.m.\" in line and \"three hours\" in line:\n                    start_hour = 13\n                    end_hour = 16\n                    hours = (start_hour, end_hour)\n                else:\n                    hours = None\n\n                task_details.append({\n                    \"work\": task,\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n\n    return task_details\n\n\n# Example usage:\nconversation = [\n    \"Fancy"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2022-08-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2022-08-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event (local chess tournament)\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2022-08-18\"\n    ],\n    \"hours\": (\n        8,\n        11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-08-15\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2022-08-23\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"attend a client meeting\" in line:\n            try:\n                parts = line.split(\"from\")\n                hours_part = parts[1].strip()\n                \n                start_hour_str = hours_part.split(\" \")[0].strip()\n                start_hour = int(start_hour_str.split(\":\")[0])\n                \n                duration_str = hours_part.split(\"for\")[1].split(\" \")[0].strip()\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n                \n                hours = (start_hour, end_hour)\n                \n                if \"today\" in line:\n                    days = [conversation_date]\n                elif \"two days ago\" in line:\n                    date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                    days = [date.strftime(\"%Y-%m-%d\")]\n                elif \"20 days later\" in line:\n                    date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=20)\n                    days = [date.strftime(\"%Y-%m-%d\")]\n                elif \"three days\" in line:\n                    date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                    days = [date.strftime(\"%Y-%m-%d\")]\n                else:\n                    days = []\n                    \n                tasks.append({\n                    \"work\": \"attend a client meeting\",\n                    \"days\":"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-08-22\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2022-04-19\",\n      \"2022-04-20\",\n      \"2022-04-21\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"balance spring replacement\",\n    \"days\": [\n      \"2022-04-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"restoring an old grandfather clock\",\n    \"days\": [\n      \"2022-04-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    task_details = []\n    work_task = \"prepare a daily briefing\"\n    \n    # Calculate the start date based on \"seven days ago\"\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=7)\n    \n    # Extract dates for the three consecutive days\n    dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n    \n    # Extract time range (3 p.m. for two hours)\n    start_hour = 15\n    end_hour = 17\n    \n    task_details.append({\n        \"work\": work_task,\n        \"days\": dates,\n        \"hours\": (start_hour, end_hour)\n    })\n    \n    return task_details\n\n# Example Usage (with the provided input)\nconversation = [\n    \"Chen: What\u2019s been keeping you busy lately?\",\n    \"Hugo: Well, it\u2019s been a pretty intense week. I had to prepare a daily briefing, starting seven days ago for three consecutive days, from 3 p.m. until 2 hours after that.\",\n    \"Chen: Sounds demanding! I\u2019ve been experimenting with a new blend of white tea, trying to get the floral notes just right. It requires a lot of patience.\",\n    \"Hugo: That sounds peaceful. Preparing those briefings was draining, but important. It\u2019s all part of staying on top of things when you are documenting a story.\",\n    \"Chen: I suppose every craft has its pressures. Do you ever find a moment to simply observe, without the need to capture everything?\",\n    \"Hugo: I try to. It\u2019s hard when you are passionate about your work, though. I was preparing a daily briefing again, seven days ago"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily briefing\",\n    \"days\": [\n      \"2022-04-18\",\n      \"2022-04-21\"\n    ],\n    \"hours\": [\n      8,\n      12\n    ]\n  },\n  {\n    \"work\": \"editing\",\n    \"days\": [\n      \"2022-04-19\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-10\",\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2022-04-13\",\n      \"2022-04-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-04-25\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-04-17\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-04-20\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"wrestling with a piece of leather\",\n    \"days\": [\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"editing a film\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"building a rapport with a community\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"document the lives of eagle hunters in Mongolia\",\n    \"days\": [\n      \"2024-09-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"formulate ideas for a project on the impact of fast fashion\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"task checklist\" in line:\n            try:\n                parts = line.split(\"task checklist\")\n                days_ago_str = parts[1].split(\"days ago\")[0].strip()\n                days_ago = int(days_ago_str)\n                task_date = conversation_date - timedelta(days=days_ago)\n                \n                start_time_str = parts[1].split(\"from \")[1].split(\" for\")[0].strip()\n                start_hour = int(start_time_str.split(\" \")[0]) if \"in the morning\" in start_time_str else int(start_time_str.split(\":\")[0])\n                end_hour = start_hour + 2\n\n                task = {\n                    \"work\": \"Complete task checklist\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                }\n                tasks.append(task)\n            except:\n                pass\n    return tasks\n```\n\n```\n[\n  {\n    \"work\": \"Complete task checklist\",\n    \"days\": [\n      \"2023-12-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Compile a weekly summary\",\n    \"days\": [\n      \"2022-04-12\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    import re\n    from datetime import datetime, timedelta\n\n    task_details = []\n    for line in conversation:\n        if \"market survey\" in line.lower():\n            match = re.search(r\"(\\d+)\\s*(?:in the )?morning\", line)\n            start_hour = int(match.group(1)) if match else 8\n            end_hour = start_hour + 3\n            \n            days_ago = 3\n            task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            task_details.append({\n                \"work\": \"conduct a market survey\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        elif \"training\" in line.lower():\n            task_details.append({\n                \"work\": \"training\",\n                \"days\": [conversation_date],\n                \"hours\": (9,17)\n            })\n        elif \"film\" in line.lower() or \"filming\" in line.lower():\n            task_details.append({\n                \"work\": \"film a new project\",\n                \"days\": [conversation_date],\n                \"hours\": (9,17)\n            })\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting to discuss funding\",\n    \"days\": [\n      \"2022-05-03\",\n      \"2022-05-04\",\n      \"2022-05-05\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-07-18\",\n      \"2024-07-19\",\n      \"2024-07-20\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"performing routine testing\",\n    \"days\": [\n      \"2022-04-27\",\n      \"2022-04-28\",\n      \"2022-04-29\",\n      \"2022-04-30\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-03-12\",\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2022-05-06\",\n      \"2022-05-08\",\n      \"2022-05-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2022-05-01\",\n      \"2022-05-02\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"Documentary filming in Patagonia\",\n    \"days\": [\n      \"2022-06-07\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2022-05-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2022-04-27\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a filmmaking workshop for local activists\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2022-05-01\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"working on a film about the impact of plastic pollution\",\n    \"days\": [\n      \"2022-04-20\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2022-05-05\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  },\n  {\n    \"work\": \"cataloging some recent acquisitions for the museum\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"record a tutorial video\"\n    \n    # Find all mentions of the task and extract temporal information\n    for line in conversation:\n        if work_task in line:\n            try:\n                # Extract the offset and time information\n                parts = line.split(\"from\")\n                offset_str = parts[0].split(\"days later from\")[1].strip()\n                offset_days = int(offset_str)\n                time_str = parts[1].split(\"for\")[0].strip()\n                start_time_str = time_str.split(\"in the morning\")[0].strip()\n                \n                # Parse the start time\n                start_hour = int(start_time_str.split(\" \")[0])\n                end_hour = start_hour + 2\n\n                # Calculate the date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n    return task_details\n\n# Example usage with the provided input:\nconversation = [\n    \"Hope things are alright.\",\n    \"Hugo: Hey Adam! Just wanted to let you know I'm going to be really busy"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2021-07-07\",\n      \"2021-07-08\",\n      \"2021-07-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"prepare a daily summary\" in line:\n            task = \"Prepare daily summary\"\n            days_ago = 23\n            duration = 4\n            start_time_str = \"1 p.m.\"\n            \n            start_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            dates = [(start_datetime + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n            \n            start_hour = int(start_time_str.split(\" \")[0]) + 12 if \"p.m.\" in start_time_str else int(start_time_str.split(\" \")[0])\n            end_hour = start_hour + 3\n\n            task_details.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n            \n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"Review daily KPIs\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (12, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2021-07-07\",\n      \"2021-07-12\",\n      \"2021-07-19\",\n      \"2021-07-26\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2021-07-19\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"working on a delicate mechanism\",\n    \"days\": [\n      \"2021-07-01\",\n      \"2021-07-06\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a contract\",\n    \"days\": [\n      \"2021-07-14\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"visiting a watch fair\",\n    \"days\": [\n      \"2021-08-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"cleaning out some old watch parts\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-07-05\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2021-07-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-07-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2021-07-03\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"taking apart a very old pocket watch\",\n    \"days\": [\n      \"2021-07-10\",\n      \"2021-07-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a presentation\",\n    \"days\": [\n      \"2021-07-01\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"sketching new watch designs\",\n    \"days\": [\n      \"2021-07-06\",\n      \"2021-07-07\",\n      \"2021-07-08\",\n      \"2021-07-09\",\n      \"2021-07-10\",\n      \"2021-07-11\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-07-14\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task or relevant dates are found.\n    \"\"\"\n\n    task_details = []\n    conversation_date = datetime.now().date()  # Assuming today's date for relative references\n    \n    # Identify the task and its temporal details\n    for line in conversation:\n        if \"update the project dashboard\" in line or \"updating the project dashboard\" in line:\n            if \"three days ago\" in line:\n                date = conversation_date - timedelta(days=3)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 10)\n            elif \"yesterday\" in line:\n                date = conversation_date - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 10)\n            elif \"two days ago\" in line:\n                date = conversation_date - timedelta(days=2)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 10)\n            elif \"today\" in line:\n                date = conversation_date\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 10)\n            else:\n                continue\n\n            task_details.append({\n                \"work\": \"Update the project dashboard\",\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-28\",\n      \"2024-03-06\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"pocket watch restoration\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-07-19\",\n      \"2021-07-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"working on a customer's pocket watch\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2021-07-17\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-07-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"restoring an old pocket watch\",\n    \"days\": [\n      \"2021-07-12\",\n      \"2021-07-13\",\n      \"2021-07-14\",\n      \"2021-07-15\",\n      \"2021-07-16\",\n      \"2021-07-17\",\n      \"2021-07-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2021-07-24\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"restoration project of an old clock tower\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"prepping for a gig at Preservation Hall\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record a tutorial video\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-07-19\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-03-17\",\n      \"2021-03-18\",\n      \"2021-03-19\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    task_details = []\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"monitoring website analytics\" in line:\n            days_ago = int(line.split(\"twenty-two days ago\")[0].split()[-1])\n            \n            start_date = date_obj - timedelta(days=days_ago)\n            \n            days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n            \n            start_time_str = \"3 p.m.\"\n            start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n            end_time = (datetime.combine(date_obj, start_time) + timedelta(hours=4)).time()\n            \n            hours = (start_time.hour, end_time.hour)\n\n            task_details.append({\n                \"work\": \"monitoring website analytics\",\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return task_details\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Jin: What\u2019s been keeping you busy lately?\",\n    \"Chen: Well, it's been quite a stretch of monitoring website analytics, it started twenty-two days ago, for three consecutive days, and I\u2019ve been doing it from 3 p.m. until 4 hours after that each day.\",\n    \"Jin: That sounds like a lot of screen time! I've been trying to perfect a new kimchi recipe, it's a delicate balance of flavors.\",\n    \"Chen: I can imagine! Balancing flavors sounds a lot like blending the perfect tea \u2013 it requires a refined sense of taste.\",\n    \"Jin: Speaking of refined, the"
"```json\n[\n  {\n    \"work\": \"Maintaining a training schedule\",\n    \"days\": [\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\",\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"daily safety check\"\n    days = []\n    hours = (11, 15)  # 11 AM to 3 PM (11 + 4 hours)\n\n    # Find mentions of the task and extract temporal expressions\n    for line in conversation:\n        if work_task in line.lower():\n            if \"thirteen days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=13)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"two days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"next week\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n\n    if days:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2021-03-11\",\n      \"2021-03-19\",\n      \"2021-03-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2021-03-11\",\n      \"2021-03-20\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2021-03-19\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"script revisions\",\n    \"days\": [\n      \"2021-03-23\",\n      \"2021-03-24\",\n      \"2021-03-25\",\n      \"2021-03-26\",\n      \"2021-03-27\",\n      \"2021-03-28\",\n      \"2021-03-29\",\n      \"2021-03-30\",\n      \"2021-03-31\",\n      \"2021-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-03-22\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2021-03-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2021-03-21\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a project timeline\",\n    \"days\": [\n      \"2021-03-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"preparing gear\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"brushing up on wilderness first aid\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\"2021-03-12\"],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"writing a performance review\",\n    \"days\": [\n      \"2021-03-13\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing daily feedback\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"midday walk\",\n    \"days\": [\n      \"2021-04-04\",\n      \"2021-04-05\",\n      \"2021-04-06\",\n      \"2021-04-07\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"wallet design\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"briefcase project\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project metrics\",\n    \"days\": [\n      \"2024-03-13\",\n      \"2024-03-24\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation\n            in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with\n            its details.  Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"review project progress\" in line:\n            if \"four days later\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=4)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours = (13, 15)  # 1 p.m. to 3 p.m. (two hours after 1 p.m.)\n                tasks.append({\n                    \"work\": \"review project progress\",\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n            elif \"twelve days later\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=12)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours = (13, 15)\n                tasks.append({\n                    \"work\": \"review project progress\",\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n            elif \"fifteen days later\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=15)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours = (13, 15)\n                tasks.append({\n                    \"work\": \"review project progress\",\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"Watering office plants\",\n    \"days\": [\n      \"2021-03-28\",\n      \"2021-03-29\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2021-04-01\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode to promote the new tea blend\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\ndef extract_features(conversation, conversation_date=\"2024-03-08\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-03-08\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    import re\n    from datetime import datetime, timedelta\n\n    tasks = []\n    for line in conversation:\n        if \"conducting a product demo\" in line:\n            # Extract temporal information\n            match = re.search(r\"(\\d+)\\s*p\\.m\\.\", line)\n            if match:\n                start_hour = int(match.group(1))\n                end_hour = start_hour + 3\n                hours = (start_hour, end_hour)\n            else:\n                hours = None\n\n            # Calculate the date\n            date_match = re.search(r\"two days later\", line)\n            if date_match:\n                conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days_later = 2\n                task_date = conversation_date_obj + timedelta(days=days_later)\n                days = [task_date.strftime(\"%Y-%m-%d\")]\n            else:\n                days = []\n\n            task = {\n                \"work\": \"conducting a product demo\",\n                \"days\": days,\n                \"hours\": hours,\n            }\n            tasks.append(task)\n\n    return tasks\n```\n\n```python\nconversation = [\n    \"It\u2019s good to connect with you.\",\n    \"Chen: Irina, it\u2019s lovely to hear from you! I just wanted to let you know I\u2019ll be conducting a product demo two days later from 1 p.m. until 4 p.m..\",\n    \"Irina: Oh, that sounds\u2026intense! I've been focusing on perfecting a new routine with the ribbon, it's been"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2021-03-30\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\"2024-02-23\"],\n    \"hours\": (8, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-05-16\",\n      \"2024-05-17\",\n      \"2024-05-18\",\n      \"2024-05-08\",\n      \"2024-05-10\",\n      \"2024-05-11\",\n      \"2024-05-09\",\n      \"2024-05-13\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-05-16\",\n      \"2024-05-17\",\n      \"2024-05-18\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Reviewing daily feedback\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-05-09\",\n      \"2024-05-12\",\n      \"2024-05-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-05-08\",\n      \"2024-05-11\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-05-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-05-11\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"restoring an old frame\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update an inventory list\" in line:\n            try:\n                parts = line.split()\n                days_ago = int(parts[5])\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                start_hour = int(parts[7].split(\":\")[0])\n                end_hour = start_hour + 2\n                tasks.append({\n                    \"work\": \"update an inventory list\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"restoration project\" in line:\n            try:\n                tasks.append({\n                    \"work\": \"restoration project\",\n                    \"days\": [conversation_date],\n                    \"hours\": (9, 17)\n                })\n            except:\n                pass\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Good to hear from you, how are things?\",\n    \"Thomas: Hey Ivan, things are going well, though I was pretty busy recently. I had to update an inventory list 16 days ago, from 9 in the morning for two hours.\",\n    \"Ivan: That sounds like a meticulous task, Thomas. You always put such care into everything you do.\",\n    \"Thomas: Thanks, Ivan. It's important to keep everything organized, especially with the materials I use. Did you have a good week of coaching?\",\n    \"Ivan: It was productive. A few of my students are preparing for an"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-05-12\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2024-05-08\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-05-08\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-05-09\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-05-28\",\n      \"2024-05-29\",\n      \"2024-05-30\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"daily safety check\"\n    start_time = 16\n    end_time = 19\n\n    # Calculate dates\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    # Two days ago\n    date_start = conversation_datetime - timedelta(days=2)\n    \n    # Last three consecutive days\n    days = [date_start.strftime(\"%Y-%m-%d\")]\n    for i in range(1, 3):\n        date_start += timedelta(days=1)\n        days.append(date_start.strftime(\"%Y-%m-%d\"))\n\n    # Today\n    today_date = conversation_datetime.strftime(\"%Y-%m-%d\")\n    days.append(today_date)\n\n    # Tomorrow\n    tomorrow_date = (conversation_datetime + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n    days.append(tomorrow_date)\n    \n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": (start_time, end_time)\n    })\n\n    return task_details\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-04-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"routine testing\" in line.lower():\n            task = \"routine testing\"\n            \n            if \"starting in 4 days\" in line.lower():\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=4)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                for i in range(1, 4):\n                    days.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n                hours = (11, 15)  # 11 AM to 3 PM (11 + 4 = 15)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            elif \"today\" in line.lower():\n                days = [conversation_date]\n                hours = (11, 15)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            elif \"yesterday\" in line.lower():\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (11, 15)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            elif \"two days ago\" in line.lower():\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (11, 15)\n                tasks.append({\"work\": task,"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-05-27\",\n      \"2024-05-30\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-05-23\",\n      \"2024-05-29\",\n      \"2024-05-31\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine inspections\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"preparing for a new project\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"designing a new brochure\" in line:\n            if \"today\" in line:\n                start_time_str = line.split(\"from \")[-1].split(\" for \")[0]\n                hours_str = line.split(\"for \")[-1].split(\" hours\")[0]\n\n                start_hour = int(start_time_str.split(\" \")[0].split(\":\")[0])\n                end_hour = start_hour + int(hours_str)\n\n                tasks.append({\n                    \"work\": \"designing a new brochure\",\n                    \"days\": [conversation_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            elif \"in 2 days\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                \n                tasks.append({\n                    \"work\": \"designing a new brochure\",\n                    \"days\": [date_str, (datetime.strptime(date_str, \"%Y-%m-%d\") + timedelta(days=1)).strftime(\"%Y-%m-%d\")],\n                    \"hours\": (9, 17) \n                })\n        elif \"debugging some code\" in line:\n            tasks.append({\n                \"work\": \"debugging some code\",\n                \"days\": [conversation_date],\n                \"hours\": (9,17)\n            })\n        elif \"restoring a really old beam\" in line:\n            tasks"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-05-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"panel layout\",\n    \"days\": [\n      \"2024-05-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2024-07-18\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-05-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"restoring an old barn door\",\n    \"days\": [\n      \"2024-06-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-05-26\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"record a tutorial video\"\n    offset_days = 8\n    start_time = 16  # 4 p.m. in 24-hour format\n    end_time = 19  # 7 p.m. in 24-hour format\n    \n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    # Calculate the date for the task\n    task_date = conversation_datetime + timedelta(days=offset_days)\n    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n    tasks.append({\n        \"work\": task_description,\n        \"days\": [task_date_str],\n        \"hours\": (start_time, end_time)\n    })\n    \n    return tasks\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"record a podcast episode\" in line or \"recording a podcast episode\" in line or \"finished recording a podcast episode\" in line:\n            if \"15 days later\" in line:\n                task_date = conversation_date + timedelta(days=15)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                if \"from 7 in the morning for two hours\" in line or \"starting at 7 and going for two hours\" in line:\n                    start_hour = 7\n                    end_hour = 9\n                    tasks.append({\n                        \"work\": \"record a podcast episode\",\n                        \"days\": [task_date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"How's your world?\",\n    \"Thomas: Hey Julia! Things are alright, just letting you know I have to record a podcast episode 15 days later from 7 in the morning for two hours.\",\n    \"Julia: Oh, that's good to hear! I've been really getting into this new case. It's a real head-scratcher, honestly \u2013 lots of small details.\",\n    \"Thomas: That sounds intense! I always admire how you can focus on those little things. It's a skill I definitely don't have when I"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    work_task = \"analyze sales data\"\n    \n    for line in conversation:\n        if work_task in line:\n            # Extract temporal expressions\n            if \"tomorrow\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"yesterday\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"three days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"two days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"in two days\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"starting in 4 days for 3 consecutive days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=4)\n                days = [(start_date + timedelta(i)).strftime(\"%Y-%m"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        try:\n            _, speaker, utterance = line.split(\" \", 2)\n        except ValueError:\n            continue\n\n        if \"write a technical blog post\" in utterance:\n            try:\n                days_ago = int(\"\".join(filter(str.isdigit, utterance.split(\" \")[-2])))\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours = (7, 11)  # 7 AM for four hours\n                tasks.append({\n                    \"work\": \"write a technical blog post\",\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-12-01\",\n      \"2020-12-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\ndef extract_task_details(conversation, conversation_date=\"2020-12-08\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    import datetime\n\n    task_details = []\n    work_task = \"monitor quality control metrics\"\n    \n    # Extract dates\n    dates = []\n    for line in conversation:\n        if work_task in line:\n            if \"twelve days ago\" in line:\n                date = datetime.datetime.strptime(conversation_date, \"%Y-%m-%d\") - datetime.timedelta(days=12)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"eleven days ago\" in line:\n                date = datetime.datetime.strptime(conversation_date, \"%Y-%m-%d\") - datetime.timedelta(days=11)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line:\n                date = datetime.datetime.strptime(conversation_date, \"%Y-%m-%d\") - datetime.timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n    # Extract hours\n    hours = (8, 11)\n    \n    if dates:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2020-11-28\",\n      \"2020-12-01\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-12-02\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-12-03\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"get a '57 Chevy ready for a client\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"find a replacement part for the distributor\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-01-19\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2020-12-06\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2020-12-03\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2020-11-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"coding for a demo\",\n    \"days\": [\n      \"2020-12-04\",\n      \"2020-12-05\",\n      \"2020-12-06\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2020-12-11\",\n      \"2020-12-12\",\n      \"2020-12-13\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update the maintenance log\",\n    \"days\": [\n      \"2020-12-15\",\n      \"2020-12-16\",\n      \"2020-12-17\",\n      \"2020-12-18\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-12-17\",\n      \"2020-12-19\",\n      \"2020-12-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"update the sales log\" in line:\n            # Extract temporal information\n            if \"three days later\" in line:\n                date_offset = 3\n                task_date = date_obj + timedelta(days=date_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            elif \"six days later\" in line:\n                date_offset = 6\n                task_date = date_obj + timedelta(days=date_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            elif \"two days from now\" in line:\n                date_offset = 2\n                task_date = date_obj + timedelta(days=date_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            else:\n                task_date_str = None\n            \n            start_hour = 9\n            end_hour = 9 + 3\n\n            tasks.append({\n                \"work\": \"update the sales log\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"visit a small vineyard in Tuscany next week\" in line:\n            date_offset = 7\n            task_date = date_obj + timedelta(days=date_offset)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            tasks.append({\n                \"work\": \"visit a small vineyard in Tuscany"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-12-15\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-12-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-12-13\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  },\n  {\n    \"work\": \"authenticate a painting\",\n    \"days\": [\n      \"2020-12-19\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"visit a small historical estate\",\n    \"days\": [\n      \"2020-12-26\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-12-09\",\n      \"2020-12-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-12-09\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-01-25\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"finalize the wine list for the New Year\u2019s Eve gala\",\n    \"days\": [\n      \"2024-01-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"track daily expenses\" in line:\n            # Extract temporal information\n            if \"starting in 3 days\" in line:\n                offset_days = 3\n                duration_days = 3\n                start_hour = 15\n                end_hour = start_hour + 4\n                \n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n                tasks.append({\n                    \"work\": \"track daily expenses\",\n                    \"days\": dates,\n                    \"hours\": (start_hour, end_hour)\n                })\n            elif \"in 2 days\" in line:\n                offset_days = 2\n                duration_days = 3\n                start_hour = 15\n                end_hour = start_hour + 4\n                \n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n                tasks.append({\n                    \"work\": \"track daily expenses\",\n                    \"days\": dates,\n                    \"hours\": (start_hour, end_hour)\n                })\n            elif \"yesterday\" in line:\n                 offset_days = -1\n                 duration_days = 1\n                 start_hour = 15\n                 end_hour = start_hour + 1\n\n                 start_date = datetime.strptime(conversation_"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Maintaining a daily checklist\",\n    \"days\": [\n      \"2024-11-06\",\n      \"2024-11-07\",\n      \"2024-11-08\",\n      \"2024-11-09\"\n    ],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"Visit a fellow blacksmith\",\n    \"days\": [\n      \"2024-12-02\",\n      \"2024-12-06\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"prepping for a gallery showing\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-11-02\",\n      \"2024-11-11\",\n      \"2024-11-15\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update the sales log\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-13\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"writing a technical blog post\",\n    \"days\": [\n      \"2024-11-13\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-11-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-11-09\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"placement of a delicate sculpture\",\n    \"days\": [\n      \"2024-11-18\",\n      \"2024-11-19\",\n      \"2024-11-20\",\n      \"2024-11-21\",\n      \"2024-11-22\",\n      \"2024-11-23\",\n      \"2024-11-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"working on exhibition\",\n    \"days\": [\n      \"2024-11-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-11-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-24\",\n      \"2024-11-25\",\n      \"2024-11-26\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-15\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-16\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-14\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-24\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Checking daily emails\",\n    \"days\": [\n      \"2024-11-19\",\n      \"2024-11-20\",\n      \"2024-11-21\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-21\",\n      \"2024-11-22\",\n      \"2024-11-23\",\n      \"2024-11-24\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-18\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-20\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-02-28\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring website analytics\",\n    \"days\": [\n      \"2024-11-16\",\n      \"2024-11-17\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-11-26\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"revise a contract\" in line:\n            task = \"revise a contract\"\n            try:\n                days_later = int(line.split(\" \")[-2])\n                task_date = conversation_date + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                hours_str = line.split(\"from \")[-1].split(\" until \")[0]\n                start_hour, end_hour = map(int, hours_str.split(\" in the \"))\n                \n                if start_hour >= 12:\n                    start_hour -= 12\n                if end_hour >= 12:\n                    end_hour -= 12\n                \n                if start_hour == 0:\n                    start_hour = 24\n                \n                tasks.append({\n                    \"work\": task,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"making a briefcase\" in line and \"lawyer\" in line:\n            task = \"making a briefcase for a lawyer\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [],\n                \"hours\": (0, 24)\n            })\n        if \"exhibit some of my work\" in line and \"craft fair\" in line:\n            task = \"preparing for a craft fair\"\n            next"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"draft a press release\" in line:\n            # Extract temporal information\n            if \"tomorrow\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n                hours_match = re.search(r\"(\\d+)\\s*(?:in the morning|am)\", line)\n                if hours_match:\n                    start_hour = int(hours_match.group(1))\n                    end_hour = start_hour + 4\n                    days = [date]\n                    tasks.append({\n                        \"work\": \"draft a press release\",\n                        \"days\": days,\n                        \"hours\": (start_hour, end_hour)\n                    })\n            elif \"yesterday\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n                days = [date]\n            elif \"two days ago\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n                days = [date]\n            elif \"three days ago\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)).strftime(\"%Y-%m-%d\")\n                days = [date]\n            elif \"in two days\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-11-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-11-28\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2024-11-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"working on a song\",\n    \"days\": [\n      \"2024-11-10\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2023-11-23\",\n      \"2023-11-24\",\n      \"2023-11-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-11-13\",\n      \"2023-11-14\",\n      \"2023-11-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-27\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-11-21\",\n      \"2023-11-24\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"sketching ideas for calligraphy work\",\n    \"days\": [\n      \"2023-11-26\"\n    ],\n    \"hours\": (19, 24)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task \n              and contains 'work', 'days', and 'hours' keys.  \n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    \n    # Identify the work task\n    work_task = \"tracking daily expenses\"\n\n    # Extract temporal details\n    days = []\n    offset_days = [6, 3, 0]  # 6 days ago, 3 days ago, today\n    \n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    for offset in offset_days:\n        date = conversation_datetime - timedelta(days=offset)\n        days.append(date.strftime(\"%Y-%m-%d\"))\n\n    hours = (8, 10)  # 8 am to 10 am (2 hours)\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n    \n    return task_details\n```\n\n**Explanation:**\n\n1.  **Initialization:**\n    *   `task_details`: An empty list to store dictionaries for each identified task.\n    *   `work_task`:  The work task is pre-defined as \"tracking daily expenses\".\n2.  **Temporal Details Extraction:**\n    *   `offset_days`: The task was performed six days ago, three days ago and yesterday.\n    *   `conversation_datetime`: Converts the `conversation_date` string into a `datetime` object.\n    *   The code iterates through the offset values and calculates the absolute dates corresponding to each offset.  It then formats the dates into 'YYYY-MM-DD' strings and adds them to the `days` list.\n3.  **Hours Extraction"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-11-20\",\n      \"2023-11-25\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  },\n  {\n    \"work\": \"large commission for a new mosque\",\n    \"days\": [\n      \"2023-11-16\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2023-11-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"calligraphy piece for a new mosque\",\n    \"days\": [\n      \"2023-12-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"optimizing a pathfinding algorithm\",\n    \"days\": [\n      \"2023-11-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"interview\",\n    \"days\": [\n      \"2023-11-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating an inventory list\",\n    \"days\": [\n      \"2023-11-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-11-22\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\"2023-11-16\"],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-11-18\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-11-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting a daily safety check\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Monitor team activity\",\n    \"days\": [\n      \"2023-11-29\",\n      \"2023-11-30\",\n      \"2023-12-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2023-12-06\",\n      \"2023-12-07\",\n      \"2023-12-08\",\n      \"2023-12-09\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-11-29\",\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n        12,\n        15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task or offset_days are found.\n    \"\"\"\n\n    work_task = \"update a status report\"\n    days = []\n    hours = (12, 15)\n    \n    # Calculate dates based on offsets\n    offset_days = [9, 10, 13]\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    for offset in offset_days:\n        task_date = conversation_datetime + timedelta(days=offset)\n        days.append(task_date.strftime(\"%Y-%m-%d\"))\n\n    result = []\n    if work_task and days and hours:\n        result.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return result\n```\n\n```\n[\n    {\n        \"work\": \"update a status report\",\n        \"days\": [\n            \"2024-01-10\",\n            \"2024-01-11\",\n            \"2024-01-14\"\n        ],\n        \"hours\": (\n            12,\n            15\n        )\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2023-11-27\",\n      \"2023-12-06\"\n    ],\n    \"hours\": (14, 16)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"revise a contract\" in line:\n            task = \"revise a contract\"\n            try:\n                offset_days = int(line.split(\" \")[-3])\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date = task_date.strftime(\"%Y-%m-%d\")\n                hours = (10, 12)\n                tasks.append({\"work\": task, \"days\": [task_date], \"hours\": hours})\n            except:\n                pass\n        if \"qualifier match\" in line:\n            task = \"qualifier match\"\n            try:\n                offset_days = 7\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date = task_date.strftime(\"%Y-%m-%d\")\n                hours = (0, 24)\n                tasks.append({\"work\": task, \"days\": [task_date], \"hours\": hours})\n            except:\n                pass\n\n    return tasks\n\nconversation = [\n    \"Mohammed: How\u2019s your week going?\",\n    \"Jayden: It\u2019s pretty good, just trying to stay focused with all the tournaments coming up. How about you?\",\n    \"Mohammed: Things are alright, I\u2019ve been really busy with work though. I had to revise a contract 10 days later, from 10 in the morning for two hours"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2023-11-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-11-30\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2023-12-02\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"calligraphy piece for a local mosque\",\n    \"days\": [\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2023-11-29\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update the sales log\"\n    days = []\n    hours = (16, 19)\n\n    # Determine the start date\n    date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates based on relative time expressions\n    tomorrow = date + timedelta(days=1)\n    day_after_tomorrow = date + timedelta(days=2)\n    in_3_days = date + timedelta(days=3)\n\n    days.extend([tomorrow.strftime(\"%Y-%m-%d\"),\n                 (tomorrow + timedelta(days=1)).strftime(\"%Y-%m-%d\"),\n                 (tomorrow + timedelta(days=2)).strftime(\"%Y-%m-%d\")])\n    days.extend([(in_3_days + timedelta(days=0)).strftime(\"%Y-%m-%d\"),\n                 (in_3_days + timedelta(days=1)).strftime(\"%Y-%m-%d\"),\n                 (in_3_days + timedelta(days=2)).strftime(\"%Y-%m-%d\")])\n    \n    if work_task and days and hours:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n"
"```json\n[\n  {\n    \"work\": \"practicing a musical instrument\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-08\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2020-06-02\",\n      \"2020-06-10\",\n      \"2020-06-12\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2020-05-31\",\n      \"2020-06-06\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2020-06-03\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-06-07\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"volunteering hours at the children's charity\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a workshop\",\n    \"days\": [\n      \"2020-06-05\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2020-06-03\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting a daily safety check\",\n    \"days\": [\n      \"2020-06-19\",\n      \"2020-06-20\",\n      \"2020-06-21\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"review daily feedback\" in line:\n            task = \"Review daily feedback\"\n            \n            if \"four days ago\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=4)\n                days = [start_date.strftime(\"%Y-%m-%d\"), (start_date + timedelta(days=1)).strftime(\"%Y-%m-%d\"), (start_date + timedelta(days=2)).strftime(\"%Y-%m-%d\")]\n                hours = (8, 10)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            elif \"yesterday\" in line:\n                yesterday = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [yesterday.strftime(\"%Y-%m-%d\")]\n                hours = (8, 10)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            elif \"today\" in line:\n                today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days = [today.strftime(\"%Y-%m-%d\")]\n                hours = (8, 10)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Jin: Thinking of you and sending good vibes.\",\n    \"Alicia: Hey Jin! Thanks so much. Things"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-19\",\n      \"2024-02-18\",\n      \"2024-02-20\",\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2020-06-14\",\n      \"2020-06-17\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct routine inspections\",\n    \"days\": [\n      \"2020-06-15\",\n      \"2020-06-17\",\n      \"2020-06-18\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries containing the extracted features.\n    \"\"\"\n\n    extracted_features = []\n    task = \"daily briefing\"\n    \n    # Calculate dates based on offsets\n    date_8_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=8)\n    date_8_days_later = date_8_days_later.strftime(\"%Y-%m-%d\")\n\n    date_15_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=15)\n    date_15_days_later = date_15_days_later.strftime(\"%Y-%m-%d\")\n\n    hours = (8, 11) \n\n    extracted_features.append({\n        \"work\": task,\n        \"days\": [date_8_days_later, date_15_days_later],\n        \"hours\": hours\n    })\n\n    return extracted_features\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its\n              temporal details.  Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"review a performance report\" in line:\n            try:\n                parts = line.split(\"review a performance report\")\n                days_later_str = parts[1].split(\"days later\")[0].strip()\n                \n                if \"16 days later\" in line:\n                    offset_days = 16\n                    task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                    if \"7 in the morning for four hours\" in line:\n                        start_hour = 7\n                        end_hour = 7 + 4\n                        tasks.append({\n                            \"work\": \"review a performance report\",\n                            \"days\": [task_date_str],\n                            \"hours\": (start_hour, end_hour)\n                        })\n                    elif \"7 a.m. until 11 a.m.\" in line:\n                        start_hour = 7\n                        end_hour = 11\n                        tasks.append({\n                            \"work\": \"review a performance report\",\n                            \"days\": [task_date_str],\n                            \"hours\": (start_hour, end_hour)\n                        })\n                    elif \"7 in the morning\" in line:\n                        start_hour = 7\n                        end_hour = 11  #Assuming 4 hours as in other statements\n                        tasks.append({\n                            \"work\": \"review a performance report\",\n                            \"days\": [task_date_str],\n                            \"hours\": (start_hour, end_hour)"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-06-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\"2024-02-16\"],\n    \"hours\": [11, 14]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.  Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"prepare a project summary\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n\n                # Calculate the absolute date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract time details\n                start_time_str = \"5 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").hour\n                end_time = start_time + 2\n                \n                if end_time >= 24:\n                  end_time -= 24\n\n                tasks.append({\n                    \"work\": \"prepare a project summary\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_time, end_time)\n                })\n            except ValueError:\n                # Handle cases where the offset is not a valid integer\n                pass\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Rose: I hope everything is well with you.\",\n    \"Alicia: Hi Rose! Things are pretty hectic at the hospital, but I\u2019m hanging in there. I just wanted to let you know I have to prepare a project summary 11 days later from 5 p.m. until 2 hours after that.\",\n    \"Rose: Oh, that sounds like a big task! I've been busy getting"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-06-17\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2020-06-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-06-26\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"attend a client meeting\" in line and \"six days later\" in line and \"9 in the morning\" in line and \"two hours\" in line:\n            # Calculate the date six days from the conversation date\n            date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            meeting_date = date_object + timedelta(days=6)\n            meeting_date_str = meeting_date.strftime(\"%Y-%m-%d\")\n\n            # Extract the time range\n            start_hour = 9\n            end_hour = 9 + 2\n\n            task = {\n                \"work\": \"attend a client meeting\",\n                \"days\": [meeting_date_str],\n                \"hours\": (start_hour, end_hour)\n            }\n            tasks.append(task)\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2020-05-11\",\n      \"2020-05-12\",\n      \"2020-05-13\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2020-04-20\",\n      \"2020-04-21\",\n      \"2020-04-22\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-20\",\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2020-04-25\",\n      \"2020-04-26\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-04-20\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a product demo\",\n    \"days\": [\n      \"2020-04-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"Finish the gate\",\n    \"days\": [\n      \"2020-04-27\",\n      \"2020-05-03\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2020-04-24\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"creating a budget spreadsheet\",\n    \"days\": [\n      \"2020-04-21\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"composing\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": [\n      18,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-04-29\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (15, 19)\n  },\n  {\n    \"work\": \"preparing for upcoming concerts\",\n    \"days\": [],\n    \"hours\": (15, 19)\n  },\n  {\n    \"work\": \"creating some new music\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"attend a daily huddle\"\n    start_time = 17  # 5 p.m. in 24-hour format\n    duration = 2\n    end_time = start_time + duration\n\n    # Calculate dates\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    # Find all mentions of the task and extract dates\n    dates = []\n    for line in conversation:\n        if task_description in line:\n            if \"15 days\" in line:\n                date = conversation_datetime + timedelta(days=15)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"next two days\" in line:\n                date = conversation_datetime + timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                date = conversation_datetime + timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line:\n                date = conversation_datetime - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"two days ago\" in line:\n                date = conversation_datetime - timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"three days ago\" in line:\n                date = conversation_datetime - timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n    \n    if dates:\n"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-05-08\",\n      \"2020-05-09\",\n      \"2020-05-10\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-18\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-17\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-16\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-15\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-02-28\",\n      \"2024-03-04\",\n      \"2024-03-05\",\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (13, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-27\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2020-05-05\",\n      \"2020-05-07\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2020-05-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"playing a gig at The Blue Note\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    task_details = []\n    work_task = \"draft a press release\"\n    offset_days = 23\n    start_hour = 9\n    end_hour = 11\n\n    try:\n        conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n        task_date = conversation_datetime + timedelta(days=offset_days)\n        task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n        task_details.append({\n            \"work\": work_task,\n            \"days\": [task_date_str],\n            \"hours\": (start_hour, end_hour)\n        })\n    except ValueError:\n        return []\n\n    return task_details\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Are you free to chat for a bit?\",\n    \"Ali: Hey Hugo, I just wanted to let you know I have to draft a press release 23 days later from 9 in the morning for two hours.\",\n    \"Hugo: Hey Ali, that sounds like a lot of work. How's the oud playing going? Are you working on any new compositions?\",\n    \"Ali: It\u2019s been good, actually! I've been trying to incorporate some new rhythms I heard on a recent trip. It's a nice contrast to having to draft a press release, I did that 23 days later.\",\n    \"Hugo: That's wonderful! I love hearing about your musical explorations. It must be really fulfilling to keep those traditions alive, especially with everything happening in the world.\",\n    \"Ali: It is, thanks. I spent 23 days later drafting a press release, which was quite a shift in focus. It\u2019s important work though, getting the word out about performances.\",\n    \"Hugo: Definitely. Communication is key, isn't it? I'"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-05-12\",\n      \"2020-05-12\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2020-05-15\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording a podcast episode\",\n    \"days\": [\n      \"2020-05-11\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"recording a podcast episode\",\n    \"days\": [\n      \"2020-05-12\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-05-16\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-05-14\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article for research\",\n    \"days\": [\n      \"2021-01-02\",\n      \"2021-01-03\",\n      \"2021-01-04\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"Work on a new commission for a community center mural\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (16, 19)\n  },\n  {\n    \"work\": \"repainting a wall\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (0, 0)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-02-29\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"attend a daily huddle\"\n    start_hour = 12\n    end_hour = 16  # 12 + 4\n\n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    dates = []\n    for line in conversation:\n        if work_task in line:\n            if \"today\" in line:\n                dates.append(conversation_date)\n            elif \"yesterday\" in line:\n                dates.append((date_obj - timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            elif \"2 days ago\" in line:\n                dates.append((date_obj - timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n            elif \"4 consecutive days\" in line:\n                for i in range(4):\n                    dates.append((date_obj + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n            elif \"in 3 days\" in line:\n                dates.append((date_obj + timedelta(days=3)).strftime(\"%Y-%m-%d\"))\n\n    if dates:\n        tasks.append({\n            \"work\": work_task,\n            \"days\": dates,\n            \"hours\": (start_hour, end_hour)\n        })\n\n    return tasks\n\n# Example usage (using the provided input):\nconversation = [\n    \"Long time no talk!\",\n    \"Camila: Hey Noor! It's been a while. Just wanted to let you know I have to attend a daily huddle starting today, for"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-13\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"check daily emails\" in line:\n            task_description = \"check daily emails\"\n            \n            # Extract date information\n            if \"six days ago\" in line:\n                past_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=6)\n                past_date_str = past_date.strftime(\"%Y-%m-%d\")\n            else:\n                past_date_str = None\n            \n            if \"today\" in line:\n                today_date = datetime.strptime(conversation_date, \"%Y-%m-%d\").strftime(\"%Y-%m-%d\")\n            else:\n                today_date = None\n                \n            days = []\n            if past_date_str:\n                days.append(past_date_str)\n            if today_date:\n                days.append(today_date)\n\n            # Extract time information\n            if \"from 8 in the morning for two hours\" in line:\n                start_hour = 8\n                end_hour = 10\n                hours = (start_hour, end_hour)\n            else:\n                hours = None\n            \n            if days and hours:\n                tasks.append({\n                    \"work\": task_description,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n    \n    return tasks\n\n# Example usage:\nconversation = [\n    \"Anything interesting happen lately?\",\n    \"Camila: Hey Ali! So much has been going on. I had to check daily emails six days ago, and then"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-01-01\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2021-01-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"start a new mural piece\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2021-01-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-01-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"sketching ideas for a mural celebrating local artisans\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"championship qualifier\",\n    \"days\": [\n      \"2024-05-16\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update a project report\"\n    \n    # Find mentions of \"two days later\"\n    for line in conversation:\n        if \"two days later\" in line and work_task in line:\n            # Calculate the absolute date\n            date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            target_date = date_obj + timedelta(days=2)\n            target_date_str = target_date.strftime(\"%Y-%m-%d\")\n            \n            # Extract time details\n            start_time_str = \"3 p.m.\"\n            start_time = datetime.strptime(start_time_str, \"%I %p\").hour\n            end_time = start_time + 3\n\n            task_details.append({\n                \"work\": work_task,\n                \"days\": [target_date_str],\n                \"hours\": (start_time, end_time)\n            })\n\n    return task_details\n\n# Example usage with the provided input\nconversation = [\n    \"Just checking in to see how you\u2019re doing.\",\n    \"Camila: Hey Malik! Just wanted to let you know I have to update a project report two days later from 3 p.m. until three hours after that.\",\n    \"Malik: Hey Camila, that sounds\u2026 involved. How\u2019s the mural coming along, by the way? Still working on the hummingbird section?\",\n    \"Camila: It's getting there! I finished the background yesterday. It\u2019s a really big piece and I\u2019m excited to see it"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-01-10\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"sketching\",\n    \"days\": [\n      \"2021-01-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2021-01-00\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"start a new mural\",\n    \"days\": [\n      \"2021-01-11\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-07-18\",\n      \"2024-07-19\",\n      \"2024-07-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-07-12\",\n      \"2024-07-13\",\n      \"2024-07-14\",\n      \"2024-07-15\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"work on daily planning\",\n    \"days\": [\n      \"2024-03-11\",\n      \"2024-03-26\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"conduct a daily safety check\"\n    \n    # Convert conversation date to datetime object\n    conversation_date_dt = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    dates = []\n    for line in conversation:\n        if work_task in line:\n            if \"yesterday\" in line:\n                dates.append((conversation_date_dt - timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            if \"tomorrow\" in line:\n                dates.append((conversation_date_dt + timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            if \"six days later\" in line:\n                dates.append((conversation_date_dt + timedelta(days=7)).strftime(\"%Y-%m-%d\"))\n    \n    # Extract hours\n    hours = (16, 19)  # 4 p.m. to 7 p.m.\n\n    if dates:\n        tasks.append({\n            \"work\": work_task,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return tasks\n\n# Example Usage:\nconversation = [\n    \"Jin: Anything fun planned for the near future?\",\n    \"Camila: Hey Jin! Actually, things have been pretty busy with work. I had to conduct a daily safety check yesterday, and I\u2019ll need to conduct a daily safety check tomorrow, plus six days later. It takes up a good chunk of my afternoon, from 4 p.m. until 3 hours after that.\",\n    \"Jin: Oh, that sounds"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2021-01-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"new sketches\",\n    \"days\": [\n      \"2021-01-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"incorporating more textures into my next mural\",\n    \"days\": [\n      \"2021-01-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2021-01-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-01-12\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"starting a new mural with a focus on local history\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"commission for a local restaurant\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2021-01-11\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"start a new community project\",\n    \"days\": [\n      \"2021-01-31\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Interview with a journalist\",\n    \"days\": [\n      \"2021-01-16\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"Debuting a new song\",\n    \"days\": [\n      \"2021-01-27\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"Proposing a new mural design to the city council\",\n    \"days\": [\n      \"2021-02-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"Working on an arrangement of an old Billie Holiday song\",\n    \"days\": [\n      \"2021-01-20\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"sketching mural ideas\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Complete an expense report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"safety check\" in line.lower():\n            try:\n                start_days_ago = int(line.lower().split(\"seventeen\")[0].split()[-1])\n                \n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=start_days_ago)\n                dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n\n                if \"3 p.m.\" in line.lower():\n                    start_hour = 15\n                    end_hour = 18\n                else:\n                    start_hour = 0\n                    end_hour = 24  # Assume full day if not specified\n\n                tasks.append({\n                    \"work\": \"Conducting a daily safety check\",\n                    \"days\": dates,\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        elif \"rehearsing a new song\" in line.lower() or \"gig\" in line.lower():\n             try:\n                # Extract the date for 'next week's gig'\n                conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                next_week_date = conversation_date_obj + timedelta(days=7)\n\n                dates = [next_week_date.strftime(\"%Y-%m-%d\")]\n\n                start_hour = 9  # Assuming a typical rehearsal start time\n                end_hour = 17 # Assuming a typical rehearsal end time\n\n                tasks.append({\n                    \"work\": \"Rehearsing a"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2022-02-06\",\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"planning a new expedition route\",\n    \"days\": [\n      \"2022-02-09\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"gear maintenance\",\n    \"days\": [\n      \"2022-02-09\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2022-01-30\",\n      \"2022-02-01\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"plan out my next archaeological tour to Delphi\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2022-01-29\",\n      \"2022-01-31\",\n      \"2022-02-07\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"plan a workshop\",\n    \"days\": [\n      \"2022-03-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-25\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task, days, and hours information.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"monitor social media trends\" in line:\n            task = \"monitor social media trends\"\n            hours = (9, 13)\n\n            # Extract dates\n            days_ago = int(line.split(\" \")[-3])  # Extract the number of days ago\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            days = []\n            for i in range(2):\n                days.append((date - timedelta(days=days_ago + i)).strftime(\"%Y-%m-%d\"))  # Convert to absolute dates\n\n            task_details.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": hours\n            })\n        if \"plan my next archaeological tour\" in line:\n            task = \"plan archaeological tour\"\n            hours = (0, 24)\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            days = [conversation_date]\n            task_details.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": hours\n            })\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2022-01-29\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  },\n  {\n    \"work\": \"summarizing past findings at the Acropolis\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-02-10\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"gather materials for a course on the Peloponnesian War\",\n    \"days\": [\n      \"2022-02-11\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2022-02-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"revisiting Plato\u2019s Republic\",\n    \"days\": [\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\",\n      \"2022-02-10\",\n      \"2022-02-11\",\n      \"2022-02-12\",\n      \"2022-02-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"debut a poem at an open mic night\",\n    \"days\": [\n      \"2022-02-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"client meeting\" in line and \"nine days later\" in line and \"12 p.m.\" in line:\n            task = \"Attend a client meeting\"\n            try:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                offset_days = 9\n                task_date = date_obj + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                start_time_str = \"12 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I p.m.\")\n                start_hour = start_time.hour\n                end_hour = (start_hour + 2) % 24\n                \n                tasks.append({\n                    \"work\": task,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle potential date parsing errors\n\n    return tasks\n\n\nconversation = [\n    \"Good to hear from you, how are things?\",\n    \"Helen: Oh, hi Bianca! Things are quite hectic, actually. I have to attend a client meeting nine days later, from 12 p.m. until two hours after that.\",\n    \"Bianca: That sounds\u2026 involved! I was just thinking about trying a new recipe with truffle oil, something to really tantalize the palate.\",\n    \"Helen: Ooh, truffle"
"```json\n[\n  {\n    \"work\": \"drafting a customer feedback report\",\n    \"days\": [\n      \"2022-02-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2022-02-05\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"giving a small lecture\",\n    \"days\": [\n      \"2022-02-21\",\n      \"2022-02-22\",\n      \"2022-02-23\",\n      \"2022-02-24\",\n      \"2022-02-25\",\n      \"2022-02-26\",\n      \"2022-02-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"preparing for a meeting with the museum director\",\n    \"days\": [\n      \"2022-02-15\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"tackling logistical problems with the excavation site\",\n    \"days\": [\n      \"2022-02-14\",\n      \"2022-02-15\",\n      \"2022-02-16\",\n      \"2022-02-17\",\n      \"2022-02-18\",\n      \"2022-02-19\",\n      \"2022-02-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Responding to customer inquiries\",\n    \"days\": [\n      \"2022-02-15\",\n      \"2022-02-16\",\n      \"2022-02-17\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-07-06\",\n      \"2024-07-07\",\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-28\",\n      \"2024-01-29\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring system performance\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"research on Athenian legal procedures\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"working on a big case\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-16\",\n      \"2024-02-23\"\n    ],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"finish the rough draft of sculpture\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-02-24\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries containing task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"market analysis\" in line:\n            try:\n                # Extract the number of days later\n                days_later = int(line.split(\"eighteen\")[0].split()[-1])\n\n                # Calculate the absolute date\n                task_date = conversation_date + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 8\n                end_hour = start_hour + 2\n\n                tasks.append({\n                    \"work\": \"complete a market analysis\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError):\n                pass\n\n    return tasks\n\n\n# Example usage with the provided input:\nconversation = [\n    \"Yuna: How\u2019s your world?\",\n    \"Helen: Well, it\u2019s been a busy stretch! I had to complete a market analysis eighteen days later, working from 8 in the morning for two hours. It was quite a task juggling that with preparations for my lectures on Pericles.\",\n    \"Yuna: Oh, that sounds intense! I've been trying to come up with some new story ideas to tell my class. Little ones are such a great audience.\",\n    \"Helen: They must be! It's so different from discussing Thucydides with university students. Although, both require a bit of storytelling, I suppose.\",\n    \"Yuna: That's true! It\u2019s all about connecting with people, isn\u2019"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2022-02-22\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"researching interpretations of Thucydides' account of the Peloponnesian War\",\n    \"days\": [\n      \"2022-02-18\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\"2024-02-16\"],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"giving a lecture on Athenian pottery\",\n    \"days\": [\"2024-02-19\"],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2022-02-11\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2022-02-23\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"Training a new ribbon routine\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-19\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  },\n  {\n    \"work\": \"wrestling with some old oak beams\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"coaxing the wood for a newel post\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking routine communications\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2022-07-07\",\n      \"2022-07-09\",\n      \"2022-07-11\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2022-07-03\",\n      \"2022-07-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"cataloging a new collection of Victorian photographs\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2022-06-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"choreographing a new routine\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2022-07-04\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"social media post\" in line:\n            try:\n                # Extract the number of days ago\n                days_ago = int(line.split(\" \")[-2])\n\n                # Calculate the date\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the hours\n                start_hour = 11\n                end_hour = 16  # 4 PM in 24-hour format\n\n                tasks.append({\n                    \"work\": \"create a social media post\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"choreographing a new routine\" in line:\n            tasks.append({\n                \"work\": \"choreographing a new routine\",\n                \"days\": [],\n                \"hours\": ()\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2022-07-11\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"preparing some craft materials\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2022-07-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"working on a new piece for a local exhibition\",\n    \"days\": [\n      \"2022-07-24\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"track daily expenses\" in line:\n            task = \"track daily expenses\"\n            \n            if \"starting in 15 days for 3 consecutive days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=15)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                for i in range(1, 3):\n                    days.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n                hours = (7, 10)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            elif \"tomorrow\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 10)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            elif \"two days after that\" in line:\n                 start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                 days = [start_date.strftime(\"%Y-%m-%d\")]\n                 hours = (7, 10)\n                 tasks.append({\"work\": task, \"days\": days, \"hours\": hours})    \n\n    return tasks\n\n# Example usage (using the provided input):\nconversation = [\n    \"It\u2019s good to connect.\",\n    \"Irina: Hey Evan! Just wanted"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-02-27\",\n      \"2024-02-28\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"analyze daily reports\" in line:\n            task = \"Analyze daily reports\"\n            \n            # Extract dates\n            five_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=5)\n            fifteen_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=15)\n            \n            days = [five_days_later.strftime(\"%Y-%m-%d\"), fifteen_days_later.strftime(\"%Y-%m-%d\")]\n            \n            hours = (10, 14)\n            \n            tasks.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-07-17\",\n      \"2022-07-23\",\n      \"2022-07-25\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2024-07-18\",\n      \"2024-08-02\"\n    ],\n    \"hours\": [\n      14,\n      18\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with work details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    work_details_list = []\n\n    for line in conversation:\n        if \"update an inventory list\" in line:\n            if \"two days later\" in line:\n                task_date = conversation_date + timedelta(days=2)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                if \"11 in the morning\" in line:\n                    start_hour = 11\n                else:\n                    start_hour = None\n                    \n                if \"three hours\" in line:\n                    end_hour = start_hour + 3 if start_hour else None\n                else:\n                    end_hour = None\n                    \n                if start_hour is not None and end_hour is not None:\n                    work_details = {\n                        \"work\": \"update an inventory list\",\n                        \"days\": [task_date_str],\n                        \"hours\": (start_hour, end_hour)\n                    }\n                    work_details_list.append(work_details)\n\n    return work_details_list\n\n# Example Usage:\nconversation = [\n    \"Irina: Hope your week is going well. I just wanted to let you know that I have to update an inventory list two days later from 11 in the morning for three hours.\",\n    \"Adam: That sounds like a meticulous task, Irina! It\u2019s good you\u2019re getting it sorted, though.\",\n    \"Irina: It is, but it needs to be done. I've been practicing a new routine with the ribbon, and it's quite demanding, so having that task hanging over me wasn'"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-03-08\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"organize a community event\" in line:\n            try:\n                parts = line.split(\"from \")\n                time_part = parts[1].split(\" for \")\n                start_time_str = time_part[0]\n                duration_str = time_part[1]\n\n                start_hour = int(start_time_str.split(\" \")[0])\n\n                duration = int(duration_str.split(\" \")[0])\n                end_hour = start_hour + duration\n                \n                offset_days = 10\n                task_date = conversation_date + timedelta(days=offset_days)\n                \n                tasks.append({\n                    \"work\": \"organize a community event\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError):\n                pass \n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2022-07-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2022-07-13\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-07-23\"\n    ],\n    \"hours\": [\n      14,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2022-07-22\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  },\n  {\n    \"work\": \"playing a concert\",\n    \"days\": [\n      \"2022-07-21\"\n    ],\n    \"hours\": (\n      18,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2022-07-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-03-07\",\n      \"2024-03-08\",\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \"2024-03-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \"2024-03-05\",\n      \"2024-03-06\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"receiving a new shipment of 1960s dresses\",\n    \"days\": [\n      \"2024-03-22\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-03-06\",\n      \"2024-03-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Practicing a musical instrument\",\n    \"days\": [\n      \"2024-03-01\",\n      \"2024-02-29\",\n      \"2024-03-11\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"client meeting\" in line.lower():\n            task = \"client meeting\"\n            try:\n                days_ago = int(line.lower().split(\"days ago\")[0].split()[-1])\n                meeting_date = conversation_date - timedelta(days=days_ago)\n                \n                start_hour = 12\n                end_hour_str = line.split(\"until\")[1].split(\"hours\")[0].strip()\n                end_hour = start_hour + int(end_hour_str)\n                \n                tasks.append({\n                    \"work\": task,\n                    \"days\": [meeting_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError):\n                pass  # Handle cases where days_ago or time information is not found\n\n        if \"sourcing\" in line.lower() and \"shop\" in line.lower():\n            task = \"sourcing new pieces for the shop\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (9, 17)  # Assuming a typical workday\n            })\n\n    return tasks\n\n# Example usage (assuming the conversation is stored in a variable called 'conversation'):\nconversation = [\n    \"Rose: What\u2019s on your mind?\",\n    \"Owen: Not much, just finishing up a rather intricate gate. It\u2019s been a good week for commissions, thankfully. How about yourself?\",\n    \"Rose: Well, it feels like ages ago now, but I"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-03-07\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"compile a weekly summary\" in line:\n            task = \"Compile weekly summary\"\n            offset_days = -8\n            date = conversation_date + timedelta(days=offset_days)\n            date_str = date.strftime(\"%Y-%m-%d\")\n            start_hour = 11\n            end_hour = start_hour + 4\n            tasks.append({\n                \"work\": task,\n                \"days\": [date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"practice\" in line and \"tournament\" in line:\n            task = \"Team practice for tournament\"\n            date = conversation_date\n            date_str = date.strftime(\"%Y-%m-%d\")\n            tasks.append({\n                \"work\": task,\n                \"days\": [date_str],\n                \"hours\": (9, 17)\n            })\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"rehearsals for the new play\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a product demo\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"pricing new arrivals\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      null,\n      null\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-03-21\",\n      \"2024-03-22\",\n      \"2024-03-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article for a new inventory system\",\n    \"days\": [\n      \"2024-03-21\",\n      \"2024-03-22\",\n      \"2024-03-23\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with work details, or an empty list if no task is found.\n    \"\"\"\n\n    work_details = []\n    task_keywords = [\"review\", \"feedback\", \"sourcing\", \"filming\", \"project\", \"document\"]\n\n    for line in conversation:\n        for keyword in task_keywords:\n            if keyword in line.lower():\n                if \"review daily feedback\" in line.lower() or \"reviewing daily feedback\" in line.lower():\n                    try:\n                        # Extract temporal information\n                        days_ago = int(line.lower().split(\"eleven days ago\")[0].split()[-1])\n                        duration = 4\n                        start_time = 15  # 3 p.m.\n                        end_time = start_time + 4\n\n                        # Calculate the start date\n                        start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                        days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n\n                        work_details.append({\n                            \"work\": \"Reviewing daily feedback\",\n                            \"days\": days,\n                            \"hours\": (start_time, end_time)\n                        })\n                    except:\n                        pass\n\n                elif \"filming\" in line.lower() or \"project\" in line.lower():\n                    work_details.append({\n                        \"work\": \"Working on a new project about traditional artisans\",\n                        \"days\": [conversation_date],\n                        \"hours\": (9, 17)\n                    })\n\n    return work_details\n\n# Example usage with the provided conversation:\nconversation = [\n    \"It feels like ages since we last spoke.\",\n    \"Rose: Hey Hugo! It's been a bit hectic here."
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-03-17\",\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-03-13\",\n      \"2024-03-15\",\n      \"2024-03-21\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2024-03-16\",\n      \"2024-03-22\"\n    ],\n    \"hours\": [\n      14,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-03-20\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"host a 1960s themed fashion show\",\n    \"days\": [\n      \"2024-04-08\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  },\n  {\n    \"work\": \"layout for a new exhibit on Victorian fashion photography\",\n    \"days\": [\n      \"2024-03-25\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-03-25\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-03-15\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  },\n  {\n    \"work\": \"source new pieces for the store\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      10,\n      17\n    ]\n  },\n  {\n    \"work\": \"work on a new briefcase design\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-03-24\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-03-23\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-03-17\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  },\n  {\n    \"work\": \"post photos on the shop\u2019s instagram\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      18,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-16\",\n      \"2024-02-16\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2020-03-23\",\n      \"2020-03-24\",\n      \"2020-03-25\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    results = []\n    for line in conversation:\n        if \"review project metrics\" in line:\n            try:\n                # Extract the number of days ago the review started\n                days_ago = int(line.split(\" \")[-3])\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                \n                # The review lasted for four consecutive days\n                dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(4)]\n                \n                # The review started at 8 AM and lasted for 2 hours\n                hours = (8, 10)\n\n                results.append({\n                    \"work\": \"review project metrics\",\n                    \"days\": dates,\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass\n\n        if \"new contemporary piece\" in line or \"preparing for another big role\" in line:\n            results.append({\n                \"work\": \"preparing for new role\",\n                \"days\": [],\n                \"hours\": []\n            })\n    \n    return results\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Take a midday walk to prepare for the emotional weight of the role in \\\"Tosca\\\"\",\n    \"days\": [\n      \"2024-02-04\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-03-19\",\n      \"2020-03-22\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a client meeting\",\n    \"days\": [\n      \"2020-03-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"editing footage from an expedition\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"practicing for a new opera role\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries containing the extracted features.  Returns an empty list if no task is found.\n    \"\"\"\n\n    results = []\n    work_task = \"analyze sales data\"\n    \n    for line in conversation:\n        if work_task in line.lower():\n            if \"3 p.m.\" in line.lower():\n                start_time_str = \"15:00\"\n                end_time = datetime.strptime(start_time_str, \"%H:%M\") + timedelta(hours=4)\n                end_time_str = end_time.strftime(\"%H:%M\")\n                end_hour = int(end_time_str.split(\":\")[0])\n                start_hour = int(start_time_str.split(\":\")[0])\n                \n                date = conversation_date\n                results.append({\n                    \"work\": work_task,\n                    \"days\": [date],\n                    \"hours\": (start_hour, end_hour)\n                })\n    \n    return results\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Good to hear from you, how are you?\",\n    \"Alessia: Hi Victoria! It\u2019s going well, though I\u2019ve been really busy. I had to analyze sales data today from 3 p.m. until 4 hours after that, and it took a lot out of me.\",\n    \"Victoria: Oh, that sounds like a lot of work, Alessia! I\u2019m doing pretty well myself, just wrapping up some research for a new exhibit.\",\n    \"Alessia: That's amazing! What's the exhibit about? I'm glad I got the analyze sales data done, although I'm exhausted.\",\n    \"Victoria: It\u2019s focusing on pre-Raphaelite paintings, which"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2020-03-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-03-28\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-03-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"rehearsal\",\n    \"days\": [\n      \"2020-03-23\"\n    ],\n    \"hours\": (\n      12,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2020-03-15\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"finish a new wallet design\",\n    \"days\": [\n      \"2020-04-04\",\n      \"2020-04-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"rehearsals for *La Traviata*\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2020-03-29\",\n      \"2020-03-30\",\n      \"2020-03-31\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-04-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor website analytics\" in line:\n            utterance = line.split(\": \", 1)[1]\n            \n            if \"two days ago\" in utterance:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (15, 19)  # 3 p.m. + 4 hours\n                tasks.append({\"work\": \"monitor website analytics\", \"days\": days, \"hours\": hours})\n            elif \"tomorrow\" in utterance:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (15, 19)  # 3 p.m. + 4 hours\n                tasks.append({\"work\": \"monitor website analytics\", \"days\": days, \"hours\": hours})\n            elif \"the day after tomorrow\" in utterance:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (15, 19)  # 3 p.m. + 4 hours\n                tasks.append({\"work\": \"monitor website analytics\", \"days\": days, \"hours\": hours})\n    \n    return tasks\n\n# Example Usage (with the provided input):\nconversation = [\n    \"Feeling good today, you?\",\n    \"Alessia: Hey Dominic! I've been really busy \u2013 I started to monitor website analytics two days ago, for three consecutive days"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2020-04-06\",\n      \"2020-04-07\",\n      \"2020-04-08\",\n      \"2020-04-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    \n    for line in conversation:\n        if \"routine inspections\" in line.lower():\n            # Extract dates\n            base_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            date1 = base_date + timedelta(days=8)\n            date2 = base_date + timedelta(days=19)\n            date3 = base_date + timedelta(days=35)\n            dates = [date1.strftime(\"%Y-%m-%d\"), date2.strftime(\"%Y-%m-%d\"), date3.strftime(\"%Y-%m-%d\")]\n\n            # Extract hours\n            hours = (11, 15)  # 11 AM to 4 PM (11 + 4 hours)\n\n            task_details.append({\n                \"work\": \"Routine Inspections\",\n                \"days\": dates,\n                \"hours\": hours\n            })\n        if \"preparing for a new production\" in line.lower():\n            task_details.append({\n                \"work\": \"Preparing for a new Verdi opera production\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)  # Assuming a standard workday, though not explicitly stated\n            })\n\n    return task_details\n\n# Example usage:\nconversation = [\n    \"Hailey: How are things on your end?\",\n    \"Alessia: Oh, hello Hailey! Things are keeping me busy. I had to conduct routine inspections 8 days later, and then again 11 days later, and once more 16 days later, all from 11 in the morning for four hours. It was quite a bit to handle alongside rehearsals, but it\u2019s done now!\",\n    \"Hailey: That sounds like a lot to juggle with your singing!"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-04\",\n      \"2024-03-07\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"rehearsals for a new production of \u2018La Traviata\u2019\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-04-05\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2020-04-08\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries containing task details.  Empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"deliver a training session\" in line.lower():\n            if \"20 days later\" in line.lower():\n                task_date = conversation_date + timedelta(days=20)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                if \"1 p.m.\" in line:\n                    start_hour = 13\n                    end_hour = 15  # Two hours after 1 p.m. is 3 p.m.\n                else:\n                    start_hour = None\n                    end_hour = None\n                    \n                tasks.append({\n                    \"work\": \"Deliver a training session on vocal technique\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n    \n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2020-04-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-02-29\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a workshop agenda\" in line:\n            task = \"prepare a workshop agenda\"\n            days_later = int(line.split(\" \")[-2])\n            task_date = conversation_date + timedelta(days=days_later)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            start_time_str = line.split(\"from \")[-1].split(\" until\")[0]\n            start_hour = int(start_time_str.split(\" \")[0]) if \"p.m.\" not in start_time_str else int(start_time_str.split(\" \")[0]) + 12\n\n            end_time_hours = int(line.split(\"until \")[-1].split(\" hours\")[0])\n            end_hour = start_hour + end_time_hours\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"volunteer on weekends teaching coding to kids\" in line:\n            task = \"volunteer teaching coding to kids\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [\"2024-03-02\", \"2024-03-03\"],\n                \"hours\": (9, 17)\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-04-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-07-27\",\n      \"2024-07-28\",\n      \"2024-07-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a daily review session\",\n    \"days\": [\n      \"2024-07-30\",\n      \"2024-07-31\",\n      \"2024-08-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting routine inspections\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"maintain a training schedule\" in line:\n            task = \"Maintain training schedule\"\n            # Extract the time\n            hours = (13, 15)  # 1 p.m. to 2 hours after that is 3 p.m.\n            \n            # Calculate the dates\n            date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            date1 = date_obj - timedelta(days=22)\n            date2 = date_obj - timedelta(days=18)\n            \n            tasks.append({\n                \"work\": task,\n                \"days\": [date1.strftime(\"%Y-%m-%d\"), date2.strftime(\"%Y-%m-%d\")],\n                \"hours\": hours\n            })\n        elif \"finalizing some of the descriptions for the artifacts\" in line:\n            task = \"Finalize artifact descriptions\"\n            hours = (9, 17)  # Assuming a standard workday\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date],\n                \"hours\": hours\n            })\n        elif \"having some issues with lenders and loan agreements\" in line:\n            task = \"Handle lender/loan agreement issues\"\n            hours = (9, 17)  # Assuming a standard workday\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date],\n                \"hours\": hours\n            })\n\n    return tasks\n```\n```output\n[\n  {\n    \"work\": \"Maintain training schedule\",\n    \"days\": [\n      \"2024-0"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-05\",\n      \"2024-03-06\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-07-25\",\n      \"2024-08-01\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"working on the proposal\",\n    \"days\": [\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a contract\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-07-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"work on an exhibit about Victorian jewellery\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"character development for a play\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"documenting the coral reefs off the coast of Fiji\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-07-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-07-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-07-28\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-08-11\",\n      \"2024-08-12\",\n      \"2024-08-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    work_tasks = []\n    for line in conversation:\n        if \"review project metrics\" in line:\n            task = \"review project metrics\"\n            days_ago = int(line.split(\"six days ago\")[0].split()[-1])\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n            hours = (15, 18)  # 3 p.m. to 3 hours after that\n\n            work_tasks.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": hours\n            })\n    return work_tasks\n# Example Usage:\nconversation = [\n    \"Is now a good time to talk?\",\n    \"Victoria: Hi Dominic! Just wanted to let you know, I started to review project metrics six days ago, and I did that for three consecutive days, from 3 p.m. until 3 hours after that.\",\n    \"Dominic: Victoria, it's lovely to hear from you! That sounds like quite a task, diving into all those numbers.\",\n    \"Victoria: It really is! It's a necessary part of the job though, making sure everything is running smoothly for the exhibition. Have you been working on any exciting new builds lately?\",\n    \"Dominic: I have, actually. I'm restoring an old fishing boat, a real beauty. It's taking a lot of patience and careful work, making sure I respect the original design.\",\n    \"Victoria: That sounds incredible! I admire your dedication to preserving those traditional skills. It's important work.\",\n    \"Dominic: Thank you, Victoria. It's a passion of mine, keeping those techniques alive"
"```json\n[\n  {\n    \"work\": \"work on daily planning\",\n    \"days\": [\n      \"2024-08-12\",\n      \"2024-08-13\",\n      \"2024-08-14\",\n      \"2024-08-15\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-08-04\",\n      \"2024-08-13\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"preparing for a small exhibition of local artists\",\n    \"days\": [\n      \"2024-09-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-03\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"manage a daily work schedule\"\n    \n    dates = []\n    offset_days = [-3, -2, 2, 2, 2]\n    \n    for offset in offset_days:\n        date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset)\n        dates.append(date.strftime(\"%Y-%m-%d\"))\n        \n    hours = (8, 10)\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": dates,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"Attend daily huddle\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"Trip to an antique fair\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"Looking at sketches for a new exhibition\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      18\n    )\n  },\n  {\n    \"work\": \"Sourcing original frames for paintings\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-08-02\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"visit a small antique fair\",\n    \"days\": [\n      \"2024-08-12\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.  \n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a workshop agenda\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n                \n                # Calculate the absolute date\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                # Extract start and end times\n                start_time_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = datetime.strptime(start_time_str, \"%I %p\").hour\n                end_hour = start_hour + 4\n                hours = (start_hour, end_hour)\n                \n                tasks.append({\n                    \"work\": \"prepare a workshop agenda\",\n                    \"days\": [task_date_str],\n                    \"hours\": hours\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error processing line: {line}. Error: {e}\")\n                continue\n\n    return tasks\n\n# Example Usage with the provided input:\nconversation = [\n    \"How are you feeling today?\",\n    \"Victoria: Hey Xavier! I'm alright, a bit swamped though. I have to prepare a workshop agenda 18 days later from 11 in the morning for four hours.\",\n    \"Xavier: That sounds like a lot to juggle, Victoria! Anything interesting happening at the museum these days?\",\n    \"Victoria: Actually,"
"```json\n[\n  {\n    \"work\": \"organize a workshop about the conservation of Victorian-era textiles\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-08-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-08-06\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"prepping for a small exhibit of Victorian jewelry\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_task_and_time(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"record a tutorial video\" in line:\n            try:\n                parts = line.split(\"six days later\")\n                time_info = parts[1].strip()\n                \n                start_time_str = time_info.split(\"from \")[1].split(\" for \")[0]\n                duration_str = time_info.split(\"for \")[1].split(\" hours\")[0]\n                \n                start_hour = int(start_time_str.split(\" \")[0])\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n                \n                task_date = conversation_date + timedelta(days=6)\n                \n                tasks.append({\n                    \"work\": \"record a tutorial video\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError) as e:\n                print(f\"Error parsing time information: {e}\")\n                continue\n    return tasks\n\n# Example Usage (with the provided conversation):\nconversation = [\n    \"How\u2019s everything progressing?\",\n    \"Victoria: Hey Ethan! Things have been pretty hectic. I had to record a tutorial video six days later, right from 8 in the morning for three hours.\",\n    \"Ethan: Oh, that sounds intense! I've been wrestling with some really tricky coding issues myself"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-08-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a research paper\",\n    \"days\": [\n      \"2024-08-11\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"prepping for a Victorian-era jewellery exhibit\",\n    \"days\": [\n      \"2024-08-12\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2021-11-22\",\n      \"2021-11-23\",\n      \"2021-11-24\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Identifies a work-related task and extracts its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n\n    results = []\n    for line in conversation:\n        if \"meeting\" in line and \"days ago\" in line:\n            try:\n                days_ago = int(line.split(\"days ago\")[0].split()[-1])\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                end_date = start_date + timedelta(days=4)\n                dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(4)]\n                hours = (7, 11)\n                results.append({\n                    \"work\": \"Virtual meeting\",\n                    \"days\": dates,\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass\n        if \"dessert recipe\" in line and \"precision\" in line:\n            results.append({\n                   \"work\": \"Perfecting a new dessert recipe\",\n                   \"days\": [conversation_date],\n                   \"hours\": (9, 17)  # Assuming a standard workday\n            })\n        if \"tasting menu\" in line and \"textures\" in line:\n            results.append({\n                \"work\": \"Developing a tasting menu based on 'textures'\",\n                \"days\": [conversation_date],\n                \"hours\": (9,17)\n            })\n        if \"competitions\" in line and \"Europe\" in line:\n            results.append({\n                \"work\": \"Competitions in Europe and World Championships\",\n                \"days\": [],  # No specific dates mentioned\n                \"hours\": (9, 17)\n            })\n    return results\n```\n"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2021-11-29\",\n      \"2021-11-30\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"rehearsals for a new play\",\n    \"days\": [\"2024-02-26\"],\n    \"hours\": [9, 17]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-11-24\",\n      \"2021-11-25\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2021-11-22\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"vaccination campaign\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\nconversation = [\n    \"How\u2019s everything going?\",\n    \"Hailey: Hey Helen! Things are pretty good, just letting you know I had to analyze sales data fourteen days ago from 7 in the morning for four hours. It was a bit of a break from snowboarding, honestly.\",\n    \"Helen: Oh, that sounds\u2026 thorough, Hailey! I've been buried in research myself, trying to piece together some fragmented inscriptions. It's fascinating but can be incredibly painstaking.\",\n    \"Hailey: I bet! Dealing with ancient stuff must be much more interesting than spreadsheets. Are you planning any trips to any interesting digs soon?\",\n    \"Helen: Actually, yes! I'm hoping to lead a small group to Crete next spring.\",\n    \"There\u2019s a Minoan site I\u2019ve been wanting to explore further for years.\",\n    \"Hailey: Wow, Crete! That sounds amazing. I've always wanted to visit Greece. Maybe I\u2019ll have to tag along on a tour sometime when I\u2019m not traveling for competitions.\",\n    \"Helen: That would be lovely! We always welcome enthusiastic visitors. It's a truly magical place steeped in history and myth. What about you, any big competitions coming up?\",\n    \"Hailey: I'm training for the Winter X Games in January. It's going to be a big one, so I'm putting in a lot of hours at the slopes.\",\n    \"Helen: That\u2019s fantastic! I admire your dedication. It takes so much courage and skill to do what you do.\",\n    \"Hailey: Thanks, Helen! It\u2019s a lot of fun, but also takes a lot of hard work. It's good to have something to focus on when I'm not analyzing sales data!\",\n    \"Helen: Absolutely. It\u2019s the same with historical research \u2013 a challenging passion that keeps me engaged. Plus, a little variety is always a good thing!\"\n]\n\ndef extract_task_details(conversation):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n    tasks = []\n    today = datetime.now()\n\n    for line in conversation:\n        if \"analyze"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2021-12-01\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"packing for competition\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Write a technical blog post\",\n    \"days\": [\n      \"2024-01-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"Poetry reading\",\n    \"days\": [\n      \"2024-01-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"Finish a collection of poems\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Get board tuned up\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-12-11\",\n      \"2021-12-12\",\n      \"2021-12-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-02-29\".\n\n    Returns:\n        list: A list of dictionaries, each containing the work, days, and hours of the task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"review operational data\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Find mentions of the work task and extract temporal details\n    for line in conversation:\n        if work_task in line:\n            if \"10 days\" in line:\n                start_date = date_obj + timedelta(days=10)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                for i in range(1, 3):\n                    days.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n\n                if \"4 p.m. until 3 hours after that\" in line:\n                    hours = (16, 19)\n                else:\n                    hours = (0, 0)  # Default hours\n\n                tasks.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"yesterday\" in line:\n                start_date = date_obj - timedelta(days=1)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (0, 0)  # Default hours\n                tasks.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"three days ago\" in line:\n                start_date = date_obj - timedelta(days=3)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (0,"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"monitoring quality control metrics\"\n    days = []\n    hours = (7, 9)\n\n    # Calculate the start date\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=20)\n    start_date_str = start_date.strftime(\"%Y-%m-%d\")\n\n    # Add consecutive dates\n    for i in range(4):\n        date = start_date + timedelta(days=i)\n        days.append(date.strftime(\"%Y-%m-%d\"))\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n\n# Example Usage (assuming the conversation date is 2024-01-01)\nconversation = [\n    \"Hailey: What\u2019s on your mind? I just wanted to let you know that I have to monitor quality control metrics starting in 20 days, for 4 consecutive days from 7 in the morning for two hours each day.\",\n    \"Ali: Oh, that sounds\u2026involved! I was just thinking about a new piece I'm working on, trying to capture a certain feeling of longing. It's proving tricky.\",\n    \"Hailey: Music is definitely complex, I can imagine! It's funny how work follows you everywhere, even when you're trying to relax. I\u2019ll be monitoring quality control metrics again in 20 days, specifically.\",\n    \"Ali: It's good you\u2019re thinking ahead. I find that having a clear space in my mind really helps with creativity. It\u2019s so important to take time for yourself.\",\n    \"Hailey: That's so true. I need to remember that! Monitoring quality control metrics will occupy me for those four days, but hopefully there"
"```json\n[\n  {\n    \"work\": \"routine inspections\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2021-12-07\",\n      \"2021-12-12\",\n      \"2021-12-14\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-08\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).  Defaults to \"2024-02-08\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.  \n               Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"monitor social media trends\"\n    \n    # Calculate dates based on offsets\n    date_1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=13)\n    date_2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=33)\n\n    date_1_str = date_1.strftime(\"%Y-%m-%d\")\n    date_2_str = date_2.strftime(\"%Y-%m-%d\")\n    \n    hours = (10, 13)  # 10 AM to 1 PM (3 hours)\n\n    tasks.append({\n        \"work\": task_description,\n        \"days\": [date_1_str, date_2_str],\n        \"hours\": hours\n    })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-12-14\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-12-04\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"performing at a small venue\",\n    \"days\": [\n      \"2021-12-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-01-30\",\n      \"2024-01-31\",\n      \"2024-02-01\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"workshop\" in line.lower() and \"days later\" in line.lower():\n            try:\n                days_later = int(line.lower().split(\"days later\")[0].split()[-1])\n                task_date = conversation_date + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_str = line.lower().split(\"from \")[1].split(\" in the \")[0]\n                start_hour = int(start_time_str.split(\" \")[0])\n                if \"pm\" in start_time_str:\n                    start_hour += 12\n                elif \"am\" in start_time_str and start_hour == 12:\n                    start_hour = 0\n\n                end_hour = start_hour + 4\n\n\n                tasks.append({\n                    \"work\": \"organize a snowboard workshop\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError):\n                pass # Handle cases where parsing fails\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Julia: I'm all ears if you need to vent.\",\n    \"Hailey: Hey Julia, things have been pretty hectic! I\u2019ve been scheduled to organize a workshop 23 days later, from 3 in the afternoon until 4 hours after that. It\u2019s going to be a lot of work getting everything ready.\",\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"compile a weekly summary\" in line:\n            # Extract the number of days ago\n            try:\n                days_ago = int(line.split(\" \")[-3])\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            except ValueError:\n                task_date_str = conversation_date\n\n            # Extract the time range\n            start_hour = 7\n            end_hour = start_hour + 2\n\n            tasks.append({\n                \"work\": \"Compile weekly summary\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"prepping for a winter expedition\" in line:\n            tasks.append({\n                \"work\": \"Prepping for a winter expedition\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 23)\n            })\n        if \"training\" in line or \"competition\" in line:\n            tasks.append({\n                \"work\": \"Training for competition\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 23)\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-12-08\",\n      \"2021-12-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2021-12-10\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-17\",\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2023-10-15\",\n      \"2023-10-16\",\n      \"2023-10-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-07-13\",\n      \"2024-07-14\",\n      \"2024-07-15\",\n      \"2024-07-16\"\n    ],\n    \"hours\": (14, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2023-10-06\",\n      \"2023-10-08\",\n      \"2023-10-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2023-10-07\",\n      \"2023-10-11\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-10-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-10-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2023-10-12\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2023-10-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-10-08\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2023-10-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"planning a workshop for the local youth center\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"preliminary research for a story\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-10-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2023-10-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-10-08\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-10-27\",\n      \"2023-10-28\",\n      \"2023-10-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-10-24\",\n      \"2023-10-25\",\n      \"2023-10-26\",\n      \"2023-10-27\"\n    ],\n    \"hours\": [\n      13,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor website analytics\" in line.lower():\n            task = \"monitor website analytics\"\n            days = []\n            hours = (13, 15)\n\n            # Extract dates based on relative time expressions\n            if \"nine days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=9)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"six days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=6)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        elif \"preparing for a concert\" in line.lower():\n            task = \"rehearsal for concert\"\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n            days = [date.strftime(\"%Y-%m-%d\")]\n            hours = (9, 17)\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2023-10-20\",\n      \"2023-10-22\"\n    ],\n    \"hours\": [\n      9,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a budget proposal\",\n    \"days\": [\n      \"2023-10-23\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"wrestling with a balance spring\",\n    \"days\": [\n      \"2023-10-31\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-10-31\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.  \n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"market analysis\" in line.lower():\n            try:\n                # Extract date information\n                date_offset = \"two days ago\"\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                if date_offset == \"two days ago\":\n                    task_date = date_obj - timedelta(days=2)\n                    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract time information\n                start_time_str = \"4 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I p.m.\").time()\n                start_hour = start_time.hour\n                duration_hours = 3\n                end_hour = (start_hour + duration_hours) % 24\n                hours = (start_hour, end_hour)\n\n                tasks.append({\n                    \"work\": \"market analysis\",\n                    \"days\": [task_date_str],\n                    \"hours\": hours\n                })\n            except ValueError as e:\n                print(f\"Error parsing date or time: {e}\")\n\n        if \"finish a wallet\" in line.lower() or \"stitching\" in line.lower():\n            try:\n                # Extract date information\n                date_offset = \"last week\"\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                if date_offset == \"last week\":\n                    task_date = date_obj - timedelta(days=7)\n                    task_date_str = task_date.strftime(\"%Y-%m-%d\")"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2023-11-02\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-10-26\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2023-10-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-01-23\",\n      \"2024-01-24\",\n      \"2024-01-25\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-01-18\",\n      \"2024-01-19\",\n      \"2024-01-20\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                               Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    \n    task_details = []\n    work_task = \"attend a virtual meeting\"\n    \n    # Calculate dates\n    conversation_date = datetime.strptime(date, \"%Y-%m-%d\")\n    tomorrow = conversation_date + timedelta(days=1)\n    five_days_later = conversation_date + timedelta(days=5)\n\n    days = [tomorrow.strftime(\"%Y-%m-%d\"), five_days_later.strftime(\"%Y-%m-%d\")]\n    hours = (11, 14)  # 11 AM to 2 PM (11 + 3 hours)\n    \n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2022-03-21\",\n      \"2022-03-22\",\n      \"2022-03-24\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"restore '57 Chevy\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"decipher data from ocean sampling\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"present evidence to policymakers\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2022-03-12\",\n      \"2022-03-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-03-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-03-22\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"finalizing the wine list for a special event\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-03-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"reorganize the local history section at the library\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2022-03-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"car restoration\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"planning a small exhibition\",\n    \"days\": [\n      \"2022-04-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"tinkering with a '57 Chevy\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-03-17\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"designing new collection\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"restoration projects\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"bodywork on Chevy\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"working on the engine of Chevy\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"sewing\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2022-03-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"client presentation\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"1967 Mustang restoration\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"organize a community event\" in line:\n            task = \"organize a community event\"\n            \n            # Extract date information\n            seventeen_days_ago = conversation_date - timedelta(days=17)\n            event_date = seventeen_days_ago.strftime(\"%Y-%m-%d\")\n            \n            # Extract time information\n            if \"3 p.m.\" in line and \"4 hours after that\" in line:\n                start_hour = 15\n                end_hour = 15 + 4\n                hours = (start_hour, end_hour)\n            elif \"7 in the evening\" in line:\n                start_hour = 15\n                end_hour = 19\n                hours = (start_hour, end_hour)\n            else:\n                hours = (0, 0)\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [event_date],\n                \"hours\": hours\n            })\n        elif \"restoring cars\" in line:\n            task = \"restoring cars\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [],  # No specific date mentioned\n                \"hours\": (0, 0)\n            })\n        elif \"preparing my students for an upcoming tournament\" in line:\n            task = \"preparing students for a tournament\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [],  # No specific date mentioned\n                \"hours"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2022-03-12\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"restore a '67 Mustang\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-23\",\n      \"2022-03-24\",\n      \"2022-03-25\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\",\n      \"2022-03-30\",\n      \"2022-03-31\",\n      \"2022-04-01\",\n      \"2022-04-02\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2022-03-28\",\n      \"2022-04-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record daily observations\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-04-02\",\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  },\n  {\n    \"work\": \"work on '57 Chevy\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  },\n  {\n    \"work\": \"finishing engine work on the car\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-03-08\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"revise a contract\" in line:\n            # Extract temporal information\n            if \"18 days later from today\" in line:\n                days = [date_obj + timedelta(days=18)].strftime(\"%Y-%m-%d\")\n                hours = (7, 9)\n                tasks.append({\n                    \"work\": \"revise a contract\",\n                    \"days\": [days],\n                    \"hours\": hours\n                })\n            elif \"in 2 days\" in line:\n                start_date = date_obj + timedelta(days=2)\n                dates = [start_date + timedelta(days=i) for i in range(3)]\n                dates_str = [date.strftime(\"%Y-%m-%d\") for date in dates]\n                hours = (7, 9)\n                tasks.append({\n                    \"work\": \"revise a contract\",\n                    \"days\": dates_str,\n                    \"hours\": hours\n                })\n            elif \"yesterday\" in line:\n                yesterday = date_obj - timedelta(days=1)\n                yesterday_str = yesterday.strftime(\"%Y-%m-%d\")\n                hours = (7, 9)\n                tasks.append({\n                    \"work\": \"revise a contract\",\n                    \"days\": [yesterday_str],\n                    \"hours\": hours\n                })\n            elif \"today\" in line:\n                today = date_obj\n                today_str = today.strftime(\"%Y-%m-%d\")\n                hours = (7, 9)\n                tasks.append({\n                    \"work\": \"revise a contract\",\n                    \"days\": [today"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2022-03-30\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2022-03-30\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"organizing a workshop for families\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\",\n      \"2022-03-30\",\n      \"2022-03-31\",\n      \"2022-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-04-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"restore a '67 Mustang\",\n    \"days\": [\n      \"2022-04-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"restoring a '67 Mustang\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"eSports training / prepping for a regional qualifier\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-03-25\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its temporal details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"record a podcast episode 16 days later\" in line:\n            try:\n                start_time_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = int(start_time_str.split(\":\")[0])\n                end_hour = start_hour + 4\n                \n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=16)\n                task_date = date_obj.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"record a podcast episode\",\n                    \"days\": [task_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error processing line: {line}. Error: {e}\")\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2023-12-22\",\n      \"2023-12-23\",\n      \"2023-12-24\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2023-12-25\",\n      \"2023-12-26\",\n      \"2023-12-27\",\n      \"2023-12-28\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2023-12-19\",\n      \"2023-12-23\",\n      \"2023-12-28\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"responding to customer inquiries\",\n    \"days\": [\n      \"2023-12-17\",\n      \"2023-12-19\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"collaborative mural project\",\n    \"days\": [\n      \"2024-02-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with work details, or an empty list if none are found.\n    \"\"\"\n\n    work_details = []\n    for line in conversation:\n        if \"social media post\" in line:\n            try:\n                # Extract the relative time expression\n                time_expr = line.split(\"from \")[1].split(\" until \")[0]\n                start_hour = int(time_expr.split(\" p.m.\")[0].split(\" \")[0])\n                duration_hours = int(line.split(\"until \")[1].split(\" hours\")[0])\n                end_hour = start_hour + duration_hours\n                \n                # Calculate the date\n                date_str = conversation_date\n                date_obj = datetime.strptime(date_str, \"%Y-%m-%d\")\n                days_ago = 3\n                task_date = date_obj - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                work_details.append({\n                    \"work\": \"creating a social media post\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing time or date: {e}\")\n\n        if \"securing funding for our winter program\" in line:\n            work_details.append({\n                \"work\": \"securing funding for our winter program\",\n                \"days\": [],\n                \"hours\": (0, 24) \n            })\n    return work_details\n\n# Example Usage (assuming the conversation date is 2024-01-26)\nconversation = [\n    \"Noor: Hey Bianca! I was just telling myself about how much I've been doing lately. I had to create a social media post three days ago"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2023-12-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-12-16\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-12-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"village health education session\",\n    \"days\": [\n      \"2024-01-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-12-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a proposal document\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Identifies a work-related task and extracts its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"workshop\" in line.lower() and \"organize\" in line.lower():\n            # Extract temporal information\n            days_ago = 5\n            start_hour = 11\n            duration_hours = 2\n            end_hour = start_hour + duration_hours\n\n            # Calculate the date\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            task_date = conversation_datetime - timedelta(days=days_ago)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            \n            tasks.append({\n                \"work\": \"organize a workshop\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n    return tasks\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"client meeting\" in line.lower():\n            try:\n                parts = line.split()\n                days_ago = int(parts[parts.index(\"days\") - 1])\n                task_date = conversation_date - timedelta(days=days_ago)\n                start_hour = int(parts[parts.index(\"from\") + 1].split(\"in\")[0])\n                duration = int(parts[parts.index(\"for\") + 1].split(\"hours\")[0])\n                end_hour = start_hour + duration\n\n                task = {\n                    \"work\": \"client meeting\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour),\n                }\n                tasks.append(task)\n            except (ValueError, IndexError):\n                pass\n\n    return tasks\n\n\n# Example usage with the provided input:\nconversation = [\n    \"Noor: Hey Greta! I\u2019ve been alright, a bit tired actually. I had to attend a client meeting sixteen days ago from 7 in the morning for three hours. It was quite a day!\",\n    \"Greta: Hi Noor! That\u2019s good to hear you're doing okay. I've been kept busy with some research, it's always something new.\",\n    \"Noor: That sounds interesting! My work can be all-consuming sometimes, but it\u2019s good to know you\u2019re making a difference. I\u2019m glad to feel like I'm helping.\",\n    \"Greta: Absolutely"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"check system alerts\"\n    start_hour = 15\n    end_hour = 17\n    hours = (start_hour, end_hour)\n\n    dates = []\n    today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if work_task in line:\n            if \"today\" in line:\n                dates.append(conversation_date)\n            elif \"yesterday\" in line:\n                dates.append((today - timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            elif \"two days ago\" in line:\n                dates.append((today - timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n            elif \"three days ago\" in line:\n                dates.append((today - timedelta(days=3)).strftime(\"%Y-%m-%d\"))\n            elif \"tomorrow\" in line:\n                dates.append((today + timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            elif \"next week\" in line:\n                dates.append((today + timedelta(days=7)).strftime(\"%Y-%m-%d\"))\n            \n    if dates:\n        tasks.append({\n            \"work\": work_task,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Noor: Hey Evan! Just wanted to say hi. I've been really busy lately \u2013 I have to check system alerts starting today, for 3 consecutive days, from"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-01-07\",\n      \"2024-01-08\",\n      \"2024-01-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2023-12-31\",\n      \"2024-01-08\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-01-03\",\n      \"2024-01-05\",\n      \"2024-01-07\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring social media trends\",\n    \"days\": [\n      \"2023-12-30\",\n      \"2024-01-04\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Scheduling an interview\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (13, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-01-11\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"meeting with a potential investor\",\n    \"days\": [\n      \"2023-12-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-12-29\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-01-01\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"product demo\" in line.lower():\n            try:\n                time_str = line.split(\"from \")[1].split(\" for \")[0]\n                hour = int(time_str.split(\" \")[0])\n                duration_str = line.split(\"for \")[1].split(\" \")[0]\n                duration = int(duration_str)\n                demo_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=9)\n                demo_date_str = demo_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"product demo for educational software\",\n                    \"days\": [demo_date_str],\n                    \"hours\": (hour, hour + duration)\n                })\n            except:\n                pass\n        if \"workshop\" in line.lower() and \"next month\" in line.lower():\n            try:\n                current_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                next_month = current_date.month + 1\n                next_year = current_date.year\n                if next_month > 12:\n                    next_month = 1\n                    next_year += 1\n                workshop_date = datetime(next_year, next_month, 1).strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"organizing a workshop\",\n                    \"days\": [workshop_date],\n                    \"hours\": (9, 17)  # Assuming a typical workday\n                })\n            except:\n                pass\n\n    return tasks\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"review a research paper\" in line:\n            try:\n                # Extract the temporal information\n                days_offset = int(line.split(\" sixteen days later\")[0].split()[-2])\n                start_time_str = line.split(\"from \")[1].split(\" in the morning\")[0]\n                start_hour = int(start_time_str)\n                duration_hours = int(line.split(\"for \")[1].split(\" hours\")[0])\n                end_hour = start_hour + duration_hours\n\n                # Convert the relative date to an absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                task_details.append({\n                    \"work\": \"review a research paper\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except Exception as e:\n                print(f\"Error extracting task details: {e}\")\n                return []  # Return an empty list if parsing fails\n\n    return task_details\n\n# Example usage (assuming the input is already in the specified format)\nconversation = [\n    \"Hugo: I hope things are well.\",\n    \"Noor: Hi Hugo! Things are good, though I just wanted to let you know I have to review a research paper sixteen days later from 7 in the morning for four hours. It's a bit of"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-01-10\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with work details.\n    \"\"\"\n    work_details = []\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Identify work tasks and temporal expressions\n    for line in conversation:\n        if \"update a work log\" in line:\n            # Extract days\n            if \"seventeen days ago\" in line:\n                start_date = date_obj - timedelta(days=17)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                for i in range(1, 3):\n                    days.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n            else:\n                days = []\n                \n            # Extract hours\n            if \"from 7 in the morning for four hours\" in line:\n                hours = (7, 11)\n            else:\n                hours = None\n\n            if hours:\n                work_details.append({\n                    \"work\": \"update a work log\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n\n        if \"storytelling\" in line and \"today\" in line and \"from 7 in the morning for four hours\" in line:\n            work_details.append({\n                \"work\": \"storytelling\",\n                \"days\": [conversation_date],\n                \"hours\": (7, 11)\n            })\n            \n        if \"start a unit on storytelling next week\" in line:\n            next_week_date = date_obj + timedelta(days=7)\n            work_details.append({\n                \"work\": \"start a unit on storytelling\",\n                \"days\": [next_week_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": None\n            })\n\n    return work_"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-10-01\",\n      \"2024-10-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-22\",\n      \"2024-02-29\",\n      \"2024-03-05\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"planning a new exhibit\",\n    \"days\": [\n      \"2024-03-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-09-28\",\n      \"2024-10-09\"\n    ],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-10-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_and_temporal_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"team outing\" in line and \"plan\" in line:\n            try:\n                time_phrase = \"six days ago from 7 in the morning for four hours\"\n                offset_days = 6\n                start_hour = 7\n                duration_hours = 4\n                end_hour = start_hour + duration_hours\n\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"plan team outing\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"next week\" in line and \"prepping\" in line:\n            try:\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": \"prepping for class\",\n                    \"days\": [task_date_str],\n                    \"hours\": (9, 17)\n                })\n            except:\n                pass\n\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Good to hear from you, how are things?\",\n    \"Yuna: Oh, hi Yuri! Things are busy as always, but good. I've been completely swamped with work lately \u2013 I had to plan a team outing six days ago from 7 in the morning for four hours.\",\n    "
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-10-06\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"make felt animals\",\n    \"days\": [\n      \"2024-10-28\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  },\n  {\n    \"work\": \"compete\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-10-03\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"nature walk with students\",\n    \"days\": [\n      \"2024-10-14\",\n      \"2024-10-15\",\n      \"2024-10-16\",\n      \"2024-10-17\",\n      \"2024-10-18\",\n      \"2024-10-19\",\n      \"2024-10-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepping for tomorrow\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-10-05\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"preparing for class/story time\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  },\n  {\n    \"work\": \"find a venue for a workshop\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a proposal document\",\n    \"days\": [\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-10-17\",\n      \"2024-10-18\",\n      \"2024-10-19\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-10-22\",\n      \"2024-10-23\",\n      \"2024-10-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"sourcing rare spices\",\n    \"days\": [\n      \"2024-10-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-10-22\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-10-20\",\n      \"2024-10-21\",\n      \"2024-10-23\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update an inventory list\"\n    \n    for line in conversation:\n        if work_task in line:\n            try:\n                # Extract the number of days offset\n                days_offset = int(line.split(\" \")[-3])\n                \n                # Calculate the absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end hours\n                start_hour = int(line.split(\"from \")[1].split(\" \")[0])\n                end_hour = start_hour + 3\n\n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return task_details\n\n# Example usage (using the provided input)\nconversation = [\n    \"Alicia: Everything alright with you?\",\n    \"Yuna: Hi Alicia! Things are pretty busy here. I have to update an inventory list 11 days later from 11 in the morning for three hours.\",\n    \"Alicia: Oh, that sounds like a lot of work. I'm glad the kids are keeping you entertained though! We had a particularly challenging case today, but thankfully everything is looking up now.\",\n    \"Yuna: It is, but it\u2019s rewarding. I love seeing them learn and grow. Did you end up"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-10-18\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"plan some art projects for my class\",\n    \"days\": [\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-10-27\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    for line in conversation:\n        if \"market analysis\" in line.lower() and \"19 days later\" in line.lower():\n            start_date = conversation_date + timedelta(days=19)\n            start_time_str = line.split(\"starting in \")[1].split(\" for\")[0]\n            if \"in the morning\" in start_time_str:\n              start_hour = 11\n            else:\n              start_hour = 9\n\n            duration_str = line.split(\"for \")[1].split(\" hours\")[0]\n            duration = int(duration_str)\n            end_hour = start_hour + duration\n\n            task_details = {\n                \"work\": \"complete a market analysis\",\n                \"days\": [start_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (start_hour, end_hour)\n            }\n            tasks.append(task_details)\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task\n              and contains the keys 'work', 'days', and 'hours'.  Returns an\n              empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"compile a weekly summary\" in line:\n            try:\n                # Extract the number of days later\n                days_later = int(line.split(\" \")[-2])\n                \n                # Calculate the date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 12\n                end_hour = start_hour + 3\n                hours = (start_hour, end_hour)\n\n                tasks.append({\n                    \"work\": \"compile a weekly summary\",\n                    \"days\": [task_date_str],\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass\n        if \"finish this briefcase by next week\" in line:\n            try:\n                # Calculate the date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=7)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                # Extract the time range\n                hours = (9, 17)  # Assuming a standard workday\n\n                tasks.append({\n                    \"work\": \"finish this briefcase\",\n                    \"days\": [task_date_str],\n                    \"hours\": hours\n                "
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-10-15\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct code reviews\",\n    \"days\": [\n      \"2022-11-17\",\n      \"2022-11-18\",\n      \"2022-11-19\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-11-15\",\n      \"2022-11-26\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-04\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"compiling footage for a documentary on coral reefs\",\n    \"days\": [],\n    \"hours\": (0, 0)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Manage daily work schedule\",\n    \"days\": [\n      \"2022-11-18\",\n      \"2022-11-25\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Filming orangutans in Borneo\",\n    \"days\": [\n      \"2022-12-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-11-15\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2022-11-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2022-11-25\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-11-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"preparing for another trip to the Amazon\",\n    \"days\": [\n      \"2022-12-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"prepare a proposal document\" in line:\n            # Extract temporal information\n            if \"today\" in line:\n                days = [conversation_date]\n                hours = (14, 17)  # 2 p.m. to 5 p.m.\n            elif \"2 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                days = [start_date.strftime(\"%Y-%m-%d\"),\n                        (start_date + timedelta(days=1)).strftime(\"%Y-%m-%d\"),\n                        (start_date + timedelta(days=2)).strftime(\"%Y-%m-%d\")]\n                hours = (14, 17)\n            elif \"3 days ago\" in line:\n                past_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                days = [past_date.strftime(\"%Y-%m-%d\")]\n                hours = (14, 17)\n            else:\n                continue\n\n            tasks.append({\n                \"work\": \"Prepare a proposal document\",\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Hope you're having a good day.\",\n    \"Joel: Hey Yuri, just letting you know I had to prepare a proposal document today, working from 2 p.m. until 3 hours after that. It was a busy one!\",\n    \"Yuri: That sounds intense, Joel! What kind of proposal was it for?\",\n    \"Joel: It\u2019s"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-11-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Write a technical blog post\",\n    \"days\": [\n      \"2022-11-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            utterance = line.split(\": \", 1)[1]\n            \n            # Extract temporal information\n            try:\n                offset_days = 2\n                start_time_str = \"3 p.m.\"\n                \n                # Convert start time to 24-hour format\n                start_hour = int(start_time_str.split(\" \")[0])\n                if \"p.m.\" in start_time_str and start_hour != 12:\n                    start_hour += 12\n                elif \"a.m.\" in start_time_str and start_hour == 12:\n                    start_hour = 0\n                \n                duration_hours = 4\n                end_hour = start_hour + duration_hours\n\n                # Calculate the date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n\n                tasks.append({\n                    \"work\": \"Organize a strategy meeting for a new conservation project\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n    return tasks\n\n# Example usage with the provided input\nconversation = [\n    \"How are you feeling today?\",\n    \"Joel: Hey Malik! I\u2019ve been pretty busy lately. I had to"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring system performance\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-05\",\n      \"2024-03-06\",\n      \"2024-03-07\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    \n    # Analyze daily reports\n    if \"analyze daily reports\" in \"\".join(conversation):\n        start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=10)\n        end_date = start_date + timedelta(days=4)\n        dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(4)]\n        task_details.append({\n            \"work\": \"Analyze daily reports\",\n            \"days\": dates,\n            \"hours\": (15, 17)\n        })\n\n    # Editing\n    if \"editing\" in \"\".join(conversation):\n        task_details.append({\n            \"work\": \"Editing\",\n            \"days\": [conversation_date],\n            \"hours\": (None, None)  # Time not specified\n        })\n    \n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2022-12-06\",\n      \"2022-12-12\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2022-12-02\",\n      \"2022-12-05\",\n      \"2022-12-07\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"daily review session\" in line:\n            # Extract temporal information\n            try:\n                date_str_1 = conversation_date\n                date_obj_1 = datetime.strptime(date_str_1, \"%Y-%m-%d\")\n                offset_days_1 = 4\n                review_date_1 = date_obj_1 + timedelta(days=offset_days_1)\n                review_date_str_1 = review_date_1.strftime(\"%Y-%m-%d\")\n\n                date_str_2 = conversation_date\n                date_obj_2 = datetime.strptime(date_str_2, \"%Y-%m-%d\")\n                offset_days_2 = 9\n                review_date_2 = date_obj_2 + timedelta(days=offset_days_2)\n                review_date_str_2 = review_date_2.strftime(\"%Y-%m-%d\")\n                \n                start_hour = 12\n                end_hour = 15\n                \n                tasks.append({\n                    \"work\": \"daily review session\",\n                    \"days\": [review_date_str_1, review_date_str_2],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle potential date parsing errors\n\n        if \"editing\" in line and \"Borneo\" in line:\n            # Extract temporal information\n            try:\n                date_str = conversation_date\n                date_obj = datetime.strptime"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-12-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"filming b-roll footage for a potential documentary\",\n    \"days\": [\n      \"2022-11-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2022-12-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2022-12-03\",\n      \"2022-12-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"prepare a meal\" in line.lower():\n            try:\n                parts = line.split(\"13 days later\")\n                if len(parts) > 1:\n                    date_str = parts[1].strip()\n                    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=13)\n                    date = date_obj.strftime(\"%Y-%m-%d\")\n\n                    time_str = \"5 p.m. until two hours after that\"\n                    start_hour = 17\n                    end_hour = 19\n\n                    tasks.append({\n                        \"work\": \"prepare a meal\",\n                        \"days\": [date],\n                        \"hours\": (start_hour, end_hour)\n                    })\n            except Exception as e:\n                print(f\"Error parsing meal preparation task: {e}\")\n        if \"editing some footage\" in line.lower():\n            try:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                date = date_obj.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"editing some footage\",\n                    \"days\": [date],\n                    \"hours\": (9, 17)\n                })\n\n            except Exception as e:\n                print(f\"Error parsing editing footage task: {e}\")\n\n    return tasks\n\nconversation = [\n    \"Adam: What\u2019s been keeping you busy?\",\n    \"Joel: Well, it\u2019s been a bit hectic! I had to prepare a meal 13 days later, from 5 p.m. until two"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-01-30\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2022-12-07\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"prep for a big trek\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"edit footage about orangutan conservation\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"filming project - rough cut\",\n    \"days\": [\n      \"2025-01-01\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"organizing a children's literature festival\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    results = []\n    for line in conversation:\n        if \"monitor quality control metrics\" in line:\n            # Extract temporal information\n            try:\n                start_date_str = line.split(\"ago\")[0].split(\"days\")[0].strip().split(\" \")[-1]\n                offset_days = int(start_date_str)\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                \n                days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n\n                hours_start, hours_end = 16, 19  # 4 p.m. to 7 p.m.\n                \n                results.append({\n                    \"work\": \"monitor quality control metrics\",\n                    \"days\": days,\n                    \"hours\": (hours_start, hours_end)\n                })\n            except:\n                pass #Handles edge cases in the line \n    return results\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"KPIs\" in line and \"reviewing\" in line:\n            try:\n                start_date = conversation_date + timedelta(days=21)\n                days = [start_date + timedelta(days=i) for i in range(3)]\n                days = [day.strftime(\"%Y-%m-%d\") for day in days]\n                hours = (9, 11)\n                task_description = \"Reviewing daily KPIs\"\n                tasks.append({\n                    \"work\": task_description,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass  # Handle potential errors in date parsing\n\n    return tasks\n```\n\n```\n[\n    {\n        \"work\": \"Reviewing daily KPIs\",\n        \"days\": [\n            \"2024-02-16\",\n            \"2024-02-17\",\n            \"2024-02-18\"\n        ],\n        \"hours\": (\n            9,\n            11\n        )\n    }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    work_tasks = []\n    for line in conversation:\n        if \"daily huddle\" in line:\n            # Extract temporal information\n            try:\n                days_offset = int(line.split(\"in \")[1].split(\" days\")[0])\n                duration = int(line.split(\"for \")[1].split(\" consecutive days\")[0])\n                start_time_str = line.split(\"from \")[1].split(\" p.m.\")[0]\n                start_hour = int(start_time_str.split(\":\")[0])\n                end_hour = start_hour + 3\n\n                # Calculate start date\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_offset)\n\n                # Generate a list of dates\n                dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n\n                work_tasks.append({\n                    \"work\": \"attending a daily huddle\",\n                    \"days\": dates,\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing temporal information: {e}\")\n                continue  # Skip to the next line if parsing fails\n\n    return work_tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Long time no talk!\",\n    \"Adam: Hey Hailey, it\u2019s been a while! Just wanted to let you know I have to attend a daily huddle in 9 days, for 4 consecutive days, from 3 p"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-01-13\",\n      \"2020-01-15\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"safety check\" in line.lower():\n            # Extract temporal details\n            days_ago = [16, 15, 14]\n            dates = []\n            for day_offset in days_ago:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=day_offset)\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n\n            # Extract time range\n            hours = (7, 9)  # 7 AM to 9 AM (2 hours)\n\n            tasks.append({\n                \"work\": \"Conduct daily safety check\",\n                \"days\": dates,\n                \"hours\": hours\n            })\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"How's your week been?\",\n    \"Adam: Hey Rose, it's been pretty busy! I had to conduct a daily safety check 16 days ago, then again 15 days ago, and once more 14 days ago, all from 7 in the morning for two hours.\",\n    \"Rose: Oh, that sounds thorough, Adam. It's good you're so diligent about things like that. I've been sorting through a new collection that just arrived, it's been a lot of fun.\",\n    \"Adam: That's awesome, Rose! Finding unique pieces must be so rewarding. I'm glad I got those safety checks out of the way, it\u2019s a bit draining.\",\n    \"Rose: I can imagine! It's always good to get those responsibilities ticked off the list. I just found a beautiful 1950s dress, the fabric is incredible"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2020-01-10\",\n      \"2020-01-13\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2020-01-14\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2020-01-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-01-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording a podcast episode\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2020-01-21\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"prepare for next assignment, heading to Ukraine\",\n    \"days\": [\n      \"2020-01-29\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2020-01-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2020-01-18\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-27\",\n      \"2020-01-28\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"reading a technical article\"\n    start_hour = 15\n    \n    # Yesterday\n    conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    yesterday = conversation_date_obj - timedelta(days=1)\n    yesterday_str = yesterday.strftime(\"%Y-%m-%d\")\n    \n    # Today\n    today = conversation_date_obj\n    today_str = today.strftime(\"%Y-%m-%d\")\n    \n    # Tomorrow\n    tomorrow = conversation_date_obj + timedelta(days=1)\n    tomorrow_str = tomorrow.strftime(\"%Y-%m-%d\")\n    \n    # Consecutive days\n    days = [yesterday_str, today_str, tomorrow_str]\n    \n    # Add task details\n    task_details.append({\n        \"work\": task,\n        \"days\": days,\n        \"hours\": (start_hour, 17)\n    })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-27\",\n      \"2020-01-28\",\n      \"2020-01-29\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-29\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Predict energy consumption patterns using machine learning algorithms\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"Morning jog\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-11\"\n    ],\n    \"hours\": (13, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2020-02-01\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"review a budget proposal\"\n    \n    for line in conversation:\n        if work_task in line:\n            try:\n                # Extract the offset in days\n                offset_days = 16\n\n                # Calculate the absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 7\n                end_hour = start_hour + 4\n\n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle potential parsing errors\n\n    return task_details\n\n# Example usage:\nconversation = [\n    \"Hi, how\u2019s your world?\",\n    \"Adam: Hey Leah! Things are pretty good, though I just realized I have to review a budget proposal sixteen days later, starting from 7 in the morning for four hours. It's going to be a busy one.\",\n    \"Leah: That sounds... involved, Adam. I was just finishing up a commission, a really big centerpiece for a hotel lobby.\",\n    \"Adam: Oh wow, that sounds amazing! I can barely manage spreadsheets, let alone molten glass. Is it a really elaborate piece?\",\n    \"Leah: It is! Lots of blues and greens, intended to evoke the ocean. It's been taking all my concentration, definitely a change from smaller work.\",\n    \"Adam: That sounds incredibly peaceful, actually. I sometimes wish I had a more tangible craft"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2020-02-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2020-01-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"meeting with a potential donor\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2021-09-15\",\n      \"2021-09-16\",\n      \"2021-09-17\",\n      \"2021-09-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project metrics\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-09-07\",\n      \"2021-09-11\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a community event\",\n    \"days\": [\n      \"2021-09-09\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-09-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"calligraphy commission for a local mosque\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"composing a new piece\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"private commission - a large panel for a collector in Riyadh\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-09-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"mapping and wildlife surveys\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating a training manual\",\n    \"days\": [\n      \"2021-09-14\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"gig with the trio\",\n    \"days\": [\n      \"2021-11-01\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-01-23\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Reviewing a research paper\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-09-12\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"brainstorm new menu items\",\n    \"days\": [\n      \"2021-09-22\"\n    ],\n    \"hours\": (18, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record daily observations\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-07-03\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.  Empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"update client records\" in line:\n            task = \"Update client records\"\n            if \"16 days later\" in line:\n                date1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=16)\n                date1_str = date1.strftime(\"%Y-%m-%d\")\n            else:\n                date1_str = None\n\n            if \"17 days later\" in line:\n                date2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=17)\n                date2_str = date2.strftime(\"%Y-%m-%d\")\n            else:\n                date2_str = None\n\n            if \"3 in the afternoon\" in line:\n                start_hour = 15\n                end_hour = 18\n                hours = (start_hour, end_hour)\n            else:\n                hours = None\n            \n            days = []\n            if date1_str:\n                days.append(date1_str)\n            if date2_str:\n                days.append(date2_str)\n\n            if days:\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n        if \"gig at The Blue Note next week\" in line:\n            task = \"Gig at The Blue Note\"\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n            date_str = date.strftime(\"%Y-%m-%d\")\n            days = [date_str]\n            hours = (20, 23)  # Assuming a late-night gig"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"monitor website analytics\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    dates = []\n    for line in conversation:\n        if task_description in line:\n            if \"tomorrow\" in line:\n                dates.append((date_obj + timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            elif \"9 days ago\" in line:\n                dates.append((date_obj - timedelta(days=9)).strftime(\"%Y-%m-%d\"))\n            elif \"7 days ago\" in line:\n                dates.append((date_obj - timedelta(days=7)).strftime(\"%Y-%m-%d\"))\n            elif \"last night\" in line:\n                dates.append((date_obj - timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n                \n    # Extract time range\n    hours = (11, 13)  # 11 a.m. for two hours\n\n    if dates:\n        tasks.append({\n            \"work\": task_description,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return tasks\n\n# Example usage with the provided input\nconversation_transcript = [\n    \"How\u2019s life?\",\n    \"Evan: Hey Louis, life\u2019s alright! Been pretty busy with work though\u2014I had to monitor website analytics 9 days ago, then again 7 days ago, and I have to do it tomorrow from 11 in the morning for two hours.\",\n    \"Louis: That sounds\u2026involved, Evan. I\u2019ve been trying a new reduction"
"```json\n[\n  {\n    \"work\": \"reviewing daily KPIs\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-20\",\n      \"2024-02-22\",\n      \"2024-02-23\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"composing new material for the trio\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (18, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-09-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-09-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"on-snow training\",\n    \"days\": [\n      \"2021-10-11\",\n      \"2021-10-12\",\n      \"2021-10-13\",\n      \"2021-10-14\",\n      \"2021-10-15\",\n      \"2021-10-16\",\n      \"2021-10-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-09-28\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2021-09-28\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"playing at 'The Blue Note'\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"project summary\"\n    days = []\n    hours = None\n\n    for line in conversation:\n        if \"prepare a project summary\" in line or \"preparing a project summary\" in line:\n            if \"22 days later\" in line:\n                offset_days = 22\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                days.append(task_date.strftime(\"%Y-%m-%d\"))\n\n            if \"7 in the morning\" in line and \"four hours\" in line:\n                start_hour = 7\n                end_hour = 7 + 4\n                hours = (start_hour, end_hour)\n\n    if work_task and days and hours:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n\n# Example Usage:\nconversation = [\n    \"Good to connect with you.\",\n    \"Evan: Hey Chen, just letting you know I\u2019ve got to prepare a project summary 22 days later from 7 in the morning for four hours.\",\n    \"Chen: Oh, that\u2019s interesting, Evan. I was just thinking about trying a new blend of oolong tea. It's quite complex, with several layers of flavor.\",\n    \"Evan: That sounds lovely, Chen. I've been so focused on this project summary that I haven't really had time to explore much outside of music lately.\",\n    \"Chen: It\u2019s good to have things that ground you, but also important to make time for passions. Have you been practicing anything new on the piano?\",\n    \"Evan: Actually, yes! I\u2019ve been working on a new improvisation based on a Bill Evans tune. It\u2019"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            try:\n                # Extract the offset in days from \"10 days later\"\n                offset_days = int(line.split(\" \")[-3])\n\n                # Calculate the absolute date of the meeting\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                meeting_date = date_obj + timedelta(days=offset_days)\n                meeting_date_str = meeting_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start time and duration\n                start_time_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = int(start_time_str.split(\":\")[0])\n                duration_hours = int(line.split(\"for \")[1].split(\" \")[0])\n                end_hour = start_hour + duration_hours\n                \n                task_details.append({\n                    \"work\": \"Organize a strategy meeting\",\n                    \"days\": [meeting_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing date or time: {e}\")\n                continue #skip to the next line\n            \n    return task_details\n\n# Example usage\nconversation = [\n    \"Hope things are well.\",\n    \"Evan: Hey Henry! Just wanted to let you know I have to organize a strategy meeting 10 days later from 7 in the morning for four hours.\",\n    \"Henry: That sounds like a busy time, Evan. How's the music been lately? Any new gigs lined up?\",\n    \"Evan"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2023-03-07\",\n      \"2023-03-08\",\n      \"2023-03-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2023-03-01\",\n      \"2023-03-02\",\n      \"2023-03-03\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"arrange a small exhibition\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing daily KPIs\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (16, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-03-04\",\n      \"2023-03-10\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2024-01-25\",\n      \"2024-01-27\",\n      \"2024-01-29\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2023-03-10\",\n      \"2023-03-11\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"commissions\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2023-03-11\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2023-03-13\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2023-03-06\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"sketching a new concept for a centaur statue\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-03-02\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"sculpting a bronze figure of Hercules\",\n    \"days\": [\n      \"2023-03-11\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2023-03-12\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2023-03-04\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-03-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2023-03-19\",\n      \"2023-03-20\",\n      \"2023-03-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"work on a bronze sculpture of Apollo\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2023-03-20\",\n      \"2023-03-21\",\n      \"2023-03-22\",\n      \"2023-03-23\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2023-03-17\",\n      \"2023-03-24\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2023-03-14\",\n      \"2023-03-18\",\n      \"2023-03-19\"\n    ],\n    \"hours\": (9, 13)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"track daily expenses\" in line.lower() or \"tracking daily expenses\" in line.lower():\n            task_description = \"Track daily expenses\"\n            start_time = 17  # 5 p.m.\n            end_time = start_time + 2\n            \n            # Extract dates\n            dates = []\n            if \"two days later\" in line.lower():\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            if \"five days later\" in line.lower():\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=5)\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            if \"a few days\" in line.lower():\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            \n            tasks.append({\n                \"work\": task_description,\n                \"days\": dates,\n                \"hours\": (start_time, end_time)\n            })\n\n    return tasks\n\n# Example usage (using the provided conversation):\nconversation = [\n    \"I hope all is well.\",\n    \"Leonardo: Hey Heidi, just wanted to let you know I\u2019ve been quite busy with work lately. I had to track daily"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2023-03-26\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-03-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2023-03-16\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2023-03-18\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-03-14\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2021-08-07\",\n      \"2021-08-08\",\n      \"2021-08-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-13\",\n      \"2021-08-14\",\n      \"2021-08-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-06\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-03\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-06\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording daily observations\",\n    \"days\": [\n      \"2021-08-02\",\n      \"2021-08-06\"\n    ],\n    \"hours\": (13, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-08-04\",\n      \"2021-08-07\",\n      \"2021-08-10\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"starting a new VR project\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2021-08-03\",\n      \"2021-08-06\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task\n              (work, days, hours). Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"product demo\" in line.lower():\n            try:\n                time_str = line.lower().split(\"from \")[1].split(\" for \")[0]\n                hour = int(time_str.split(\" \")[0])\n                if \"in the morning\" in time_str:\n                    start_hour = hour\n                    end_hour = hour + 2\n                else:\n                    start_hour = hour\n                    end_hour = hour + 2\n                \n                six_days_ago = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=6)\n                date = six_days_ago.strftime(\"%Y-%m-%d\")\n                \n                tasks.append({\n                    \"work\": \"conduct a product demo\",\n                    \"days\": [date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"VR game\" in line.lower() and \"coding\" in line.lower():\n\n            tasks.append({\n                \"work\": \"VR game development (coding and world-building)\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)\n            })\n    return tasks\n\n# Example Usage with the provided input\nconversation = [\n    \"Imani: Thinking of you and wanted to say hi.\",\n    \"Ethan: Hi Imani! It\u2019s good to hear from you. I\u2019ve been really busy lately. I had to conduct a product demo six days ago from 11 in the morning"
"```json\n[\n  {\n    \"work\": \"Conduct a market survey for the new VR project\",\n    \"days\": [\n      \"2021-08-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-08-02\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"brainstorming some new worlds\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"adding a puzzle element to the VR game\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      16,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a figure inspired by Icarus\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-08-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"draft a press release\" in line:\n            try:\n                parts = line.split(\"from \")\n                time_part = parts[1].split(\" for \")[0]\n                duration_part = parts[1].split(\" for \")[1].split(\" hours\")[0]\n                start_time_str = time_part\n                duration = int(duration_part)\n\n                start_hour = int(start_time_str.split(\" \")[0])\n                end_hour = start_hour + duration\n\n                offset_days = 7\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                start_date_str = start_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"draft a press release\",\n                    \"days\": [start_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError) as e:\n                print(f\"Error parsing time information: {e}\")\n                continue    \n\n    return tasks\n```\n\n```\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-08-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"perfect a new rose iron design\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"expand the VR world with more interactive elements\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"trying a new technique with Damascus steel\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-01-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"deliver a gate\",\n    \"days\": [\n      \"2024-02-03\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"sound design for VR game\",\n    \"days\": [\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-08-05\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"cataloging a new collection of Victorian-era scientific instruments\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"performing at The Blue Note\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"starting a new VR project\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.  \n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"monitor website analytics\"\n    \n    for line in conversation:\n        if work_task in line:\n            if \"Starting in 9 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=9)\n                dates = [start_date.strftime(\"%Y-%m-%d\"),\n                         (start_date + timedelta(days=1)).strftime(\"%Y-%m-%d\"),\n                         (start_date + timedelta(days=2)).strftime(\"%Y-%m-%d\")]\n                tasks.append({\n                    \"work\": work_task,\n                    \"days\": dates,\n                    \"hours\": (8, 11)  # 8 AM to 11 AM (3 hours)\n                })\n            elif \"yesterday\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                dates = [start_date.strftime(\"%Y-%m-%d\")]\n                tasks.append({\n                    \"work\": work_task,\n                    \"days\": dates,\n                    \"hours\": (8, 11)  # 8 AM to 11 AM (3 hours)\n                })\n            elif \"in 9 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=9)\n                dates = [start_date.strftime(\"%Y-%m-%d\"),\n                         (start_date + timedelta(days=1)).strftime(\"%Y-%m-%d\"),\n                         (start_date + timedelta(days"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2021-08-21\",\n      \"2021-08-22\",\n      \"2021-08-23\",\n      \"2021-08-24\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-07-12\",\n      \"2024-07-13\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_and_time(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"attend daily stand-up meeting\" in line:\n            try:\n                if \"12 days later\" in line:\n                    date_offset = 12\n                    task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=date_offset)\n                    task_date = task_date.strftime(\"%Y-%m-%d\")\n                    start_hour = 12\n                    end_hour = 14  # 12 p.m. + 2 hours\n                    task_details.append({\n                        \"work\": \"attend daily stand-up meeting\",\n                        \"days\": [task_date],\n                        \"hours\": (start_hour, end_hour)\n                    })\n                elif \"day after that\" in line:\n                    date_offset = 13\n                    task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=date_offset)\n                    task_date = task_date.strftime(\"%Y-%m-%d\")\n                    start_hour = 12\n                    end_hour = 14  # 12 p.m. + 2 hours\n                    task_details.append({\n                        \"work\": \"attend daily stand-up meeting\",\n                        \"days\": [task_date],\n                        \"hours\": (start_hour, end_hour)\n                    })\n                elif \"15 days later\" in line:\n                    date_offset = 15\n                    task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") +"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2021-08-17\",\n      \"2021-08-18\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-08-16\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  },\n  {\n    \"work\": \"squash some bugs\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"starting a new commission\",\n    \"days\": [\n      \"2021-08-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2021-08-21\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2021-08-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-02-29\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"check inventory levels\"\n    dates = []\n    hours = (8, 11)\n\n    for line in conversation:\n        if work_task in line:\n            if \"yesterday\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"today\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"3 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"2 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"in 3 days\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                \n                \n            if \"8 in the morning for three hours\" in line:\n                hours = (8, 11)\n            elif \"8 in the morning until 11 a.m.\""
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"system alerts\" in line.lower() and \"check\" in line.lower():\n            # Extract temporal information\n            try:\n                start_days_ago = int(line.lower().split(\"twenty-one days ago\")[0].split()[-1])\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=start_days_ago)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                for i in range(2):\n                    days.append((start_date + timedelta(days=i+1)).strftime(\"%Y-%m-%d\"))\n\n                start_hour = 15\n                end_hour = start_hour + 4\n                hours = (start_hour, end_hour)\n\n                tasks.append({\n                    \"work\": \"Check system alerts\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            except:\n                pass\n        if \"reading next week\" in line.lower():\n            # Extract temporal information\n            try:\n                reference_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                next_week_date = reference_date + timedelta(days=7)\n                days = [next_week_date.strftime(\"%Y-%m-%d\")]\n                hours = (9, 17)\n\n                tasks.append({\n                    \"work\": \"Finish a new piece for a reading\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            except:\n                pass\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2022-01-09\",\n      \"2022-01-10\",\n      \"2022-01-12\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2022-01-04\",\n      \"2022-01-11\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-01-04\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-01-14\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-01-02\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"update the company website\" in line:\n            try:\n                hours_str = line.split(\"from \")[1].split(\" until \")[1]\n                hours = int(hours_str.split(\" \")[0])\n                start_hour = 11\n                end_hour = start_hour + hours\n                \n                days_ago = 10\n                task_date = date_obj - timedelta(days=days_ago)\n                tasks.append({\n                    \"work\": \"update the company website\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"perfecting a new solo for the show\" in line:\n            try:\n                next_week = date_obj + timedelta(days=7)\n                tasks.append({\n                    \"work\": \"perfecting a new solo for the show\",\n                    \"days\": [next_week.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (9, 17)\n                }) \n            except:\n                pass\n        if \"head to a rehearsal\" in line:\n            try:\n                tasks.append({\n                    \"work\": \"rehearsal\",\n                    \"days\": [date_obj.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (14, 18)\n                })\n            except:\n                pass\n\n    return tasks\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            try:\n                parts = line.split(\"ago from\")\n                if len(parts) > 1:\n                    days_ago = int(parts[0].split(\"days ago\")[0].strip())\n                    time_info = parts[1].strip()\n                    start_time_str = time_info.split(\"for\")[0].strip()\n                    duration_str = time_info.split(\"for\")[1].strip()\n\n                    start_hour = int(start_time_str.split(\" \")[0])\n                    if \"in the morning\" in start_time_str:\n                        start_hour = start_hour % 12\n                    elif \"in the afternoon\" in start_time_str:\n                         start_hour = start_hour % 12 + 12\n\n                    duration = int(duration_str.split(\" \")[0]) \n                    end_hour = (start_hour + duration) % 24\n\n                    date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                    date_str = date.strftime(\"%Y-%m-%d\")\n                    \n                    tasks.append({\n                        \"work\": \"organize a strategy meeting\",\n                        \"days\": [date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing time information: {e}\")\n    return tasks\n\n# Example usage:\nconversation = [\n    \"How\u2019s everything?\",\n    \"Heidi: Oh, hi Atsuko! Things have been pretty hectic actually. I had to organize a strategy meeting 22 days ago"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2022-01-05\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"research for a new exhibit\",\n    \"days\": [\n      \"2022-01-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a workshop\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"restoring an old pocket watch\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Reading a technical article for professional development\",\n    \"days\": [\n      \"2022-01-15\",\n      \"2022-01-16\",\n      \"2022-01-17\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2022-01-23\",\n      \"2022-01-24\",\n      \"2022-01-25\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"review project progress\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Find mentions of the task and extract temporal details\n    for line in conversation:\n        if work_task in line.lower():\n            if \"in 9 days\" in line.lower():\n                start_date = date_obj + timedelta(days=9)\n                days = [start_date.strftime(\"%Y-%m-%d\") for _ in range(4)]\n                hours = (15, 19)  # 3 p.m. to 7 p.m.\n                task_details.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"yesterday\" in line.lower():\n                start_date = date_obj - timedelta(days=1)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (15, 19)\n                task_details.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"today\" in line.lower():\n                start_date = date_obj\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (15, 19)\n                task_details.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n\n    return task_details\n\n\n# Example usage with the provided input:\nconversation = [\n    \"Just wanted to reach out.\",\n    \"Heidi: Hi Alessia! Just wanted to let you know I have to review project progress starting in 9 days, for 4 consecutive days from 3 p.m."
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2022-01-20\",\n      \"2022-01-23\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task\n              and contains 'work', 'days', and 'hours' keys.  Returns an empty\n              list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"maintain a training schedule\" in line:\n            task = \"Maintain training schedule\"\n            hours = (7, 11)  # 7 am to 11 am (four hours)\n\n            days = []\n            if \"14 days later\" in line:\n                date = conversation_date + timedelta(days=14)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"15 days later\" in line:\n                date = conversation_date + timedelta(days=15)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"17 days later\" in line:\n                date = conversation_date + timedelta(days=17)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        elif \"complete overhaul\" in line:\n            task = \"Watch overhaul\"\n            hours = (9, 17)\n            days = [conversation_date.strftime(\"%Y-%m-%d\")]\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        elif \"repair on an antique pocket watch\" in line:\n            task = \"Pocket watch repair\"\n            hours = (9, 17)\n            days = [conversation_date.strftime(\"%Y-%m-%d\")]\n            tasks.append({\"work\": task"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2022-01-21\",\n      \"2022-01-26\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"prepare a proposal document\" in line.lower():\n            # Extract temporal information\n            try:\n                offset_days = int(line.lower().split(\"fifteen days later\")[0].split(\" \")[-1])\n                target_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                target_date_str = target_date.strftime(\"%Y-%m-%d\")\n                start_hour = 8\n                end_hour = 8 + 3\n                \n                tasks.append({\n                    \"work\": \"prepare a proposal document\",\n                    \"days\": [target_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass      \n        if \"competition\" in line.lower() and \"preparing\" in line.lower():\n            tasks.append({\n                \"work\": \"preparing for competition\",\n                \"days\": [],\n                \"hours\": []\n            })\n\n    return tasks\n\n# Example usage with the provided input\nconversation = [\n    \"Ivan: How did your day go?\",\n    \"Heidi: It was pretty busy! I had to prepare a proposal document fifteen days later, working from 8 in the morning for three hours. It took a lot of focus to get it just right.\",\n    \"Ivan: That sounds like a demanding task. Such precision reminds me of a well-calculated chess move.\",\n    \"Heidi: It definitely needed to be precise! I\u2019m hoping it all pays off, it certainly took a lot of energy. Have you been working with any particularly promising students lately?\",\n    \"Ivan: I have, actually. A young woman with a remarkable ability to visualize complex positions. It\u2019s a joy to witness such"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"record a podcast episode\" in line.lower():\n            try:\n                # Extract the offset in days\n                offset_days = int(line.lower().split(\" \")[-3])  # Assuming offset is represented as a number of days\n\n                # Calculate the absolute date\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 10\n                end_hour = start_hour + 3\n\n                tasks.append({\n                    \"work\": \"Record a podcast episode\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:  # Handle cases where offset is not an integer\n                continue\n        elif \"training session this weekend\" in line.lower():\n            # Assuming \"this weekend\" refers to the upcoming Saturday and Sunday\n            today = conversation_date.weekday()\n            days_to_saturday = (5 - today) % 7\n            saturday = conversation_date + timedelta(days=days_to_saturday)\n            sunday = saturday + timedelta(days=1)\n\n            tasks.append({\n                \"work\": \"Slalom technique training session\",\n                \"days\": [saturday.strftime(\"%Y-%m-%d\"), sunday.strftime(\"%Y-%m-%d\")],\n                \"hours\": (9, 17)  # Assuming a full day of training\n            })\n        \n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"drafting a customer feedback report\",\n    \"days\": [\n      \"2022-01-18\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"catch a flight\",\n    \"days\": [\n      \"2022-01-25\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-02-29\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys,\n              describing the identified task and its temporal details.  Returns an empty\n              list if no task is found.\n    \"\"\"\n\n    work_tasks = []\n    for line in conversation:\n        if \"draft a legal memorandum\" in line:\n            # Extract temporal information\n            try:\n                date_str = conversation_date\n                date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n                offset_days = 6\n                task_date = date_object + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_str = \"4 p.m.\"\n                start_time_object = datetime.strptime(start_time_str, \"%I %p\")\n                start_hour = start_time_object.hour\n\n                duration_hours = 3\n                end_hour = (start_hour + duration_hours) % 24\n\n                work_tasks.append({\n                    \"work\": \"draft a legal memorandum\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError as e:\n                print(f\"Error parsing date or time: {e}\")\n\n    return work_tasks\n\n# Example usage\nconversation = [\n    \"How are you feeling today?\",\n    \"Heidi: Hi Ivan! I'm feeling alright, a little tired though. I had a busy week, I had to draft a legal memorandum six days later from 4 p.m. until 3 hours after that.\",\n    \"Ivan: That sounds demanding, Heidi. I'"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Prepare a meal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"Rehearsal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"Practicing for a gig\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-01-14\",\n      \"2024-01-15\",\n      \"2024-01-16\",\n      \"2024-01-26\",\n      \"2024-01-27\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-01-30\",\n      \"2023-01-31\",\n      \"2023-02-01\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2023-01-31\",\n      \"2023-02-01\",\n      \"2023-02-02\",\n      \"2023-02-03\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2023-01-27\",\n      \"2023-01-30\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting routine inspections\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-02-27\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-28\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-01-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"finish the '57 Chevy Bel Air\",\n    \"days\": [\n      \"2023-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"get accepted into a gallery showing in Prague\",\n    \"days\": [\n      \"2023-03-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze customer feedback\",\n    \"days\": [\n      \"2023-01-30\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"preparing a new exhibition on Victorian portraiture\",\n    \"days\": [],\n    \"hours\": ()\n  },\n  {\n    \"work\": \"working on a series inspired by the colors of autumn leaves\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-01-26\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-01-30\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2023-02-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"develop new techniques for twisting glass\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"plan next exhibition\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-07-14\",\n      \"2024-07-15\",\n      \"2024-07-16\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2023-02-14\",\n      \"2023-02-15\",\n      \"2023-02-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2023-02-11\",\n      \"2023-02-12\",\n      \"2023-02-13\",\n      \"2023-02-14\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-30\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-20\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with work details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    work_details = []\n\n    for line in conversation:\n        if \"conduct a daily review session\" in line:\n            task = \"conduct a daily review session\"\n            \n            if \"tomorrow\" in line:\n                date = conversation_date + timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                \n                start_time_str = \"11 in the morning\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n                start_hour = start_time.hour\n                \n                end_hour = start_hour + 4\n                hours = (start_hour, end_hour)\n                \n                work_details.append({\n                    \"work\": task,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            \n    return work_details\n\n# Example Usage (with the provided input)\nconversation = [\n    \"Just wanted to say hello.\",\n    \"Leah: Hi Ivan! Just wanted to say hello. I've been incredibly busy lately, I had to conduct a daily review session five days ago and I also have to conduct a daily review session tomorrow from 11 in the morning for four hours.\",\n    \"Ivan: Hello Leah, it's good to hear from you. That sounds like a lot to manage alongside your glassblowing.\",\n    \"Leah: It is! But I always find a way to make it work. I really enjoyed conducting a daily review session five days ago, it felt good to get it done.\",\n    \"Ivan: I understand needing to just complete things sometimes, it's very satisfying"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-02-07\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-02-10\",\n      \"2023-02-10\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Writing a performance review\",\n    \"days\": [\n      \"2023-02-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"Creating a glass sculpture for a hotel lobby\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-02-12\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-02-18\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"delivering a training session\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (15, 17)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date the conversation took place (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a financial report\" in line.lower():\n            try:\n                # Extract the offset in days\n                offset_days = int(line.lower().split(\"sixteen days later\")[0].split()[-1])\n\n                # Calculate the start date\n                start_date = conversation_date + timedelta(days=offset_days)\n                start_date_str = start_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 11\n                end_hour = 11 + 4\n\n                tasks.append({\n                    \"work\": \"prepare a financial report\",\n                    \"days\": [start_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        \n        if \"preparing for a small show in Prague next month\" in line.lower():\n            try:\n                # Calculate the date for next month\n                next_month_date = conversation_date + timedelta(days=30)\n                next_month_date_str = next_month_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"preparing for a small show in Prague\",\n                    \"days\": [next_month_date_str],\n                    \"hours\": (9, 17)\n                })\n            except:\n                pass\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-09-06\",\n      \"2023-09-07\",\n      \"2023-09-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2023-09-07\",\n      \"2023-09-08\",\n      \"2023-09-09\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"start thinking about the next features for an app\",\n    \"days\": [\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): A string representing the date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    # Identify the work task\n    work_tasks = [\"morning jog\", \"cataloging books\", \"author visit\", \"book club\", \"coding project\"]\n    found_tasks = []\n    for task in work_tasks:\n        if any(task in line.lower() for line in conversation):\n            found_tasks.append(task)\n\n    # Extract temporal details for each task\n    if \"morning jog\" in found_tasks:\n        days = []\n        # jog 3 days ago\n        days.append((conversation_date - timedelta(days=3)).strftime(\"%Y-%m-%d\"))\n        # jog 2 days later\n        days.append((conversation_date - timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n        # jog 3 days later\n        days.append((conversation_date + timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n        # jog 3 days later\n        days.append((conversation_date + timedelta(days=5)).strftime(\"%Y-%m-%d\"))\n\n        hours = (16, 19)  # 4 p.m. to 7 p.m.\n        tasks.append({\n            \"work\": \"morning jog\",\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    if \"cataloging books\" in found_tasks:\n        tasks.append({\n            \"work\": \"cataloging books\",\n            \"days\": [conversation_date.strftime(\"%Y-%m-%d\")],\n            \"hours\": (9, 17)\n        })\n\n    if \"coding project\" in found_tasks:\n        tasks.append({\n            \"work"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-09-02\",\n      \"2023-09-05\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-08-31\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-01-25\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a financial report\",\n    \"days\": [\n      \"2023-09-04\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"building an app to help kids learn basic math skills\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2023-08-29\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-09-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"volunteering teaching a coding workshop\",\n    \"days\": [\n      \"2023-09-23\",\n      \"2023-09-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2023-09-02\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event (coding workshop for kids)\",\n    \"days\": [\n      \"2023-08-28\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-08-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2023-09-17\",\n      \"2023-09-18\",\n      \"2023-09-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"work on lavender sauce\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    work_task = \"review daily feedback\"\n    \n    # Find mentions of the task and extract temporal information\n    for line in conversation:\n        if work_task in line:\n            try:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=14)\n                days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(4)]\n                hours = (16, 19)  # 4 p.m. to 7 p.m.\n                \n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass  # Handle potential errors in date parsing\n\n    return task_details\n\n# Example usage:\nconversation = [\n    \"Just checking in.\",\n    \"Malik: Hey Dante, just wanted to let you know I have to review daily feedback starting in 14 days, for 4 consecutive days, from 4 p.m. until three hours after that.\",\n    \"Dante: Oh, that sounds intense, Malik. Always good to get a handle on things though, right? How's the app development going overall?\",\n    \"Malik: It's going well, actually! Lots of little tweaks and adjustments needed, which is why I have to review daily feedback starting in 14 days, for 4 consecutive days, from 4 p.m. until three hours after that. It\u2019s rewarding to see it come together.\",\n    \"Dante: I can imagine. It\u2019s similar to poetry, you know? Refining those lines until they really sing."
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2023-09-18\",\n      \"2023-09-20\",\n      \"2023-09-22\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2023-09-16\",\n      \"2023-09-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2023-09-14\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"app project\",\n    \"days\": [\n      \"2023-09-12\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-09-23\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Finalize a presentation\",\n    \"days\": [\n      \"2023-09-16\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"preparing for our annual book fair\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"organizing the book displays\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"teaching coding\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-09-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2023-09-17\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"work on a new app idea (coding)\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"finishing up some lesson plans\",\n    \"days\": [\n      \"2023-09-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    task_description = \"record a tutorial video\"\n    \n    # Calculate the date five days ago\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    task_date = date_obj - timedelta(days=5)\n    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n    start_hour = 14  # 2 p.m.\n    end_hour = 16  # 2 hours after 2 p.m.\n    \n    tasks.append({\n        \"work\": task_description,\n        \"days\": [task_date_str],\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task or offset_days is found.\n    \"\"\"\n    work_task = \"compiling a research summary\"\n    offset_days = 16\n    start_hour = 8\n    duration_hours = 2\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_date = conversation_date + timedelta(days=offset_days)\n    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n    end_hour = start_hour + duration_hours\n\n    return [\n        {\n            \"work\": work_task,\n            \"days\": [task_date_str],\n            \"hours\": (start_hour, end_hour),\n        }\n    ]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"morning jog\"\n    hours = (7, 11)  # 7 AM to 11 AM (4 hours)\n\n    # Calculate dates based on relative expressions\n    today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    fifteen_days_ago = today - timedelta(days=15)\n    yesterday = today - timedelta(days=1)\n    three_days_ago = today - timedelta(days=3)\n\n    dates = []\n    \n    # Find all mentions of the task and extract dates\n    for line in conversation:\n        if work_task in line.lower():\n            if \"fifteen days ago\" in line.lower():\n                dates.append(fifteen_days_ago.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line.lower():\n                dates.append(yesterday.strftime(\"%Y-%m-%d\"))\n            if \"today\" in line.lower():\n                dates.append(today.strftime(\"%Y-%m-%d\"))\n            if \"three days ago\" in line.lower():\n                dates.append(three_days_ago.strftime(\"%Y-%m-%d\"))\n\n    if dates:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": list(set(dates)),  # Remove duplicates\n            \"hours\": hours\n        })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-02-11\",\n      \"2021-02-12\",\n      \"2021-02-13\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily safety check\",\n    \"days\": [\n      \"2024-02-01\",\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2021-02-14\",\n      \"2021-02-17\",\n      \"2021-02-18\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2021-02-11\",\n      \"2021-02-15\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    work_tasks = []\n    for line in conversation:\n        if \"workshop agenda\" in line:\n            try:\n                # Extract the task\n                work = \"Prepare workshop agenda\"\n\n                # Extract temporal information\n                days_ago = int(line.split(\"six days ago\")[0].split()[-1])\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj - timedelta(days=days_ago)\n                days = [task_date.strftime(\"%Y-%m-%d\")]\n\n                # Extract hours\n                start_hour = 15  # 3 p.m.\n                end_hour = start_hour + 3\n                hours = (start_hour, end_hour)\n\n                work_tasks.append({\"work\": work, \"days\": days, \"hours\": hours})\n            except:\n                pass\n                \n    return work_tasks\n\n# Example usage (assuming conversation_date is 2024-01-02)\nconversation = [\n    \"Good to hear from you, how are things?\",\n    \"Carmen: Hey Yuna! Things are going well, though I've been busy. I had to prepare a workshop agenda six days ago from 3 p.m. until 3 hours after that. It feels good to get it done though.\",\n    \"Yuna: That sounds like a fulfilling task, Carmen! I've been trying out a new art project with my students - they absolutely loved it.\",\n    \"Carmen: Oh, that's wonderful! Children's creativity is just amazing. I'm glad I got to prepare a workshop agenda six days ago; it was a lot of work, but I\u2019m hoping it inspires some people.\",\n    \"Yuna: It's so rewarding to see their faces light"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2021-02-20\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"expense report\" in line:\n            task = \"complete an expense report\"\n            days_ago = 17\n            target_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            date_str = target_date.strftime(\"%Y-%m-%d\")\n            \n            start_hour = 15\n            end_hour = start_hour + 3\n            \n            tasks.append({\n                \"work\": task,\n                \"days\": [date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        elif \"planning a workshop for young mothers\" in line:\n            task = \"planning a workshop for young mothers\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date],\n                \"hours\": (9, 17) \n            })\n        elif \"organizing a small book exchange\" in line:\n            task = \"organizing a small book exchange\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)\n            })\n\n    return tasks\n\n# Example usage (assuming the conversation date is 2024-01-26)\nconversation = [\n    \"Hope you\u2019re having a good day.\",\n    \"Carmen: Hi Noor! Just wanted to let you know I had to complete an expense report 17 days ago, working from 3 p.m. until 3 hours after that. It felt good to get it off my plate!\",\n    \"Noor: Hey Carmen, that\u2019s great to"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"organize the children's section\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2021-02-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2021-02-13\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"organizing new arrivals\",\n    \"days\": [\n      \"2021-02-27\"\n    ],\n    \"hours\": (\n      13,\n      17\n    )\n  },\n  {\n    \"work\": \"planning the next author talk\",\n    \"days\": [\n      \"2021-03-01\",\n      \"2021-03-02\",\n      \"2021-03-03\",\n      \"2021-03-04\",\n      \"2021-03-05\",\n      \"2021-03-06\",\n      \"2021-03-07\"\n    ],\n    \"hours\": (\n      10,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-02-17\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a performance report\",\n    \"days\": [\n      \"2021-02-23\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"planning a big summer reading program for the kids\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_and_time(conversation, conversation_date):\n    \"\"\"\n    Extracts work tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    current_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    for line in conversation:\n        if \"market survey\" in line.lower():\n            if \"tomorrow\" in line.lower():\n                date = current_date + timedelta(days=1)\n                start_hour = 11\n                end_hour = start_hour + 4\n                tasks.append({\n                    \"work\": \"conduct a market survey\",\n                    \"days\": [date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            elif \"yesterday\" in line.lower():\n                date = current_date - timedelta(days=1)\n                tasks.append({\n                    \"work\": \"conduct a market survey\",\n                    \"days\": [date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (0, 0)\n                })\n            elif \"day before yesterday\" in line.lower():\n                date = current_date - timedelta(days=2)\n                tasks.append({\n                    \"work\": \"conduct a market survey\",\n                    \"days\": [date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (0, 0)\n                })\n            elif \"two days ago\" in line.lower():\n                date = current_date - timedelta(days=3)\n                tasks.append({\n                    \"work\": \"conduct a market survey\",\n                    \"days\": [date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (0, 0)\n                })\n            elif \"in three days\" in line.lower():\n                date = current_date + timedelta(days=3)\n                tasks.append({\n                    \"work\": \"conduct a market survey\",\n                    \"days\": [date"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2021-03-01\",\n      \"2021-03-02\",\n      \"2021-03-03\",\n      \"2021-03-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2021-02-25\",\n      \"2021-02-27\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_details(conversation):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n\n    Returns:\n        list: A list of dictionaries with work task, dates, and hours.\n    \"\"\"\n\n    conversation_date_str = conversation[-1].split(\" \")[0]\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n\n    work_details = []\n    task = \"update a work log\"\n    \n    # Extract dates\n    dates = []\n    dates.append((conversation_date - timedelta(days=6)).strftime(\"%Y-%m-%d\"))\n    dates.append((conversation_date - timedelta(days=4)).strftime(\"%Y-%m-%d\"))\n    dates.append((conversation_date + timedelta(days=6)).strftime(\"%Y-%m-%d\"))\n    \n    # Extract hours\n    hours = (15, 17)  # 3 p.m. until two hours after that\n\n    work_details.append({\n        \"work\": task,\n        \"days\": dates,\n        \"hours\": hours\n    })\n\n    return work_details\n```\n"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"children's story hour\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (0, 0)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-02-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"review a research paper\" in line:\n            if \"tomorrow\" in line:\n                task_date = date + timedelta(days=1)\n                tasks.append({\n                    \"work\": \"Review a research paper\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (16, 19)  # 4 p.m. to 7 p.m.\n                })\n            elif \"two days ago\" in line:\n                task_date = date - timedelta(days=2)\n                tasks.append({\n                    \"work\": \"Review a research paper\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (16, 19)\n                })\n            elif \"yesterday\" in line:\n                task_date = date - timedelta(days=1)\n                tasks.append({\n                    \"work\": \"Review a research paper\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (16, 19)\n                })\n            elif \"in two days\" in line:\n                task_date = date + timedelta(days=2)\n                tasks.append({\n                    \"work\": \"Review a research paper\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (16, 19)\n                })\n            elif \"starting in three days for four consecutive days\" in line:\n                start_date = date + timedelta(days=3)\n                for i in range(4):\n                    task_"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-07-11\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2021-02-26\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2021-02-26\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"budget spreadsheet\" in line and \"days later\" in line:\n            try:\n                parts = line.split(\"days later\")\n                days_later = int(parts[0].split()[-1])\n                start_time_str = parts[1].split(\"from \")[1].split(\" for \")[0]\n                hours_str = parts[1].split(\"for \")[1].split(\" hours\")[0]\n                hours = int(hours_str)\n                \n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_later)\n                date = date_obj.strftime(\"%Y-%m-%d\")\n                start_hour = int(start_time_str.split(\" \")[0])\n                end_hour = start_hour + hours\n                \n                tasks.append({\n                    \"work\": \"create a budget spreadsheet\",\n                    \"days\": [date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass  # Ignore lines that partially match but cause errors\n\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Just wanted to see what you\u2019re up to.\",\n    \"Carmen: Hey Heidi! I've been really busy lately. I had to create a budget spreadsheet 26 days later from now, working from 8 in the morning for three hours.\",\n    \"Heidi: Oh, that sounds\u2026organized, Carmen! I\u2019ve been trying out some new skis, hoping to get a feel for them before the next race.\",\n    \"Carmen: That\u2019s cool! I'm glad I got that"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-03-05\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-28\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update a project report\" in line:\n            try:\n                # Extract temporal information\n                time_phrase = \"two days ago from 9 in the morning for four hours\"\n                days_ago = 2\n                start_hour = 9\n                duration_hours = 4\n                end_hour = start_hour + duration_hours\n\n                # Calculate the date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Create the task dictionary\n                task = {\n                    \"work\": \"update a project report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour),\n                }\n                tasks.append(task)\n            except:\n                pass\n\n    return tasks\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details = []\n    \n    work_task = \"manage a support ticket queue\"\n    \n    # Extract the starting date and duration\n    start_days_ago = 22\n    duration_days = 3\n    \n    start_date = conversation_date - timedelta(days=start_days_ago)\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n    \n    hours = (16, 18)  # 4 p.m. to 6 p.m. in 24-hour format\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"Daily briefing on safety protocols and weather updates\",\n    \"days\": [\n      \"2023-05-21\",\n      \"2023-05-22\",\n      \"2023-05-23\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\",\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2023-05-18\",\n      \"2023-05-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-05-17\",\n      \"2023-05-19\",\n      \"2023-05-22\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2023-05-23\",\n      \"2023-05-26\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update the company website\" in line:\n            try:\n                # Extract days offset\n                days_offset = int(line.split(\" \")[-3]) \n\n                # Calculate the date\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract hours\n                start_hour = 7\n                duration = 4\n                end_hour = start_hour + duration\n\n                tasks.append({\n                    \"work\": \"update the company website\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"map work\" in line:\n            tasks.append({\n                \"work\": \"map work\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 24)\n            })\n\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Xavier: How are things on your end?\",\n    \"Logan: Hey Xavier! Things are good, just wrapping up some work from home. I had to update the company website seven days ago from 7 in the morning for four hours. It's nice to finally have a bit of downtime.\",\n    \"Xavier: That sounds like a demanding task, even from home. I've been practicing a new piece for an upcoming show. It\u2019s a real challenge, pushing my limits on the trumpet.\",\n    "
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-05-19\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"budget spreadsheet\" in line and \"8 in the morning\" in line and \"two hours\" in line:\n            days_ago = int(line.split(\"days ago\")[0].split()[-1])\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            date_str = date.strftime(\"%Y-%m-%d\")\n            tasks.append({\n                \"work\": \"creating a budget spreadsheet\",\n                \"days\": [date_str],\n                \"hours\": (8, 10)\n            })\n        if \"weekend sketching\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            # Assuming weekend means Saturday and Sunday\n            if date.weekday() < 5:\n                days_to_saturday = (5 - date.weekday()) % 7\n                saturday = date + timedelta(days=days_to_saturday)\n                sunday = saturday + timedelta(days=1)\n                tasks.append({\n                    \"work\": \"sketching landscape paintings\",\n                    \"days\": [saturday.strftime(\"%Y-%m-%d\"), sunday.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (9, 17)  # Assuming a full day of sketching\n                })\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Hope you\u2019re having a good day.\",\n    \"Logan: Hey Ali, just wanted to let you know I spent twelve days ago creating a budget spreadsheet from 8 in the morning for two hours. It was a bit tedious, but it\u2019s finally done!\",\n    \"Ali: That sounds\u2026"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-05-16\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-05-15\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"designing a new collection using handwoven fabrics\",\n    \"days\": [],\n    \"hours\": (0, 0)\n  },\n  {\n    \"work\": \"map out a new kayaking route\",\n    \"days\": [\n      \"2023-05-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"sculpting Icarus in bronze\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-05-16\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  },\n  {\n    \"work\": \"planning routes for bird watchers\",\n    \"days\": [\n      \"2023-05-24\",\n      \"2023-05-25\",\n      \"2023-05-26\",\n      \"2023-05-27\",\n      \"2023-05-28\",\n      \"2023-05-29\",\n      \"2023-05-30\",\n      \"2023-05-31\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-05-17\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2023-05-30\",\n      \"2023-05-31\",\n      \"2023-06-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2023-06-01\",\n      \"2023-06-02\",\n      \"2023-06-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-03-13\",\n      \"2024-03-14\",\n      \"2024-03-15\",\n      \"2024-03-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine maintenance\",\n    \"days\": [\n      \"2023-05-31\",\n      \"2023-06-08\",\n      \"2023-06-08\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-06\",\n      \"2024-03-09\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-07-03\",\n      \"2024-07-14\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2023-06-07\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"design a product prototype\" in line:\n            task_details = {}\n            task_details[\"work\"] = \"Design a product prototype\"\n\n            # Extract dates\n            if \"seven days ago\" in line:\n                date = conversation_date - timedelta(days=7)\n                task_details[\"days\"] = [date.strftime(\"%Y-%m-%d\")]\n            elif \"a week ago\" in line:\n                date = conversation_date - timedelta(days=7)\n                task_details[\"days\"] = [date.strftime(\"%Y-%m-%d\")]\n            else:\n                task_details[\"days\"] = []\n\n            # Extract hours\n            if \"7 a.m. until 10 a.m.\" in line:\n                task_details[\"hours\"] = (7, 10)\n            elif \"7 in the morning for three hours\" in line:\n                task_details[\"hours\"] = (7, 10)\n            elif \"7 a.m.\" in line and \"three hours\" in line:\n                task_details[\"hours\"] = (7, 10)\n            else:\n                task_details[\"hours\"] = None\n\n            tasks.append(task_details)\n\n    return tasks\n```\n```\n[\n    {\n        \"work\": \"Design a product prototype\",\n        \"days\": [\n            \"2023-05-31\"\n        ],\n        \"hours\": (\n            7,\n            10\n        )\n    },\n    {\n        \"work\": \"Design a product prototype\",\n        \"days\": [\n            \"2"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2024-07-12\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-06-08\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (work, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task\n              with 'work', 'days', and 'hours' keys.  Returns an empty list\n              if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    work_task = \"analyze sales data\"\n    days = []\n    hours = None\n\n    for line in conversation:\n        if work_task in line.lower():\n            if \"13 days later\" in line.lower():\n                task_date = conversation_date + timedelta(days=13)\n                days.append(task_date.strftime(\"%Y-%m-%d\"))\n            if \"11 in the morning\" in line.lower() and \"two hours\" in line.lower():\n                hours = (11, 13)\n            elif \"11\" in line.lower() and \"1 p.m.\" in line.lower():\n                hours = (11, 13)\n            \n    if days and hours:\n        tasks.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return tasks\n```\n\n```python\nconversation = [\n    \"INPUT: What's new in your world?\",\n    \"Logan: Hey Camila! Just wanted to let you know I've been really busy - I had to analyze sales data 13 days later, working from 11 in the morning for two hours.\",\n    \"Camila: Oh, wow, that sounds...intense. Anything exciting happening on your end besides work? I've been sketching ideas for a new community project.\",\n    \"Logan: Not much besides preparing for a big trek, honestly. It's good to hear about your art"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-06-06\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"building a currach\",\n    \"days\": [\n      \"2023-06-08\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"launching a currach\",\n    \"days\": [\n      \"2023-09-01\",\n      \"2023-11-30\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-06-11\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\"2023-05-29\"],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-07-11\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2023-04-17\",\n      \"2023-04-18\",\n      \"2023-04-19\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2023-04-13\",\n      \"2023-04-14\",\n      \"2023-04-15\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2023-04-15\",\n      \"2023-04-16\"\n    ],\n    \"hours\": (9, 12)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-18\",\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    task_description = \"prepare a daily summary\"\n    start_hour = 11\n    duration_hours = 2\n\n    dates = []\n    for line in conversation:\n        if task_description in line.lower():\n            if \"five days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=5)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"two days later\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n    if dates:\n        tasks.append({\n            \"work\": task_description,\n            \"days\": dates,\n            \"hours\": (start_hour, start_hour + duration_hours)\n        })\n\n    return tasks\n\n\n# Example usage with the provided input:\nconversation = [\n    \"Anything interesting happen recently?\",\n    \"Liam: Hey Carmen! So much has been going on. I had to prepare a daily summary five days ago, and then again two days later, both times from 11 in the morning for two hours.\",\n    \"Carmen: Oh, that sounds like a lot of work, Liam! I've been busy too, just trying to keep everything running smoothly at the library. We had a lovely visit from a local author yesterday.\",\n    \"Liam: That'"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-04-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2023-04-09\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-04-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n    results = []\n    conversation_date = datetime(2023, 4, 18)  # From the last message\n\n    for line in conversation:\n        try:\n            _, speaker, utterance = line.split(\":\", 1)\n            utterance = utterance.strip()\n        except ValueError:\n            continue\n        \n        if \"draft an email to stakeholders\" in utterance:\n            days_offset = 4\n            task_date = conversation_date + timedelta(days=days_offset)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            start_hour = 15\n            end_hour = start_hour + 3\n            \n            results.append({\n                \"work\": \"draft an email to stakeholders\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        \n        if \"performing at \\\"The Blue Note\\\" next week\" in utterance:\n            days_offset = 7\n            task_date = conversation_date + timedelta(days=days_offset)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            results.append({\n                \"work\": \"performing at \\\"The Blue Note\\\"\",\n                \"days\": [task_date_str],\n                \"hours\": (0, 24) #assume all day\n            })\n            \n\n    return results\n```\n\n```\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2023-04-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"performing at \\\"The Blue Note\\\"\",\n    \"days\": [\n      \"2023-04-25\"\n    ],\n    \"hours\": (\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"review a budget proposal\" in line:\n            try:\n                # Extract temporal information\n                days_offset = int(line.split(\" \")[-3])\n\n                task_date = conversation_date + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_hour = 9\n                end_hour = 9 + 4 \n\n                tasks.append({\n                    \"work\": \"Review budget proposal\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing temporal information: {e}\")\n                continue\n            \n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"How\u2019s everything going?\",\n    \"Liam: Hey Ayanda, things have been pretty busy! I had to review a budget proposal four days later, working from 9 in the morning for four hours.\",\n    \"Ayanda: That sounds intense, Liam! I\u2019ve been lost in rehearsals all week, trying to get everything just right.\",\n    \"Liam: Oh, that's cool! How's the play coming along? I always admire people who can pour their creativity into something like that.\",\n    \"Ayanda: It\u2019s getting there, slowly but surely. It\u2019s a real challenge bringing all the"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-04-09\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-04-25\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-04-11\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"perform at a small festival\",\n    \"days\": [\n      \"2023-05-06\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    tasks = []\n    task_description = \"track daily expenses\"\n    \n    # Convert conversation date to datetime object\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    dates = []\n    \n    # \"three days ago\"\n    past_date1 = conversation_datetime - timedelta(days=3)\n    dates.append(past_date1.strftime(\"%Y-%m-%d\"))\n    \n    # \"yesterday\"\n    past_date2 = conversation_datetime - timedelta(days=1)\n    dates.append(past_date2.strftime(\"%Y-%m-%d\"))\n    \n    # \"today\"\n    today_date = conversation_datetime\n    dates.append(today_date.strftime(\"%Y-%m-%d\"))\n    \n    # \"Starting in 10 days, for 3 consecutive days\"\n    future_start_date = conversation_datetime + timedelta(days=10)\n    for i in range(3):\n        future_date = future_start_date + timedelta(days=i)\n        dates.append(future_date.strftime(\"%Y-%m-%d\"))\n        \n    # \"this morning\" - Assuming this means today\n    dates.append(today_date.strftime(\"%Y-%m-%d\"))\n\n    # Extract time range\n    hours = (7, 10)\n\n    tasks.append({\n        \"work\": task_description,\n        \"days\": dates,\n        \"hours\": hours\n    })\n\n    return tasks\n\n# Example usage (replace with actual conversation date)\nconversation = [\n\"How\u2019s life been?\",\n\"Liam: Hey Ivan, life's been hectic! I've been really busy with work lately. I had to track daily expenses three days ago, yesterday, today, and I also have to track daily"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    task_description = \"maintain a training schedule\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates and times\n    dates = []\n    hours = (8, 10)\n\n    # Extract dates from conversation\n    for line in conversation:\n        if task_description in line:\n            if \"in 2 days\" in line:\n                date = date_obj + timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"yesterday\" in line:\n                date = date_obj - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"today\" in line:\n                date = date_obj\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"3 consecutive days\" in line:\n                date = date_obj + timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                date = date_obj + timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n                date = date_obj + timedelta(days=4)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n    # Remove duplicates and ensure dates are unique\n    dates = list(set(dates))\n    \n    # Create task dictionary\n    if dates:\n        tasks.append({\n            \"work\": task_description,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return tasks\n\n# Example usage (with the provided conversation):\nconversation = [\n    \""
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-04-24\",\n      \"2023-04-25\",\n      \"2023-04-26\",\n      \"2023-04-27\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2023-04-23\",\n      \"2023-04-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-20\",\n      \"2024-02-25\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-07-17\",\n      \"2024-07-18\"\n    ],\n    \"hours\": (9, 12)\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-08-14\"\n    ],\n    \"hours\": (9, 12)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-04-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Finalizing a business plan\",\n    \"days\": [\n      \"2023-05-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"Level design for VR project\",\n    \"days\": [\n      \"2023-04-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"finalize a presentation\" in line:\n            parts = line.split(\"13 days later\")\n            if len(parts) > 1:\n                # Calculate the date\n                date_str = conversation_date\n                date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n                new_date = date_object + timedelta(days=13)\n                new_date_str = new_date.strftime(\"%Y-%m-%d\")\n\n                # Extract hours\n                if \"8 in the morning\" in line:\n                    start_hour = 8\n                    end_hour = 8 + 3\n                else:\n                    start_hour = None\n                    end_hour = None\n\n                tasks.append({\n                    \"work\": \"Finalize presentation on new energy consumption algorithm\",\n                    \"days\": [new_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Liam: Hey Andrei! Just letting you know, I have to finalize a presentation 13 days later, working from 8 in the morning for three hours. It\u2019s been a busy few weeks getting everything together.\",\n    \"Andrei: That sounds like a demanding task, Liam. Hopefully, you\u2019ll have some time to relax afterwards.\",\n    \"Liam: I'm hoping so! It's a big one for the team, so I want to make sure it\u2019s perfect. It was a bit stressful finalizing a presentation 13 days later, but it is what it is.\",\n    \"Andrei: That\u2019s the spirit. A little pressure can sometimes bring out the best in people"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2023-04-29\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2023-04-26\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview\",\n    \"days\": [\n      \"2023-04-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"Explore a new Python library\",\n    \"days\": [\n      \"2023-05-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-04-24\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-04-27\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-04-28\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"virtual meeting\" in line.lower():\n            task = \"virtual meeting\"\n            \n            if \"three days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                \n                hours = (7, 11) \n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n            if \"yesterday\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 11)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n            if \"today\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 11)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            \n    return tasks\n\n# Example Usage (with the provided conversation)\nconversation = [\n    \"Hey, how have you been?\",\n    \"Jayden: Hi Owen! I've been really busy, I started attending a virtual meeting three days ago, for three consecutive days, from 7 in the morning for four hours each day.\",\n    \"Owen: That sounds intense, Jayden. I\u2019ve been keeping busy with a commission"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2022-09-15\",\n      \"2022-09-16\",\n      \"2022-09-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record daily observations\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\",\n      \"2024-02-07\",\n      \"2024-02-06\",\n      \"2024-02-05\",\n      \"2024-02-04\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update the maintenance log\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-26\",\n      \"2024-03-13\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\",\n      \"2024-03-18\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_and_time(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"work on daily planning\" in line.lower():\n            try:\n                # Extract days offset\n                days_ago = int(line.lower().split(\"days ago\")[0].split(\"eleven \")[1]) if \"eleven days ago\" in line.lower() else int(line.lower().split(\"days ago\")[0].split(\"three \")[1])\n                \n                # Calculate absolute date\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                date_str = date.strftime(\"%Y-%m-%d\")\n\n                # Extract time range\n                start_time_str = line.lower().split(\"from \")[1].split(\" \")[0]\n                start_hour = datetime.strptime(start_time_str, \"%I.%p\").hour\n                end_hour = (start_hour + 4) % 24\n\n                tasks.append({\n                    \"work\": \"Daily planning\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError):\n                pass\n\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Anything interesting happen recently?\",\n    \"Jayden: Hey Mila, things have been pretty hectic! I had to work on daily planning eleven days ago, and then again three days ago, both times from 3 p.m. until 4 hours after that.\",\n    \"Mila: Oh, that sounds\u2026structured. I\u2019ve been trying to keep my head above water with the latest developments. It\u2019s been a whirlwind, honestly.\",\n    \"Jayden: I can imagine. It's hard to stay on top of everything. Thankfully, the daily planning helps"
"```json\n[\n  {\n    \"work\": \"Compile a weekly summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  },\n  {\n    \"work\": \"Practicing build orders\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-09-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\n      \"2022-09-09\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-09-21\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  },\n  {\n    \"work\": \"analysis for upcoming matches\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-09-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Identifies a work-related task and extracts its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"check routine communications\"\n    days = []\n    hours = (7, 11)  # 7 AM to 11 AM (4 hours)\n    \n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    # Extract dates based on relative expressions\n    two_days_ago = conversation_datetime - timedelta(days=2)\n    today = conversation_datetime\n    tomorrow = conversation_datetime + timedelta(days=1)\n    next_week = conversation_datetime + timedelta(days=7)\n\n    if \"started two days ago\" in conversation[1]:\n        days.append(two_days_ago.strftime(\"%Y-%m-%d\"))\n    if \"yesterday\" in conversation[1]:\n        yesterday = conversation_datetime - timedelta(days=1)\n        days.append(yesterday.strftime(\"%Y-%m-%d\"))\n    if \"today\" in conversation[1]:\n        days.append(today.strftime(\"%Y-%m-%d\"))\n    if \"tomorrow\" in conversation[1]:\n        days.append(tomorrow.strftime(\"%Y-%m-%d\"))\n    if \"next week\" in conversation[1]:\n        days.append(next_week.strftime(\"%Y-%m-%d\"))\n\n    if days:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task\n              (work, days, hours).  Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"conduct a daily review session\"\n    start_in_days = 13\n    duration_days = 3\n    start_hour = 16  # 4 p.m.\n    duration_hours = 3\n\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=start_in_days)\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n    end_hour = start_hour + duration_hours\n\n    task_details.append({\n        \"work\": task,\n        \"days\": days,\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"midday walk as part of training regimen\",\n    \"days\": [\n      \"2022-09-29\",\n      \"2022-09-30\",\n      \"2022-10-01\",\n      \"2022-10-02\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date on which the conversation happened.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n    tasks = []\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    \n    for line in conversation:\n        if \"check inventory levels\" in line.lower():\n            # Extract temporal information\n            if \"four days later\" in line.lower():\n                date1 = conversation_date + timedelta(days=4)\n                date_str1 = date1.strftime(\"%Y-%m-%d\")\n            else:\n                date_str1 = None\n\n            if \"nine days later\" in line.lower():\n                date2 = conversation_date + timedelta(days=9)\n                date_str2 = date2.strftime(\"%Y-%m-%d\")\n            else:\n                date_str2 = None\n            \n            if \"12 p.m.\" in line:\n                start_hour = 12\n                end_hour = 14\n\n                task_details = {\n                    \"work\": \"check inventory levels\",\n                    \"days\": [date_str1, date_str2] if date_str1 and date_str2 else ([date_str1] if date_str1 else [date_str2]),\n                    \"hours\": (start_hour, end_hour)\n                }\n\n                tasks.append(task_details)\n        \n        if \"transcribe all the interviews\" in line.lower():\n            task_details = {\n                \"work\": \"transcribe all the interviews\",\n                \"days\": [],\n                \"hours\": (0, 0)\n            }\n            tasks.append(task_details)    \n\n    return tasks\n```\n```output\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"20"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"update the sales log\"\n    dates = []\n    hours = (7, 11)  # 7 AM to 11 AM (4 hours)\n\n    # Calculate dates based on offsets\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    # First occurrence: five days later\n    date1 = date_obj + timedelta(days=5)\n    dates.append(date1.strftime(\"%Y-%m-%d\"))\n\n    # Second occurrence: six days later\n    date2 = date_obj + timedelta(days=6)\n    dates.append(date2.strftime(\"%Y-%m-%d\"))\n\n    # Third occurrence: ten days later\n    date3 = date_obj + timedelta(days=10)\n    dates.append(date3.strftime(\"%Y-%m-%d\"))\n\n    task_details.append({\n        \"work\": task,\n        \"days\": dates,\n        \"hours\": hours\n    })\n\n    return task_details\n```\n\n```\n[\n    {\n        \"work\": \"update the sales log\",\n        \"days\": [\n            \"2024-01-06\",\n            \"2024-01-07\",\n            \"2024-01-11\"\n        ],\n        \"hours\": (\n            7,\n            11\n        )\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2022-09-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"practicing and scrims for the next tournament\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"new program to support young mothers (workshops and childcare resources)\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (work, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task\n              and contains the keys 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a workshop agenda\" in line:\n            task_description = \"prepare a workshop agenda\"\n            try:\n                days_later = int(line.split(\" \")[-3])  # Extract the number of days later\n                task_date = conversation_date + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                start_hour = int(line.split(\"from \")[1].split(\" in the morning\")[0])\n                end_hour = start_hour + 2\n                \n                tasks.append({\n                    \"work\": task_description,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing date/time: {e}\")\n\n    return tasks\n\n# Example usage (using the provided conversation):\nconversation = [\n    \"Jayden: What\u2019s on your mind? I\u2019ve been really busy lately - I had to prepare a workshop agenda 13 days later, from 7 in the morning for two hours.\",\n    \"Camila: Oh, that sounds\u2026 involved! I've been sketching out ideas for a new mural downtown, it's a big project.\",\n    \"Jayden: It was! It"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    date_map = {\n        \"today\": datetime.strptime(conversation_date, \"%Y-%m-%d\").date(),\n        \"yesterday\": datetime.strptime(conversation_date, \"%Y-%m-%d\").date() - timedelta(days=1),\n        \"tomorrow\": datetime.strptime(conversation_date, \"%Y-%m-%d\").date() + timedelta(days=1),\n        \"next week\": datetime.strptime(conversation_date, \"%Y-%m-%d\").date() + timedelta(days=7)\n    }\n\n    for line in conversation:\n        if \"client meeting\" in line.lower():\n            try:\n                time_info = line.lower().split(\"from\")\n                start_time_str = time_info[1].split(\"for\")[0].strip()\n                duration_str = time_info[1].split(\"for\")[1].strip()\n                \n                start_hour = int(start_time_str.split(\" \")[0])\n                \n                if \"morning\" in start_time_str:\n                    if start_hour != 12:\n                        start_hour = start_hour\n                    else: \n                        start_hour = 0\n                elif \"afternoon\" in start_time_str:\n                    start_hour += 12\n                elif \"evening\" in start_time_str:\n                    start_hour += 18\n                \n                duration = int(duration_str.split(\" \")[0])\n                end_hour = (start_hour + duration) % 24\n                \n                # Extract date\n                date_keyword = \"\"\n                if \"tomorrow\" in line.lower():\n                    date_keyword = \"tomorrow\"\n                elif \"yesterday\" in line.lower():\n"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2022-09-22\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2020-07-14\",\n      \"2020-07-15\",\n      \"2020-07-16\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.  \n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor website analytics\" in line:\n            task = \"monitor website analytics\"\n            days_ago = 23\n            duration = 4\n            start_time = 7\n            end_time = start_time + 4\n\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_time, end_time)\n            })\n        \n        if \"pop-up shop\" in line and \"holidays\" in line:\n            task = \"plan pop-up shop\"\n            # Assuming \"later this year\" is vague, and holidays refer to December\n            dates = [\"2024-12-01\", \"2024-12-31\"] \n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (9, 17)  # Assuming a standard workday for planning\n            })\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Good to hear from you!\",\n    \"Ananya: Hey Malik! Just letting you know I\u2019ve been really busy lately - I started to monitor website analytics 23 days ago, for 4 consecutive days, and I was doing that from 7 in the morning for four hours each day.\",\n    \"Malik: That"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2020-07-11\",\n      \"2020-07-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update the project dashboard\" in line:\n            task = \"update the project dashboard\"\n            \n            # Extract dates\n            days_list = []\n            if \"26 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=26)\n                days_list.append(date.strftime(\"%Y-%m-%d\"))\n            if \"17 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=17)\n                days_list.append(date.strftime(\"%Y-%m-%d\"))\n            if \"13 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=13)\n                days_list.append(date.strftime(\"%Y-%m-%d\"))\n            if \"soon\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1) #Assuming soon is next day\n                days_list.append(date.strftime(\"%Y-%m-%d\"))\n\n            # Extract hours\n            hours = (11, 14)  # 11 AM for three hours\n\n            tasks.append({\n                \"work\": task,\n                \"days\": days_list,\n                \"hours\": hours\n            })\n        if \"editing footage\" in line:\n            task = \"editing footage\"\n            hours = (9,"
"```json\n[\n  {\n    \"work\": \"sketching out designs for a new line inspired by Rajasthan\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"finalizing fabric samples for the Rajasthan collection\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new line incorporating new hand-woven fabrics\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"drafting a new poem\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"product demo\",\n    \"days\": [\"2024-02-02\"],\n    \"hours\": [15, 18]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-07-07\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-01-24\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\"2024-02-13\"],\n    \"hours\": [15, 17]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyzing customer feedback\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2020-07-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"designing a new collection\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\"2024-02-29\"],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"sourcing handwoven silks\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"attend the textile expo\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2020-07-20\",\n      \"2020-07-21\",\n      \"2020-07-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-07-28\",\n      \"2020-07-29\",\n      \"2020-07-30\",\n      \"2020-07-31\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, and hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task and\n              contains its description, dates, and hours.  Returns an empty list\n              if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"update a work log\" in line:\n            task = \"Update work log\"\n            \n            # Extract days offset\n            days1 = 16\n            days2 = 23\n\n            # Calculate absolute dates\n            date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            date1 = date_obj + timedelta(days=days1)\n            date2 = date_obj + timedelta(days=days2)\n            date1_str = date1.strftime(\"%Y-%m-%d\")\n            date2_str = date2.strftime(\"%Y-%m-%d\")\n\n\n            # Extract hours\n            start_hour = 12\n            end_hour = start_hour + 3\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [date1_str, date2_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        elif \"new collection\" in line and \"embroidery\" in line:\n            task = \"Work on new collection (Mughal gardens)\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [],\n                \"hours\": (0, 0)\n            })\n        elif \"calligraphy workshop\" in line and \"last week\" in line:\n            task = \"Host calligraphy workshop\"\n            date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            last_week_date = date"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2020-07-18\",\n      \"2020-07-20\",\n      \"2020-07-30\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a daily safety check\",\n    \"days\": [\n      \"2020-07-23\",\n      \"2020-07-28\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-07-21\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"working on a new collection using recycled fabrics\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2020-07-29\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.  Empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"team outing\" in line.lower():\n            try:\n                # Extract the time range\n                start_time_str = \"5 p.m.\"\n                start_hour = int(start_time_str.split(\" \")[0])\n                if \"p.m.\" in start_time_str:\n                    start_hour += 12\n                \n                end_hour = start_hour + 2\n\n                # Calculate the date 5 days ago\n                conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                outing_date = conversation_date_obj - timedelta(days=5)\n                outing_date_str = outing_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"plan a team outing\",\n                    \"days\": [outing_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError):\n                pass  # Handle potential errors during time parsing\n\n        if \"concert\" in line.lower() and \"next month\" in line.lower():\n            try:\n                # Calculate the date for next month's concert\n                conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                next_month = conversation_date_obj.month + 1\n                next_year = conversation_date_obj.year\n                if next_month > 12:\n                    next_month = 1\n                    next_year += 1\n\n                concert_date = datetime(next_year, next_month, 1).strftime(\"%Y-%m-%d\")\n\n                tasks."
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"sketch out some new designs\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      12,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-07-24\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2020-07-19\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  },\n  {\n    \"work\": \"designing the autumn collection\",\n    \"days\": [\n      \"2020-07-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-07-18\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"midday walk\",\n    \"days\": [\n      \"2024-01-27\",\n      \"2024-01-28\",\n      \"2024-01-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"ironwork\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"future projects\",\n    \"days\": [\n      \"2024-01-27\",\n      \"2024-01-28\",\n      \"2024-01-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-01\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2024-01-25\",\n      \"2024-01-30\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"a large panel for a local cultural center\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-01-28\",\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"sheep shearing\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"working on a new gate design\",\n    \"days\": [\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-01-24\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"rehearsals for a new play\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-01-27\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a gate for a new manor house\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"rewrites on my new play\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-07-18\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"gate commission\",\n    \"days\": [\n      \"2024-07-27\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"routine inspections\" in line.lower() and \"working from 7\" in line.lower():\n            task = \"Conduct routine inspections\"\n            start_time = 7\n            duration = 4\n            end_time = start_time + duration\n            \n            # Extract the start date\n            days_ago = int(line.lower().split(\"three days ago\")[0].split(\"started to conduct\")[1].strip())\n            start_date = conversation_date - timedelta(days=days_ago)\n            \n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_time, end_time)\n            })\n        elif \"finishing up conducting routine inspections tomorrow\" in line.lower():\n            task = \"Conduct routine inspections\"\n            start_time = 7\n            duration = 4\n            end_time = start_time + duration\n            \n            # Extract tomorrow's date\n            tomorrow_date = conversation_date + timedelta(days=1)\n            dates = [tomorrow_date.strftime(\"%Y-%m-%d\")]\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_time, end_time)\n            })\n\n    return"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-02-11\",\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-19\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2024-02-10\",\n      \"2024-02-14\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"designing a gate\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-07-18\",\n      \"2024-08-05\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"producing a quarterly report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design gate for local estate\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"starting on a new gate design\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"sketch forge designs\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-04-05\",\n      \"2024-04-06\",\n      \"2024-04-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-13\",\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-04-05\",\n      \"2024-04-06\",\n      \"2024-04-07\",\n      \"2024-04-08\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-15\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"managing a support ticket queue\",\n    \"days\": [\n      \"2024-04-09\",\n      \"2024-04-11\",\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-04-08\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"practicing for a gig\",\n    \"days\": [\n      \"2024-04-27\",\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2024-04-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"practice hours\",\n    \"days\": [\n      \"2024-04-15\",\n      \"2024-04-16\",\n      \"2024-04-17\",\n      \"2024-04-18\",\n      \"2024-04-19\",\n      \"2024-04-20\",\n      \"2024-04-21\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"collect more samples\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-04-05\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"write something for the club anniversary\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a budget proposal\",\n    \"days\": [\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"performing at The Blue Note\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-04-04\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"songwriting\",\n    \"days\": [\n      \"2024-04-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"webinar session\" in line:\n            try:\n                # Extract date\n                date_str = \"seven days ago\"\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                offset_days = 7\n                task_date = date_obj - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract time range\n                start_time = 12\n                end_time = 16  # 4 p.m. in 24-hour format\n\n                tasks.append({\n                    \"work\": \"host a webinar session\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_time, end_time)\n                })\n            except ValueError:\n                pass  # Handle cases where date parsing fails\n\n        if \"illustration\" in line and \"working on\" in line:\n            tasks.append({\n                \"work\": \"working on a detailed illustration\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17) # Assuming a typical workday, can be more precise if time is mentioned in text\n            })\n\n    return tasks\n\n# Example usage\nconversation = [\n    \"Is life treating you well?\",\n    \"Stella: Oh, hey Atsuko! Life's been a bit of a whirlwind, honestly. I had to host a webinar session seven days ago from 12 p.m. until 4 in the afternoon, and it really took it out of me"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-04-07\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"working on a new interpretation of \\\"Summertime\\\"\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-04-17\",\n      \"2024-04-18\",\n      \"2024-04-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-25\",\n      \"2024-04-26\",\n      \"2024-04-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-19\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-04-18\",\n      \"2024-04-19\",\n      \"2024-04-20\",\n      \"2024-04-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"set at The Blue Note\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-04-19\",\n      \"2024-04-28\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-04-17\",\n      \"2024-04-22\",\n      \"2024-04-29\",\n      \"2024-04-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-03-08\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-03-08\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"revise a project timeline\" in line:\n            # Extract temporal information\n            if \"tomorrow\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n            elif \"yesterday\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n            elif \"two days ago\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)).strftime(\"%Y-%m-%d\")\n            elif \"in 2 days\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)).strftime(\"%Y-%m-%d\")\n            elif \"Starting in 3 days for 4 consecutive days\" in line:\n                dates = []\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                for i in range(4):\n                    dates.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n                date = dates\n            elif \"next week\" in line:\n                date = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)).strftime(\"%Y-%m-%d\")\n            else:\n                date = None  # Could not determine date"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-04-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2024-04-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"finalizing the menu\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"training\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": [\n      10,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2021-06-01\",\n      \"2021-06-02\",\n      \"2021-06-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-04\",\n      \"2021-06-05\",\n      \"2021-06-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-05\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-06\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"routine testing\" in line.lower():\n            try:\n                # Extract the offset in days\n                offset_days = int(line.lower().split(\"ten days ago\")[0].split()[-1])\n\n                # Calculate the start date\n                start_date = conversation_date - timedelta(days=offset_days)\n\n                # Extract the duration in days\n                duration_days = int(line.lower().split(\"for\")[1].split(\"consecutive days\")[0])\n\n                # Calculate the list of dates\n                dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n                # Extract the start and end hours\n                start_hour = int(line.lower().split(\"from\")[1].split(\"in the afternoon\")[0]) + 12\n                end_hour = start_hour + 3\n\n                tasks.append({\n                    \"work\": \"routine testing\",\n                    \"days\": dates,\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing task details: {e}\")\n\n    return tasks\n\n# Example Usage (with the provided input):\nconversation = [\n    \"Good to hear from you!\",\n    \"Dominic: Hugo, it's great to connect with you. I've been really busy lately \u2013 I started to perform"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2021-05-25\",\n      \"2021-05-27\",\n      \"2021-06-02\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"designing the next boat\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"working on a new collection\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-08\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2021-05-27\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a contract\",\n    \"days\": [\n      \"2021-06-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"sketching designs for a new community project\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      12,\n      17\n    )\n  },\n  {\n    \"work\": \"starting on a small currach\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"sculpting a Persephone figure\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-05-30\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"restoring an old boat\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a financial report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"manga project\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2021-06-05\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2021-05-26\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"building a small currach for a local fisherman\",\n    \"days\": [\n      \"2021-06-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"finish manga chapter\",\n    \"days\": [\n      \"2021-06-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2021-06-18\",\n      \"2021-06-19\",\n      \"2021-06-20\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"take a midday walk\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2021-06-18\",\n      \"2021-06-19\",\n      \"2021-06-20\",\n      \"2021-06-21\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2021-06-15\",\n      \"2021-06-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"wrestling with a particularly tricky algorithm\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"shaping the timbers for a currach\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2021-06-14\",\n      \"2021-06-21\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"task checklist\" in line:\n            try:\n                parts = line.split(\"from \")\n                time_details = parts[1]\n                \n                if \"days later\" in line:\n                    days_later = int(line.split(\"days later\")[0].split()[-1])\n                    task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_later)\n                    days = [task_date.strftime(\"%Y-%m-%d\")]\n                elif \"days ago\" in line:\n                    days_ago = int(line.split(\"days ago\")[0].split()[-1])\n                    task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                    days = [task_date.strftime(\"%Y-%m-%d\")]\n                elif \"in 2 days\" in line:\n                    task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                    days = [task_date.strftime(\"%Y-%m-%d\")]\n                elif \"yesterday\" in line:\n                     task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                     days = [task_date.strftime(\"%Y-%m-%d\")]\n                else:\n                    days = [] # Handle cases where the time reference is unclear\n\n                hour_str = time_details.split(\" for \")[0].split()[-1]        \n                start_hour"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    work_tasks = []\n    for line in conversation:\n        if \"analyzing customer feedback\" in line:\n            task = \"analyzing customer feedback\"\n            try:\n                # Extract the number of days later\n                days_later = int(line.split(\" \")[-4])\n                \n                # Calculate the date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time\n                time_str = line.split(\"from \")[1].split(\" for\")[0]\n                hour_str = time_str.split(\" in\")[1].strip()\n                \n                if \"afternoon\" in line:\n                    hour = 15  # 3 PM\n                elif \"morning\" in line:\n                    hour = 9\n                else:\n                    hour = int(hour_str)\n                    \n                duration_hours = int(line.split(\"for \")[1].split(\" hours\")[0])\n                end_hour = (hour + duration_hours) % 24\n                \n                work_tasks.append({\n                    \"work\": task,\n                    \"days\": [task_date_str],\n                    \"hours\": (hour, end_hour)\n                })\n            except:\n                pass\n                \n    return work_tasks\n\n# Example usage:\nconversation = [\n    \"Hope you\u2019re doing wonderfully.\",\n    \"Dominic: Hey Evan, just letting you know I\u2019"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"repair a rowing skiff\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-06-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no work task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    results = []\n\n    for line in conversation:\n        if \"blog post\" in line and \"writing\" in line:\n            try:\n                # Extract temporal information\n                days_ago = int(\"five\".replace(\"five\", \"5\"))\n                task_date = conversation_date - timedelta(days=days_ago)\n                start_time_str = \"1 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n                end_time = (datetime.combine(task_date, start_time) + timedelta(hours=2)).time()\n\n                # Format output\n                results.append({\n                    \"work\": \"writing a technical blog post\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_time.hour, end_time.hour)\n                })\n            except ValueError:\n                pass  # Handle potential parsing errors\n\n        if \"competition next month\" in line and \"preparing\" in line:\n            try:\n                # Extract temporal information\n                next_month = conversation_date.month + 1\n                next_year = conversation_date.year\n                if next_month > 12:\n                    next_month = 1\n                    next_year += 1\n                \n                first_day_next_month = datetime(next_year, next_month, 1).strftime(\"%Y-%m-%d\")\n\n                results.append({\n                    \""
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, date, time) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"team outing\" in line.lower() and \"plan\" in line.lower():\n            # Extract date\n            if \"ten days later\" in line.lower():\n                date_str = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=10)\n                date = date_str.strftime(\"%Y-%m-%d\")\n            elif \"yesterday\" in line.lower():\n                date_str = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                date = date_str.strftime(\"%Y-%m-%d\")\n            else:\n                date = None\n\n            # Extract time\n            if \"3 p.m.\" in line.lower() and \"4 hours\" in line.lower():\n                start_hour = 15\n                end_hour = 19\n            elif \"3 p.m.\" in line.lower() and \"four hours\" in line.lower():\n                start_hour = 15\n                end_hour = 19\n            else:\n                start_hour = None\n                end_hour = None\n\n            if date and start_hour and end_hour:\n                tasks.append({\n                    \"work\": \"Plan team outing\",\n                    \"days\": [date],\n                    \"hours\": (start_hour, end_hour)\n                })\n    return tasks\n\n# Example Usage with the provided input:\nconversation = [\n    \"Joel: Just sending some positive vibes your way.\",\n    \"Dominic: Thanks,"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"take a midday walk\",\n    \"days\": [\n      \"2023-08-03\",\n      \"2023-08-04\",\n      \"2023-08-05\",\n      \"2023-08-06\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-01-23\",\n      \"2024-01-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-08-04\",\n      \"2023-08-06\",\n      \"2023-08-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-07-30\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-07-31\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"working on a new collection using recycled materials\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-07-29\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"perfect new dishes at the restaurant\",\n    \"days\": [\n      \"2023-08-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"training schedule\",\n    \"days\": [\n      \"2023-08-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2023-08-05\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"gymnastics training\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"pitching an idea for a new community art project\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      10,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-07-11\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"cataloging a newly acquired collection of Victorian-era jewelry\",\n    \"days\": [\n      \"2024-07-27\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"heading to an antique fair\",\n    \"days\": [\n      \"2024-07-28\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor production output\" in line.lower():\n            task = \"Monitor production output\"\n            \n            if \"18 days\" in line.lower():\n                days = [ (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=18)).strftime(\"%Y-%m-%d\") ]\n                hours = (15, 18)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n            \n            if \"two days ago\" in line.lower():\n                days = [ (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)).strftime(\"%Y-%m-%d\") ]\n                hours = (15, 18)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n                \n            if \"17 days\" in line.lower():\n                days = [ (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=17)).strftime(\"%Y-%m-%d\") ]\n                hours = (15, 18)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n            if \"19 days\" in line.lower():\n                days = [ (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=19)).strftime(\"%Y-%m-%d\") ]\n                hours = (15, 18)\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n    return tasks\n\n# Example Usage\nconversation = [\n    \"Ali: Just wanted to see how you are doing.\",\n    \"Makayla: Hi Ali! I'm doing okay, just a little tired. I"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-30\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2023-08-07\",\n      \"2023-08-11\",\n      \"2023-08-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2023-08-13\",\n      \"2023-08-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-08-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"start a new floor routine\",\n    \"days\": [\n      \"2023-08-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-07-17\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-08-07\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-08-09\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"prepare for the costume brainstorm\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2020-10-29\",\n      \"2020-10-30\",\n      \"2020-10-31\",\n      \"2020-11-01\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-10-30\",\n      \"2020-10-31\",\n      \"2020-11-02\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"secure funding for community centre\",\n    \"days\": [\n      \"2020-11-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-12\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (9, 13)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-11-01\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"getting the new collection ready for the show\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"rehearsals for a small production at a local theatre\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\"2024-02-13\"],\n    \"hours\": [7, 9]\n  },\n  {\n    \"work\": \"perfecting a new gymnastics floor routine\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist for finalizing details for the new play\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-10-25\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no relevant information is found.\n    \"\"\"\n\n    features = []\n    for line in conversation:\n        if \"compile a weekly summary\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-2])  # Extract the number before \"days\"\n\n                # Calculate the absolute date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end hours\n                start_hour = int(line.split(\"from \")[1].split(\" \")[0])\n                end_hour = start_hour + 3\n\n                features.append({\n                    \"work\": \"compile a weekly summary\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing temporal information: {e}\")\n                continue  # Skip to the next line if parsing fails\n    return features\n\n# Example usage\nconversation = [\n    \"Alicia: Everything okay on your end?\",\n    \"Ayanda: Yes, things are alright, though I\u2019ve been swamped with work lately. I had to compile a weekly summary 8 days later from 7 in the morning for three hours. It was quite a stretch, but I got it done.\",\n    \"Alicia: Oh, that sounds demanding! I completely understand having periods like that. I find myself juggling"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-26\",\n      \"2024-02-25\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2020-11-01\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"restoration project\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"writing\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"sketch out ideas for a new play\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2020-11-07\",\n      \"2020-11-08\",\n      \"2020-11-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"brainstorm ideas for a new play\",\n    \"days\": [\n      \"2020-11-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2020-11-11\",\n      \"2020-11-12\",\n      \"2020-11-13\",\n      \"2020-11-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-02-24\",\n      \"2024-03-05\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-27\",\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-07-12\",\n      \"2024-07-28\"\n    ],\n    \"hours\": (11, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-11-11\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    task_details = []\n    work_task = \"create a social media post\"\n    days = []\n    hours = None\n\n    for line in conversation:\n        if work_task in line.lower() and \"days later\" in line.lower():\n            try:\n                offset_days = int(line.lower().split(\"days later\")[0].split()[-1])\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                days.append(task_date.strftime(\"%Y-%m-%d\"))\n\n                start_hour = int(line.lower().split(\"starting from\")[1].split(\" \")[0])\n                end_hour = start_hour + 4\n\n                hours = (start_hour, end_hour)\n            except (ValueError, IndexError):\n                pass  # Handle cases where the offset or time is not properly formatted\n\n    if days and hours:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n\n# Example Usage:\nconversation = [\n    \"What\u2019s the latest news?\",\n    \"Ayanda: Hey Ananya, just letting you know I have to create a social media post nine days later, starting from 7 in the morning for four hours.\",\n    \"Ananya: Oh, that sounds like a good way to spend the day, Ayanda! I\u2019ve been meaning to ask, how\u2019s the new play coming along?\",\n    \"Ayanda: It\u2019s getting there, slowly but surely. Lots of revisions and rehearsals. I actually had to create a social media post nine days later, and the process was quite exhausting, but needed to be done.\",\n    \"Ananya:"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\"2020-11-16\"],\n    \"hours\": (15, 17)\n  },\n  {\n    \"work\": \"theatre work (rehearsals, script readings, lighting)\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"workshopping a new play\",\n    \"days\": [\"2020-11-23\", \"2020-11-24\", \"2020-11-25\", \"2020-11-26\", \"2020-11-27\", \"2020-11-28\", \"2020-11-29\"],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"managing a client presentation\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"editing a new play\",\n    \"days\": [\n      \"2020-11-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-11-10\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"brainstorm new ideas for a play\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"catch a new production\",\n    \"days\": [\n      \"2020-11-15\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"quarterly report\" in line.lower() and \"15 days later\" in line.lower() and \"a.m.\" in line.lower():\n            try:\n                # Calculate the date 15 days from the conversation date\n                date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                report_date = date_object + timedelta(days=15)\n                report_date_str = report_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 11\n                end_hour = 13  # 11 a.m. + 2 hours\n\n                task_details = {\n                    \"work\": \"produce a quarterly report\",\n                    \"days\": [report_date_str],\n                    \"hours\": (start_hour, end_hour)\n                }\n                tasks.append(task_details)\n            except ValueError:\n                # Handle potential errors in date parsing\n                pass\n\n    return tasks\n\nconversation = [\n    \"Just wanted to connect.\",\n    \"Ayanda: Hey Noor! So, I just wanted to let you know, I have to produce a quarterly report 15 days later from 11 a.m. for two hours.\",\n    \"Noor: Hi Ayanda! That's good to hear from you. I was just thinking about how quickly time is flying by.\",\n    \"Ayanda: It really is! I\u2019m already thinking about what goes into the report \u2013 it\u2019s always a bit of a scramble.\",\n    \"Noor: Oh, well, when you'"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"rehearsals for a community play\",\n    \"days\": [\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-06-22\",\n      \"2024-06-23\",\n      \"2024-06-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-06-14\",\n      \"2024-06-15\",\n      \"2024-06-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-06-24\",\n      \"2024-06-25\",\n      \"2024-06-26\",\n      \"2024-06-27\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"briefcase\" in line.lower():\n            tasks.append({\n                \"work\": \"briefcase making\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)  # Assuming a standard workday\n            })\n        if \"water the office plants\" in line.lower():\n            try:\n                # Extract numerical values for days ago\n                days_ago1 = int(line.lower().split(\"days ago\")[0].split(\"to water the office plants \")[1].strip().split(\" \")[0])\n                days_ago2 = int(line.lower().split(\"days ago\")[1].split(\"and then again \")[1].split(\" \")[0])\n\n                # Calculate the dates\n                date_format = \"%Y-%m-%d\"\n                conversation_datetime = datetime.strptime(conversation_date, date_format)\n                date1 = conversation_datetime - timedelta(days=days_ago1)\n                date2 = conversation_datetime - timedelta(days=days_ago2)\n                \n                # Extract the time\n                start_time = 17  # 5 p.m.\n                end_time = start_time + 2\n                \n                tasks.append({\n                    \"work\": \"watering office plants\",\n                    \"days\": [date1.strftime(date_format), date2.strftime(date_format)],\n                    \"hours\": (start_time, end_time)\n                })\n            except:\n                pass\n        if \"currach\" in line.lower():\n            tasks.append"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-06-16\",\n      \"2024-06-17\",\n      \"2024-06-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project progress\",\n    \"days\": [\n      \"2024-06-17\",\n      \"2024-06-22\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-06-18\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.  Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            try:\n                # Extract temporal information\n                time_str = line.split(\"from \")[1].split(\" for \")[0]\n                start_hour = int(time_str.split(\" \")[0])\n                duration_hours = int(line.split(\" for \")[1].split(\" hours\")[0])\n                end_hour = start_hour + duration_hours\n\n                # Calculate the date\n                offset_days = 9\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"organize a strategy meeting\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError) as e:\n                print(f\"Error parsing temporal information: {e}\")\n\n    return tasks\n\n\nconversation = [\n    \"Tom: What\u2019s on your mind? I just wanted to let you know I have to organize a strategy meeting nine days later from 7 in the morning for three hours.\",\n    \"Xavier: Oh, that sounds like a big undertaking, Tom. Anything interesting happening with your leather work lately?\",\n    \"Tom: It is, but I\u2019m enjoying the challenge. I finished a beautiful briefcase just yesterday, a real labor of love. The client is thrilled with it.\",\n    \"Xavier: That\u2019s fantastic! I know how much pride you take in your craft. I\u2019ve been working on a new arrangement for the band, trying to capture that old"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"drafting a customer feedback report\" in line:\n            task = \"drafting a customer feedback report\"\n            days_ago = int(line.split(\" \")[-3])\n            task_date = conversation_date - timedelta(days=days_ago)\n            hours_match = re.search(r'(\\d{1,2}):(\\d{2})', line)\n            if hours_match:\n                start_hour = int(hours_match.group(1))\n                end_hour = start_hour + int(line.split(\"for \")[1].split(\" \")[0])\n                hours = (start_hour, end_hour)\n            else: \n                hours = (0, 0)\n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": hours\n            })\n        if \"starting a new wallet design\" in line:\n            task = \"starting a new wallet design\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (0, 0)\n            })\n\n\n    return tasks\nimport re\nconversation = [\n    \"Tom: How's your week been so far?\",\n    \"Helen: It's been lovely, thank you! I had a really interesting discussion with some students about Pericles earlier. How about you, Tom? Are you busy with any interesting projects?\",\n    \"Tom: Things are pretty good. I just finished drafting a customer"
"```json\n[\n  {\n    \"work\": \"creating a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"working on a custom briefcase\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Updating an inventory list\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-07-03\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its temporal details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"training session three days ago\" in line:\n            task = \"deliver a training session\"\n            offset_days = -3\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n            date_str = date.strftime(\"%Y-%m-%d\")\n            hours = (7, 11)  # 7 am for 4 hours\n            tasks.append({\"work\": task, \"days\": [date_str], \"hours\": hours})\n        if \"workshop next month\" in line:\n            task = \"workshop on storytelling through art\"\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=30)\n            date_str = date.strftime(\"%Y-%m-%d\")\n            tasks.append({\"work\": task, \"days\": [date_str], \"hours\": (9, 17)})\n        if \"leather-working workshop\" in line:\n            task = \"leather-working workshop\"\n            tasks.append({\"work\": task, \"days\": [], \"hours\": (9, 17)}) \n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"Submit a project proposal\",\n    \"days\": [\n      \"2024-06-14\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"Working on a briefcase\",\n    \"days\": [\n      \"2024-06-17\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"client meeting\" in line:\n            if \"tomorrow\" in line:\n                meeting_date = date + timedelta(days=1)\n                days = [meeting_date.strftime(\"%Y-%m-%d\")]\n            elif \"yesterday\" in line:\n                meeting_date = date - timedelta(days=1)\n                days = [meeting_date.strftime(\"%Y-%m-%d\")]\n            elif \"two days ago\" in line:\n                 meeting_date = date - timedelta(days=2)\n                 days = [meeting_date.strftime(\"%Y-%m-%d\")]\n            elif \"three days ago\" in line:\n                 meeting_date = date - timedelta(days=3)\n                 days = [meeting_date.strftime(\"%Y-%m-%d\")]\n            elif \"two days from now\" in line:\n                meeting_date = date + timedelta(days=2)\n                days = [meeting_date.strftime(\"%Y-%m-%d\")]\n            else:\n                days = [] # No date mentioned\n\n            hours = (9, 11)\n            tasks.append({\"work\": \"client meeting\", \"days\": days, \"hours\": hours})\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-06-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-07-03\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-07-03\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor quality control metrics\" in line:\n            task = \"monitor quality control metrics\"\n            days = []\n            hours = (7, 11)\n\n            if \"Starting in 17 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=17)\n                for i in range(3):\n                    days.append(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\")\n            \n            if \"next three days after that\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=20)\n                for i in range(3):\n                    days.append(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\")\n\n            if \"today\" in line:\n                today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days.append(today.strftime(\"%Y-%m-%d\"))\n\n            if \"in 17 days\" in line and \"three consecutive days\" in line:\n                 start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=17)\n                 for i in range(3):\n                    days.append(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\")\n\n            if days:\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n    \n    # Remove duplicates"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-07-01\",\n      \"2024-07-02\",\n      \"2024-07-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update performance log\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-06-28\",\n      \"2024-07-04\"\n    ],\n    \"hours\": (12, 16)\n  },\n  {\n    \"work\": \"making a custom briefcase\",\n    \"days\": [\n      \"2024-06-28\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-06-27\",\n      \"2024-07-07\",\n      \"2024-07-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"routine testing\" in line.lower():\n            # Extract temporal information\n            if \"11 days ago\" in line.lower():\n                date1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=11)\n                date1_str = date1.strftime(\"%Y-%m-%d\")\n            else:\n                date1_str = None\n\n            if \"9 days ago\" in line.lower():\n                date2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=9)\n                date2_str = date2.strftime(\"%Y-%m-%d\")\n            else:\n                date2_str = None\n\n            if \"8 in the morning\" in line.lower() and \"three hours\" in line.lower():\n                hours = (8, 11)  # 8:00 AM to 11:00 AM\n            else:\n                hours = None\n            \n            task_details = {\n                \"work\": \"perform routine testing\",\n                \"days\": [date1_str, date2_str] if date1_str and date2_str else [],\n                \"hours\": hours\n            }\n            tasks.append(task_details)\n\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Thought I\u2019d drop you a line.\",\n    \"Tom: Hey Carmen, just wanted to let you know I was doing quite a bit of perform routine testing recently \u2013 I did some 11 days ago, and then again 9 days ago, all from 8 in the morning for three hours.\",\n    \"Carmen: Oh, that sounds thorough, Tom! I've been trying to reorganise the local history section; it"
"```json\n[\n  {\n    \"work\": \"Compile a research summary\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-07-04\"\n    ],\n    \"hours\": [\n      9,\n      12\n    ]\n  },\n  {\n    \"work\": \"work on a briefcase\",\n    \"days\": [\n      \"2024-07-09\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-07-09\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-07-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"working on a special briefcase\",\n    \"days\": [\n      \"2024-06-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-07-07\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"prep work for the next batch of orders\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation for resolving relative dates. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.  Returns an empty list if no task is found.\n    \"\"\"\n    work_task = \"set up a conference call\"\n    days = []\n    hours = (11, 15)  # 11 AM to 4 PM (11 + 4 = 15)\n    \n    # Calculate the target date\n    target_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=18)\n    target_date_str = target_date.strftime(\"%Y-%m-%d\")\n    days.append(target_date_str)\n\n    return [{\"work\": work_task, \"days\": days, \"hours\": hours}]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2022-12-24\",\n      \"2022-12-25\",\n      \"2022-12-26\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2022-12-19\",\n      \"2022-12-20\",\n      \"2022-12-21\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2022-12-17\",\n      \"2022-12-22\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine maintenance\",\n    \"days\": [\n      \"2022-12-17\",\n      \"2022-12-27\",\n      \"2022-12-29\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2022-12-18\",\n      \"2022-12-23\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting a legal memorandum\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"analyzing evidence\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-12-23\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  },\n  {\n    \"work\": \"work on reports\",\n    \"days\": [\n      \"2023-01-12\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2022-12-19\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2022-12-20\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-12-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-12-19\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2022-12-21\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"start a new briefcase project\",\n    \"days\": [\n      \"2023-01-03\",\n      \"2023-01-04\",\n      \"2023-01-05\",\n      \"2023-01-06\",\n      \"2023-01-07\",\n      \"2023-01-08\",\n      \"2023-01-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-07-19\",\n      \"2024-07-20\",\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2023-01-04\",\n      \"2023-01-05\",\n      \"2023-01-06\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2023-01-09\",\n      \"2023-01-10\",\n      \"2023-01-11\",\n      \"2023-01-12\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-01-07\",\n      \"2023-01-10\",\n      \"2023-01-13\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2022-12-31\",\n      \"2023-01-04\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n\n                # Calculate the date of the meeting\n                meeting_date = conversation_date + timedelta(days=offset_days)\n                meeting_date_str = meeting_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end hours\n                start_hour = int(line.split(\" \")[-6].split(\":\")[0])\n                end_hour = start_hour + 3\n\n                tasks.append({\n                    \"work\": \"organize a strategy meeting\",\n                    \"days\": [meeting_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n\n# Example Usage:\nconversation = [\n    \"I\u2019ve been meaning to reach out.\",\n    \"Julia: Hey Imani! Just wanted to let you know I have to organize a strategy meeting 18 days later, from 8 in the morning for three hours. It\u2019s been a busy month!\",\n    \"Imani: Oh, hey Julia! That sounds like a lot of work, but I'm sure you'll manage it beautifully. How are things going with your investigations lately?\",\n    \"Julia: Things are going well, we just closed a really interesting case. It\u2019s good to be busy, though. I did organize a strategy meeting 18 days later, from 8 in the morning for three hours. It was a bit hectic getting everything together.\",\n    \"Imani: That's wonderful to hear!"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-01-09\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"compile a research summary\" in line:\n            # Extract temporal information\n            if \"eight days later\" in line:\n                offset_days = 8\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours = (7, 11)  # 7 AM to 11 AM (4 hours)\n                tasks.append({\n                    \"work\": \"compile a research summary\",\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n            elif \"yesterday\" in line:\n                offset_days = -1\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours = (7, 11)\n                tasks.append({\n                    \"work\": \"compile a research summary\",\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n            elif \"today\" in line:\n                date = conversation_date\n                hours = (7, 11)\n                tasks.append({\n                    \"work\": \"compile a research summary\",\n                    \"days\": [date],\n                    \"hours\": hours\n                })\n            elif \"three days later\" in line:\n                offset_days = 3\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-01-11\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"finalize the user interface for a new project\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"starting a side project to optimize energy consumption\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-12-31\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-01-01\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2022-12-31\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-01-18\",\n      \"2024-01-19\",\n      \"2024-01-20\",\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-01-21\",\n      \"2024-01-22\",\n      \"2024-01-23\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2023-06-27\",\n      \"2023-06-28\",\n      \"2023-06-29\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2023-07-02\",\n      \"2023-07-05\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"working on a new dessert\",\n    \"days\": [\n      \"2023-07-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing daily feedback\",\n    \"days\": [\n      \"2024-02-03\",\n      \"2024-02-08\",\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Developing new dishes / taking a midday walk for inspiration\",\n    \"days\": [\n      \"2023-06-26\",\n      \"2023-07-01\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2023-07-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2023-06-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"experimenting with new fermentation techniques\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-06-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2023-07-04\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.  \n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"revising a project timeline\" in line:\n            task = \"revising a project timeline\"\n            try:\n                # Extract the offset in days\n                offset_days = 17\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                start_date_str = start_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and duration of the task\n                start_hour = 8\n                duration_hours = 3\n                end_hour = start_hour + duration_hours\n\n                tasks.append({\n                    \"work\": task,\n                    \"days\": [start_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where date parsing fails\n\n        if \"video analysis\" in line:\n            task = \"video analysis\"\n            tasks.append({\n                \"work\": task,\n                \"days\": [conversation_date],\n                \"hours\": (0, 24)\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-06-28\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-01-25\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"practicing a new piece for an upcoming gig\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"trying a new lavender infused sauce for the duck\",\n    \"days\": [\n      \"2024-01-31\"\n    ],\n    \"hours\": []\n  },\n  {\n    \"work\": \"using smoked paprika\",\n    \"days\": [\n      \"2024-01-31\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2023-07-14\",\n      \"2023-07-15\",\n      \"2023-07-16\",\n      \"2023-07-17\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-26\",\n      \"2024-03-05\"\n    ],\n    \"hours\": [\n      10,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2023-07-10\",\n      \"2023-07-12\",\n      \"2023-07-17\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2024-07-19\",\n      \"2024-08-11\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-07-11\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2023-07-12\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    for line in conversation:\n        if \"record a podcast episode\" in line:\n            try:\n                date_str = line.split(\"days later from\")[1].split(\" \")[0]\n                offset_days = int(date_str)\n                start_time_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = int(start_time_str.split(\":\")[0])\n                end_hour = start_hour + 2\n\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                task_details.append({\n                    \"work\": \"record a podcast episode\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError):\n                pass  # Handle cases where time information is incomplete or invalid    \n    return task_details\n\n# Example Usage:\nconversation = [\n    \"Long time no see!\",\n    \"Louis: Hey Stella! It\u2019s been a while. I just wanted to let you know I have to record a podcast episode 8 days later from 8 in the morning for two hours.\",\n    \"Stella: Louis! That's wonderful to hear from you. How's the restaurant been? Still creating incredible dishes, I presume?\",\n    \"Louis: It's been quite hectic, but rewarding. We're experimenting with a new lavender-infused duck confit. What about you? Any exciting gigs lately?\",\n    \"Stella: Oh, it's going well, though I've been feeling"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-07-18\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-07-07\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2023-07-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-07-09\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2023-07-17\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-08-26\",\n      \"2024-08-27\",\n      \"2024-08-28\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-08-22\",\n      \"2024-08-23\",\n      \"2024-08-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"finish the boat\u2019s frame\",\n    \"days\": [\n      \"2024-08-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting a daily safety check\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\",\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct routine inspections\",\n    \"days\": [\n      \"2024-08-24\",\n      \"2024-08-30\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Practice a new solo for the show\",\n    \"days\": [\n      \"2024-09-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"Workshop for young musicians\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"briefcase project\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Check inventory levels\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-09-02\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"gig at The Spotted Cat\",\n    \"days\": [\n      \"2024-09-21\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"working on a new solo piece\",\n    \"days\": [\n      \"2024-09-13\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-08-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-08-27\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-26\",\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (10, 14)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-08-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"analyzing samples\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a piece inspired by the Mississippi River\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2024-08-28\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"report\",\n    \"days\": [\n      \"2024-09-09\",\n      \"2024-09-10\",\n      \"2024-09-11\"\n    ],\n    \"hours\": (0, 23)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-08-25\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2024-09-04\",\n      \"2024-09-05\",\n      \"2024-09-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-09-07\",\n      \"2024-09-08\",\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-09-07\",\n      \"2024-09-08\",\n      \"2024-09-09\",\n      \"2024-09-10\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct code reviews\",\n    \"days\": [\n      \"2024-09-11\",\n      \"2024-09-12\",\n      \"2024-09-16\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"Practicing a new solo\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"Workshops sharing oud techniques\",\n    \"days\": [\n      \"2024-10-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-09-14\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-09-12\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"start a unit on autumn leaves\",\n    \"days\": [\n      \"2024-09-16\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"do a few gigs\",\n    \"days\": [\n      \"2024-09-16\",\n      \"2024-09-17\",\n      \"2024-09-18\",\n      \"2024-09-19\",\n      \"2024-09-20\",\n      \"2024-09-21\",\n      \"2024-09-22\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"working on a new solo\",\n    \"days\": [\n      \"2024-09-08\",\n      \"2024-09-09\",\n      \"2024-09-10\",\n      \"2024-09-11\",\n      \"2024-09-12\",\n      \"2024-09-13\",\n      \"2024-09-14\",\n      \"2024-09-15\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\"2024-09-13\"],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-09-11\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-09-05\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"manage a client presentation\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = 15\n                \n                # Convert the conversation date to a datetime object\n                date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n                # Calculate the presentation date\n                presentation_date = date_object + timedelta(days=offset_days)\n                presentation_date_str = presentation_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end times\n                start_time_str = \"3 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n                start_hour = start_time.hour\n\n                duration_hours = 3\n                end_hour = (start_hour + duration_hours) % 24\n\n                tasks.append({\n                    \"work\": \"manage a client presentation\",\n                    \"days\": [presentation_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError as e:\n                print(f\"Error parsing date or time: {e}\")\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Jin: Just dropping you a line.\",\n    \"Xavier: Hey Jin! You won't believe how things are shaping up. I have to manage a client presentation 15 days later, basically in a little over two weeks, from 3 in the afternoon until three hours after that.\",\n    \"Jin: Oh, that sounds intense! I've been experimenting with a new kimchi recipe\u2014it involves a pretty unusual fermentation process.\",\n    \"Xavier: That\u2019s really cool! I'm trying to fit in some practice time around"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2024-09-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update progress tracker\",\n    \"days\": [\n      \"2021-10-26\",\n      \"2021-10-27\",\n      \"2021-10-28\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2021-10-24\",\n      \"2021-10-25\",\n      \"2021-10-26\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n    \n    task_details = []\n    \n    # Convert conversation date to datetime object\n    conversation_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Identify the work task and temporal expressions\n    work_task = \"daily review session\"\n    \n    # Extract the number of days and start offset\n    start_offset_days = 10\n    duration_days = 4\n\n    # Calculate the start date\n    start_date = conversation_date - timedelta(days=start_offset_days)\n    \n    # Calculate the list of dates\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n    # Extract the time range\n    hours = (11, 13)  # 11 a.m. to 1 p.m. (2 hours)\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n    \n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2021-10-17\",\n      \"2021-10-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2021-10-17\",\n      \"2021-10-22\",\n      \"2021-10-28\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-17\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-10-20\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing for my next talk\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      \"00\",\n      \"23\"\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2021-10-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"market analysis\" in line.lower():\n            start_time_str = \"\"\n            end_time_str = \"\"\n\n            if \"1 p.m.\" in line:\n                start_time_str = \"13:00\"\n                end_time_str = \"15:00\"\n\n            if start_time_str and end_time_str:\n                start_hour = int(start_time_str.split(\":\")[0])\n                end_hour = int(end_time_str.split(\":\")[0])\n\n                # Calculate the date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                yesterday = conversation_datetime - timedelta(days=1)\n                yesterday_str = yesterday.strftime(\"%Y-%m-%d\")\n\n                task_details.append({\n                    \"work\": \"completing a market analysis\",\n                    \"days\": [yesterday_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-10-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"poetry reading\",\n    \"days\": [\n      \"2021-11-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"grab a coffee and talk\",\n    \"days\": [\n      \"2021-11-01\",\n      \"2021-11-02\",\n      \"2021-11-03\",\n      \"2021-11-04\",\n      \"2021-11-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2021-10-27\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-10-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"organize a small workshop on microplastics\",\n    \"days\": [\n      \"2021-12-03\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2021-10-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"analyzing some data\",\n    \"days\": [\n      \"2021-10-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2021-10-21\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2021-11-07\",\n      \"2021-11-08\",\n      \"2021-11-09\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-10-27\",\n      \"2024-10-28\",\n      \"2024-10-29\",\n      \"2024-10-24\",\n      \"2024-10-25\",\n      \"2024-10-26\",\n      \"2024-10-33\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-30\",\n      \"2021-10-31\",\n      \"2021-11-01\",\n      \"2021-11-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-18\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-25\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2021-10-29\",\n      \"2021-11-01\",\n      \"2021-11-06\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-22\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-22\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"track daily expenses\" in line:\n            task = \"track daily expenses\"\n            try:\n                if \"yesterday\" in line:\n                    date_1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                    date_2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=4)\n                    days = [date_1.strftime(\"%Y-%m-%d\"), date_2.strftime(\"%Y-%m-%d\")]\n                elif \"in five days\" in line:\n                    date_1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                    date_2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=4)\n                    days = [date_1.strftime(\"%Y-%m-%d\"), date_2.strftime(\"%Y-%m-%d\")]\n                else:\n                    days = []\n            except ValueError:\n                days = []\n\n            try:\n                start_time = 15  # 3 p.m.\n                duration = 4\n                end_time = start_time + duration\n                hours = (start_time, end_time)\n            except ValueError:\n                hours = (0, 0)\n\n            task_details.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2021-10-29\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2021-10-30\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-11-09\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-11-03\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"developing a new character\",\n    \"days\": [\n      \"2021-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview with journalists\",\n    \"days\": [\n      \"2021-11-03\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-11-08\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"starting a new chapter of my manga\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-11-02\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"draft a press release\"\n    start_hour = 7\n    end_hour = 9\n    offset_days = 9\n\n    # Calculate the date(s) for the task\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    task_date = conversation_datetime + timedelta(days=offset_days)\n    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": [task_date_str],\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-11-07\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-09-19\",\n      \"2020-09-20\",\n      \"2020-09-21\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine inspections\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2020-09-18\",\n      \"2020-09-20\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"sketches for a new mural\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"depicting an emotional confrontation between two characters in a manga\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"schedule routine maintenance\" in line:\n            task = \"schedule routine maintenance\"\n            # Extract days offset\n            days_offset_1 = 5\n            days_offset_2 = days_offset_1 + 7\n            date_1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_offset_1)\n            date_2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_offset_2)\n            \n            task_details_1 = {\n                \"work\": task,\n                \"days\": [date_1.strftime(\"%Y-%m-%d\")],\n                \"hours\": (11, 14)  # 11 AM for 3 hours\n            }\n            task_details_2 = {\n                \"work\": task,\n                \"days\": [date_2.strftime(\"%Y-%m-%d\")],\n                \"hours\": (11, 14)  # 11 AM for 3 hours\n            }\n            tasks.append(task_details_1)\n            tasks.append(task_details_2)\n\n        if \"new commission, a large centerpiece for a hotel lobby\" in line:\n            task = \"create hotel centerpiece\"\n            # Extract due date\n            due_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n            task_details = {\n                \"work\": task,\n                \"days\": [due_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (9, 17)  # Assuming a full workday\n            }\n            tasks.append(task_details)\n        \n        if \"starting a new"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"sketching character designs\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyzing sales data\",\n    \"days\": [\n      \"2020-09-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-09-27\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-09-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-09-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-09-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2020-09-17\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"character design\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"restoration work on a painting\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-10-07\",\n      \"2020-10-08\",\n      \"2020-10-09\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  },\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  },\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\",\n      \"2024-02-22\",\n      \"2024-02-21\",\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    \n    for line in conversation:\n        if \"support ticket queue\" in line:\n            if \"7 days later\" in line:\n                date_offset = 7\n                task_date = conversation_date + timedelta(days=date_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                hours_start = 16\n                hours_end = 18\n                \n                tasks.append({\n                    \"work\": \"manage a support ticket queue\",\n                    \"days\": [task_date_str],\n                    \"hours\": (hours_start, hours_end)\n                })\n            if \"9 days later\" in line:\n                date_offset = 9\n                task_date = conversation_date + timedelta(days=date_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                hours_start = 16\n                hours_end = 18\n                \n                tasks.append({\n                    \"work\": \"manage a support ticket queue\",\n                    \"days\": [task_date_str],\n                    \"hours\": (hours_start, hours_end)\n                })\n    \n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2020-10-01\",\n      \"2020-10-03\",\n      \"2020-10-11\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"finalize a new composition\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"work on the manga\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"focusing on our setlist for the upcoming jazz festival\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"working on a complex manga panel\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2020-10-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-10-05\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-09-30\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-09-30\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"working on the next chapter of my manga\",\n    \"days\": [],\n    \"hours\": ()\n  },\n  {\n    \"work\": \"preparing for a small performance\",\n    \"days\": [\n      \"2020-10-01\"\n    ],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2020-10-07\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2020-10-03\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"finishing up the new chapter for my manga\",\n    \"days\": [\n      \"2020-09-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2020-10-07\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-09-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"design a new character's outfit\",\n    \"days\": [\n      \"2020-09-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2020-08-18\",\n      \"2020-08-19\",\n      \"2020-08-20\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2020-08-16\",\n      \"2020-08-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-18\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-01-18\",\n      \"2024-01-20\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-03-15\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"work on a '57 Bel Air engine\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"restoration project - Ford Mustang\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-08-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"concert preparations\",\n    \"days\": [],\n    \"hours\": ()\n  },\n  {\n    \"work\": \"sketching out new character designs\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2020-08-20\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing task details.\n    \"\"\"\n    task_details = []\n    work_task = \"draft a customer feedback report\"\n    \n    for line in conversation:\n        if work_task in line:\n            if \"8 days later\" in line:\n                offset_days = 8\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                \n                if \"3 p.m. until 4 hours after that\" in line:\n                    start_hour = 15\n                    end_hour = 19\n                    hours = (start_hour, end_hour)\n                else:\n                    hours = None\n\n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n    \n    return task_details\n\n# Example usage:\nconversation = [\n    \"Been thinking about you.\",\n    \"Andrei: Hey Imani, it's been a while! Just wanted to let you know I have to draft a customer feedback report 8 days later from 3 p.m. until 4 hours after that, which is quite a bit to fit in with upcoming rehearsals.\",\n    \"Imani: Hi Andrei, that\u2019s wonderful to hear from you! It sounds like you have quite the demanding schedule, I\u2019m sure everything will go smoothly. How are the preparations for your next performance going?\",\n    \"Andrei: They\u2019re progressing well, thank you! It's always a delicate balance between practice, travel, and, well, things like drafting a customer feedback report. It feels funny doing administrative things when my heart is in performing, but it's a necessary evil.\",\n    \"Imani: I completely understand having multiple commitments. In my line of work, I\u2019m constantly"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    work_task = \"update a training manual\"\n    \n    # Find all mentions of the task and extract temporal details\n    for line in conversation:\n        if work_task in line.lower():\n            if \"2 days later\" in line.lower():\n                try:\n                    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                    task_date = date_obj + timedelta(days=2)\n                    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                except ValueError:\n                    task_date_str = None\n\n                if \"12 p.m.\" in line:\n                    start_hour = 12\n                    end_hour = 14  # 12 p.m. + 2 hours\n                    hours = (start_hour, end_hour)\n                else:\n                    hours = None\n                \n                if task_date_str:\n                    task_details.append({\n                        \"work\": work_task,\n                        \"days\": [task_date_str],\n                        \"hours\": hours\n                    })\n                    \n    return task_details\n\n# Example usage with the provided conversation\nconversation = [\n    \"Is life treating you well?\",\n    \"Andrei: Well, life is busy as always! I just wanted to let you know that I have to update a training manual 2 days later, from 12 p.m. until 2 hours after that.\",\n    \"Chen: Oh, that sounds like quite the task, Andrei. It\u2019s good you\u2019re staying organised with everything though. How are"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-08-26\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"practicing for my next concert\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"working on a new program at the community center to help children with their reading skills\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2020-08-21\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Identifies a work-related task and extracts its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"monitor website analytics\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    dates = []\n    for line in conversation:\n        if task_description in line:\n            if \"in 2 days\" in line:\n                dates.append((date_obj + timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n            if \"two days from now\" in line:\n                dates.append((date_obj + timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n            if \"tomorrow\" in line:\n                dates.append((date_obj + timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            if \"the day after tomorrow\" in line:\n                dates.append((date_obj + timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n            if \"in three days\" in line:\n                dates.append((date_obj + timedelta(days=3)).strftime(\"%Y-%m-%d\"))\n\n    # Extract hours\n    hours = (7, 10)  # 7 AM to 10 AM (3 hours)\n\n    if dates:\n        tasks.append({\n            \"work\": task_description,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return tasks\n\n# Example usage (with the provided input):\nconversation = [\n    \"Just wanted to reach out.\",\n    \"Andrei: Hey Owen, just wanted to let you know I have to monitor website analytics starting in "
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-09-06\",\n      \"2020-09-07\",\n      \"2020-09-08\",\n      \"2020-09-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-08-28\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-08-26\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"monitoring production output\"\n    \n    # Find mentions of the task and extract dates\n    dates = []\n    hours = None\n\n    for line in conversation:\n        if work_task in line.lower():\n            if \"10 days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=10)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"2 days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"3 p.m.\" in line.lower():\n                start_hour = 15\n                end_hour = start_hour + 4\n                hours = (start_hour, end_hour)\n                \n    if dates and hours:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-17\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"update the maintenance log\"\n    \n    # Parse the conversation date\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Find mentions of \"tomorrow\" and calculate the corresponding date\n    tomorrow = conversation_datetime + timedelta(days=1)\n    tomorrow_date = tomorrow.strftime(\"%Y-%m-%d\")\n\n    # Calculate the date three days after tomorrow\n    three_days_later = tomorrow + timedelta(days=3)\n    three_days_later_date = three_days_later.strftime(\"%Y-%m-%d\")\n    \n    # Extract time range\n    hours = (7, 11)\n\n    tasks.append({\n        \"work\": work_task,\n        \"days\": [tomorrow_date, three_days_later_date],\n        \"hours\": hours\n    })\n\n    return tasks\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"finalize a presentation four days later\" in line and \"from 9 in the morning for two hours\" in line:\n            task_description = \"Finalize a presentation\"\n            \n            # Calculate the date\n            date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            task_date = date_obj + timedelta(days=4)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            \n            # Extract time range\n            start_hour = 9\n            end_hour = 11\n\n            tasks.append({\n                \"work\": task_description,\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2020-08-30\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2020-09-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2020-09-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-09-08\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"performance with the London Symphony Orchestra\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-23\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"monitoring team activity\"\n    start_hour = 15  # 3 p.m.\n    end_hour = 17  # 3 p.m. + 2 hours\n\n\n    days = []\n    for line in conversation:\n        if \"yesterday\" in line.lower() and work_task in line.lower():\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"today\" in line.lower() and work_task in line.lower():\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"tomorrow\" in line.lower() and work_task in line.lower():\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n\n    if days:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": (start_hour, end_hour)\n        })\n\n    return task_details\n\n# Example usage (assuming the input conversation is in a variable called 'conversation'):\nconversation = [\n    \"Hey, how have you been?\",\n    \"Imani: Hi Xavier! I\u2019ve been well, though busy. I started to monitor team activity yesterday, for 3 consecutive days, from 3 p.m. until 2 hours after that - it\u2019"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"virtual meeting\" in line and \"three consecutive days\" in line and \"8 in the morning\" in line:\n            # Extract temporal information\n            start_days_ago = 8\n            duration_days = 3\n            start_hour = 8\n            duration_hours = 3\n\n            # Calculate dates\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=start_days_ago)\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n            # Convert hours to 24-hour format\n            end_hour = start_hour + duration_hours\n\n            task_details = {\n                \"work\": \"attending a virtual meeting\",\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            }\n            tasks.append(task_details)\n\n    return tasks\n\n# Example Usage:\nconversation = [\n    \"Xavier: What\u2019s been keeping you busy lately?\",\n    \"Imani: Hey Xavier! Well, I\u2019ve been having quite a stretch with work. I had to attend a virtual meeting, starting eight days ago, for three consecutive days, all from 8 in the morning for three hours.\",\n    \"Xavier: That sounds like a lot to juggle, especially with everything else you do. How are things in the village?\",\n    \"Imani: Things are good, though always with new challenges. We're trying to get more people involved in the preventative health programs. It\u2019s rewarding work, but it takes a lot of energy.\",\n    \"Xavier: I completely understand"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"Health education workshop\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"manage a support ticket queue\" in line:\n            # Extract temporal details\n            days_ago = int(line.split(\" \")[-3])\n            task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            \n            # Extract time range\n            hours = (8, 11)  # 8 in the morning for three hours\n\n            tasks.append({\n                \"work\": \"manage a support ticket queue\",\n                \"days\": [task_date_str],\n                \"hours\": hours\n            })\n        elif \"preparing for a trip next month\" in line:\n            # Extract temporal details\n            task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=30)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            tasks.append({\n                \"work\": \"trip to remote villages\",\n                \"days\": [task_date_str],\n                \"hours\": (0, 24)\n            })\n\n        elif \"working on a documentary\" in line:\n            tasks.append({\n                \"work\": \"working on a documentary about orangutans\",\n                \"days\": [],\n                \"hours\": (0, 24)\n            })\n    return tasks\n```\n\n```\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-01-12\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-01-25\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"health education sessions and visits to families\",\n    \"days\": [\n      \"2024-01-25\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"expense report\" in line.lower():\n            try:\n                # Extract the number of days ago\n                days_ago = int(line.lower().split(\"nine days ago\")[0].split()[-1])\n\n                # Calculate the date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_time_str = \"1 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").hour\n                end_time = start_time + 2\n\n                tasks.append({\n                    \"work\": \"complete an expense report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_time, end_time)\n                })\n            except:\n                pass #handle exceptions\n        elif \"preventative healthcare education\" in line.lower():\n            tasks.append({\n                \"work\": \"preventative healthcare education\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)\n            })\n                \n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"How are you holding up?\",\n    \"Imani: Hey Yuna! I\u2019ve been pretty busy lately. I had to complete an expense report nine days ago from 1 p.m. until 2 hours after that, and it feels good to have that done.\",\n    \"Yuna: Oh, that's good to hear, Imani! It sounds like you've been keeping yourself occupied. I've been trying some new art projects with my class.\",\n    \"Im"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2022-05-30\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-05-21\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"prepare for a gig\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2022-05-21\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-06-01\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a presentation\",\n    \"days\": [\n      \"2022-06-01\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"update the sales log\"\n    \n    # Calculate start date\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n    \n    hours = (15, 18)  # 3 PM to 6 PM\n\n    task_details.append({\n        \"work\": task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-21\",\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2022-06-10\",\n      \"2022-06-16\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practicing a musical instrument\",\n    \"days\": [\n      \"2024-02-04\",\n      \"2024-02-06\",\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-03-05\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"deliver a training session\" in line and \"11 days later\" in line:\n            try:\n                # Calculate the date 11 days from the conversation date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj + timedelta(days=11)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start time (11 in the morning) and duration (4 hours)\n                start_hour = 11\n                end_hour = start_hour + 4\n\n                tasks.append({\n                    \"work\": \"deliver a training session\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                # Handle potential errors in date parsing\n                pass  # Or log the error\n\n    return tasks\n\n# Example usage (using the provided conversation)\nconversation = [\n    \"How's your spirits?\",\n    \"Imani: Hi Rose! Things are busy here. I just wanted to let you know I have to deliver a training session 11 days later from 11 in the morning for four hours.\",\n    \"Rose: Oh, that sounds like a lot of work, Imani! It's always wonderful to hear about everything you're doing for your community.\",\n    \"Imani: It is rewarding, though challenging at times. It\u2019s important work, you know? I did deliver a training session 11"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2022-06-05\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"plan for next week\",\n    \"days\": [\n      \"2022-06-06\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"wrestling with some tricky code\",\n    \"days\": [\n      \"2022-05-28\",\n      \"2022-05-29\",\n      \"2022-05-30\",\n      \"2022-05-31\",\n      \"2022-06-01\",\n      \"2022-06-02\",\n      \"2022-06-03\",\n      \"2022-06-04\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"focused on preventative care\",\n    \"days\": [\n      \"2022-05-28\",\n      \"2022-05-29\",\n      \"2022-05-30\",\n      \"2022-05-31\",\n      \"2022-06-01\",\n      \"2022-06-02\",\n      \"2022-06-03\",\n      \"2022-06-04\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2022-06-07\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"preparations for a concert\",\n    \"days\": [\n      \"2022-06-23\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-06-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2022-06-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation.\n                                            Defaults to \"2024-02-29\".\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    task_details = []\n    for line in conversation:\n        if \"revise a contract\" in line.lower() or \"revision of the contract\" in line.lower():\n            if \"four days later\" in line.lower():\n                try:\n                    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                    task_date = date_obj + timedelta(days=4)\n                    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                    if \"3 p.m.\" in line:\n                        start_hour = 15\n                        end_hour = 18  # 3 hours after 3 p.m.\n                        hours = (start_hour, end_hour)\n                    else:\n                        hours = None\n\n                    task_details.append({\n                        \"work\": \"revise a contract\",\n                        \"days\": [task_date_str],\n                        \"hours\": hours\n                    })\n                except ValueError:\n                    pass  # Handle potential date parsing errors\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2022-06-11\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-06-09\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
