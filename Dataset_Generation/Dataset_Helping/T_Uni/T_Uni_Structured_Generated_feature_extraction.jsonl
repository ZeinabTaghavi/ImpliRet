"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-04-25\",\n      \"2021-04-26\",\n      \"2021-04-27\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2021-04-17\",\n      \"2021-04-18\",\n      \"2021-04-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"rehearse a new song for a club gig\",\n    \"days\": [\n      \"2021-05-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking daily emails\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\",\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2021-04-17\",\n      \"2021-04-25\"\n    ],\n    \"hours\": (11, 15)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).  Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor production output\" in line.lower():\n            # Extract temporal information\n            if \"three days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"two days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"yesterday\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            else:\n                days = []\n\n            if \"10 in the morning\" in line.lower() and \"three hours\" in line.lower():\n                hours = (10, 13)  # 10:00 to 13:00\n            else:\n                hours = None\n\n            if days and hours:\n                tasks.append({\n                    \"work\": \"monitor production output\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n        elif \"finish this bag by the end of the week\" in line.lower():\n            # Extract temporal information\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            end_of_week = date + timedelta((6 - date.weekday()) % 7) #"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-04-16\",\n      \"2021-04-20\"\n    ],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"go to an open mic night\",\n    \"days\": [\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-04-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a project timeline\",\n    \"days\": [\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  },\n  {\n    \"work\": \"working on new pieces for an upcoming performance\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"workshop a new piece at the open mic night\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"sifting through evidence from a case\",\n    \"days\": [\n      \"2024-01-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a community event\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (13, 16)\n  },\n  {\n    \"work\": \"restoring an old currach\",\n    \"days\": [\n      \"2023-03-11\"\n    ],\n    \"hours\": null\n  },\n  {\n    \"work\": \"planning a writing workshop\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting a market survey\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"workshop on spoken word and activism\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2021-04-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-04-16\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2021-05-04 08:15\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD HH:MM format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.  \n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d %H:%M\")\n    tasks = []\n\n    for line in conversation:\n        if \"update a performance log\" in line:\n            task = \"update a performance log\"\n            hours = (9, 11)  # 9 in the morning for two hours\n\n            days = []\n            if \"started 2 days ago\" in line:\n                date = conversation_date - timedelta(days=2)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line:\n                date = conversation_date - timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"today\" in line:\n                date = conversation_date\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"tomorrow\" in line:\n                date = conversation_date + timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"in 2 days\" in line:\n                date = conversation_date + timedelta(days=2)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"the day before yesterday\" in line:\n                date = conversation_date - timedelta(days=3)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            \n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n    # remove duplicates\n    unique_tasks = []"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2021-05-09\",\n      \"2021-05-12\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"artwork for the next volume\",\n    \"days\": [\n      \"2021-04-26\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-27\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-05-06\",\n      \"2021-05-11\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2021-04-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2021-05-11\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"draft a customer feedback report\" in line:\n            try:\n                # Extract temporal information\n                if \"10 days ago\" in line:\n                    offset_days = -10\n                else:\n                    offset_days = 0\n\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_hour = 7\n                end_hour = start_hour + 4\n\n                tasks.append({\n                    \"work\": \"draft a customer feedback report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass\n\n    return tasks\n\n# Example usage (using the provided input)\nconversation = [\n    \"Hope things are well with you.\",\n    \"Dante: Hey Hugo, just wanted to share what I've been up to. I had to draft a customer feedback report 10 days ago, working from 7 in the morning for four hours.\",\n    \"Hugo: That sounds like a pretty involved task, Dante. I've been trying to get some rest after my last trip.\",\n    \"Dante: It was definitely a focused effort. It's not exactly poetry, but it needed to be done! How was your trip, by the way?\",\n    \"Hugo: Exhausting, but deeply"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2021-04-30\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Prepare a proposal document\",\n    \"days\": [\n      \"2021-05-08\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"Wrestling with a block of marble\",\n    \"days\": [\n      \"2021-05-05\",\n      \"2021-05-06\",\n      \"2021-05-07\",\n      \"2021-05-08\",\n      \"2021-05-09\",\n      \"2021-05-10\",\n      \"2021-05-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2021-05-09\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2021-05-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2021-05-11\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"repair a pocket watch\",\n    \"days\": [\n      \"2021-04-20\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details = []\n\n    for line in conversation:\n        if \"update a progress tracker\" in line:\n            # Extract temporal information\n            days_ago = 17\n            consecutive_days = 3\n            start_time_str = \"3 in the afternoon\"\n            duration_hours = 4\n\n            # Convert relative dates to absolute dates\n            start_date = conversation_date - timedelta(days=days_ago)\n            days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n\n            # Convert start time to 24-hour format\n            start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n            start_hour = start_time.hour\n            end_hour = start_hour + duration_hours\n\n            hours = (start_hour, end_hour)\n\n            task_details.append({\n                \"work\": \"update a progress tracker\",\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return task_details\n\n# Example usage:\nconversation = [\n    \"How have you been lately?\",\n    \"Alejandro: Hey Dante, I\u2019ve been keeping busy! I started to update a progress tracker seventeen days ago for three consecutive days, working from 3 in the afternoon until 4 hours after that. It felt good to get it done, especially given how important it is to keep things organized.\",\n    \"Dante: That sounds intense, Alejandro. I\u2019ve mostly been lost in writing, chasing after fleeting images and trying to pin them down with words.\",\n    \"Alejandro: I can imagine! The coffee farm"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"Maintaining a daily checklist\"\n    offset_days = 19\n    consecutive_days = 3\n    start_hour = 17\n    duration_hours = 2\n\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n    end_hour = start_hour + duration_hours\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return task_details\n\n# Example Usage (with the provided input)\nconversation = [\n    \"Ananya: What\u2019s new with you?\",\n    \"Alejandro: Well, things have been busy on the farm! I\u2019ve been working to maintain a daily checklist, starting nineteen days ago for three consecutive days. It\u2019s been keeping me occupied from 5 in the evening until 2 hours after that.\",\n    \"Ananya: That sounds intense, especially with everything else you manage on the farm. How's the harvest coming along this year?\",\n    \"Alejandro: It\u2019s going well, thankfully. The weather has been cooperative so far. Maintaining the daily checklist helps me stay organized with all the different stages \u2013 from picking to drying. It really ensures everything runs smoothly, and I did it nineteen days ago for three consecutive days from 5 p."
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2020-02-13\",\n      \"2020-02-14\",\n      \"2020-02-15\",\n      \"2020-02-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-28\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"monitoring production output\"\n    dates = []\n    hours = None\n\n    for line in conversation:\n        if work_task in line:\n            if \"27 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=27)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"22 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=22)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"15 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=15)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            if \"7 in the morning\" in line and \"three hours\" in line:\n                hours = (7, 10)\n\n    if dates and hours:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-20\",\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2020-02-13\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"glassblowing\",\n    \"days\": [\n      \"2020-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"working on cases\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-01-24\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"creating a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": [\n      13,\n      17\n    ]\n  },\n  {\n    \"work\": \"harvest preparations\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2020-02-11\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2020-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2020-02-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"harvesting\",\n    \"days\": [\n      \"2020-02-17\",\n      \"2020-02-18\",\n      \"2020-02-19\",\n      \"2020-02-20\",\n      \"2020-02-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"responding to customer inquiries\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"responding to customer inquiries\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"responding to customer inquiries\",\n    \"days\": [\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2020-02-24\",\n      \"2020-02-25\",\n      \"2020-02-26\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation\n            in YYYY-MM-DD format. Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no\n            task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"daily planning\"\n    hours = (12, 14)\n\n    days = []\n    \n    # Calculate dates based on relative references\n    today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    # Extract dates\n    four_days_from_now = today + timedelta(days=4)\n    days.append(four_days_from_now.strftime(\"%Y-%m-%d\"))\n\n    yesterday = today - timedelta(days=1)\n    days.append(yesterday.strftime(\"%Y-%m-%d\"))\n\n    three_days_ago = today - timedelta(days=3)\n    days.append(three_days_ago.strftime(\"%Y-%m-%d\"))\n\n    two_days_ago = today - timedelta(days=2)\n    days.append(two_days_ago.strftime(\"%Y-%m-%d\"))\n    \n    today_date = today.strftime(\"%Y-%m-%d\")\n    days.append(today_date)\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update client records\" in line:\n            if \"five days later\" in line:\n                try:\n                    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                    task_date = date_obj + timedelta(days=5)\n                    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                    start_hour = 10\n                    end_hour = 12\n                    tasks.append({\n                        \"work\": \"update client records\",\n                        \"days\": [task_date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n                except ValueError:\n                    pass  # Handle potential date parsing errors\n\n            if \"six days later\" in line:\n                try:\n                    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                    task_date = date_obj + timedelta(days=6)\n                    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                    start_hour = 10\n                    end_hour = 12\n                    tasks.append({\n                        \"work\": \"update client records\",\n                        \"days\": [task_date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n                except ValueError:\n                    pass  # Handle potential date parsing errors\n\n    return tasks\n\n# Example Usage (with the provided input)\nconversation = [\n    \"INPUT: Just checking in.\",\n    \"Alejandro: Hey Mohammed, just"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-23\",\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"Work on a new scene / rewrite dialogue\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"Set design for a workshop\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-08\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-02-28\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n    work_tasks = []\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    \n    for line in conversation:\n        if \"update an inventory list\" in line and \"10 days later\" in line and \"4 in the afternoon\" in line and \"for two hours\" in line:\n            task = \"Update inventory list\"\n            \n            # Calculate the date\n            days_later = 10\n            task_date = conversation_date + timedelta(days=days_later)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            \n            # Extract hours\n            start_time_str = \"4 in the afternoon\"\n            start_hour = 16  # 4 PM in 24-hour format\n            end_hour = start_hour + 2\n            hours = (start_hour, end_hour)\n            \n            work_tasks.append({\n                \"work\": task,\n                \"days\": [task_date_str],\n                \"hours\": hours\n            })\n\n    return work_tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Is life being good to you?\",\n    \"Alejandro: Hey Imani, things are alright here, pretty busy though. I have to update an inventory list 10 days later, from 4 in the afternoon for two hours.\",\n    \"Imani: That sounds demanding, Alejandro. Are the coffee plants responding well to the recent rainfall?\",\n    \"Alejandro: They are, thankfully! It's been a good season so far. It's just keeping"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2020-02-27\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task, days, and hours.\n    \"\"\"\n\n    task_details = []\n    work_task = \"review a performance report\"\n    \n    for line in conversation:\n        if work_task in line:\n            try:\n                # Extract the number of days later\n                days_later = int(line.split(\"days later\")[0].split()[-1])\n\n                # Calculate the absolute date\n                conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_date_obj + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                # Extract time details\n                start_time_str = line.split(\"from \")[1].split(\" in the \")[0]\n                start_hour = int(start_time_str.split(\" \")[0]) if start_time_str else 0\n\n                if \"pm\" in start_time_str:\n                    if start_hour != 12:\n                        start_hour += 12\n                elif \"am\" in start_time_str:\n                    if start_hour == 12:\n                        start_hour = 0\n                \n                end_hour = start_hour + 3\n                \n                if end_hour >= 24:\n                    end_hour -= 24\n                    \n                task_details.append({\n                    \"work\": work_task,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2022-10-20\",\n      \"2022-10-21\",\n      \"2022-10-22\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practicing a musical instrument\",\n    \"days\": [\n      \"2022-10-15\",\n      \"2022-10-16\",\n      \"2022-10-17\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"prep for lunch service\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": (10, 12)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Identifies a work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    task = \"attend a daily huddle\"\n    days = []\n    hours = (7, 9)\n    \n    # Calculate dates based on relative time expressions, using the conversation_date\n    today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    five_days_ago = today - timedelta(days=5)\n    four_days_ago = today - timedelta(days=4)\n    three_days_ago = today - timedelta(days=3)\n    yesterday = today - timedelta(days=1)\n    today_date = today\n    \n    days.extend([five_days_ago.strftime(\"%Y-%m-%d\"), four_days_ago.strftime(\"%Y-%m-%d\"), three_days_ago.strftime(\"%Y-%m-%d\"), yesterday.strftime(\"%Y-%m-%d\"), today_date.strftime(\"%Y-%m-%d\")])\n\n    task_details.append({\n        \"work\": task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2022-10-15\",\n      \"2022-10-24\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2022-10-16\",\n      \"2022-10-19\",\n      \"2022-10-26\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"restoring a pocket watch\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-10-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"cataloging a new acquisition\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"prepping for dinner service\",\n    \"days\": [\n      \"2022-10-23\"\n    ],\n    \"hours\": (\n      17,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"stress-testing a new recipe\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"hosting a Korean cooking class\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"working on a custom briefcase\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"experimenting with edge treatments\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"get those stitches perfect\",\n    \"days\": [\n      \"2022-11-02\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2022-10-25\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"debugging code\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"polishing up the user interface for an educational app\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update the project dashboard\" in line:\n            task = \"Update project dashboard\"\n            \n            if \"5 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=5)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                \n                if \"3 consecutive days\" in line:\n                    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n            elif \"two days ago\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n            elif \"yesterday\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n            elif \"today\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n            elif \"three days ago\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n            elif \"next week\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n            else:\n"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"organize footage\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"editing\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2022-10-30\",\n      \"2022-11-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"perfecting a new kimchi recipe\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"starting to think about the fall menu\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"forging each piece\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-10-29\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-11-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2022-10-28\",\n      \"2022-10-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-11-07\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Delivering a training session for the new kitchen staff\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2022-11-06\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    task_description = \"monitor production output\"\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    days_ago = 23\n    \n    first_day = start_date - timedelta(days=days_ago)\n    \n    dates = [(first_day + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n\n    hours = (7, 11)\n\n    task_details.append({\n        \"work\": task_description,\n        \"days\": dates,\n        \"hours\": hours\n    })    \n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"Practicing a musical instrument\",\n    \"days\": [\n      \"2022-08-08\",\n      \"2022-08-09\",\n      \"2022-08-10\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"Hosting a pop-up restaurant\",\n    \"days\": [\n      \"2022-09-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing daily feedback\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-08-04\",\n      \"2022-08-05\",\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"new sculpture inspired by the myth of Icarus\",\n    \"days\": [\n      \"2022-08-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2022-08-06\",\n      \"2022-08-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-08-05\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2022-08-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-08-07\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a meal\",\n    \"days\": [\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"coaching students\",\n    \"days\": [\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"expense report\" in line.lower():\n            days_ago = None\n            try:\n                days_ago = int(line.lower().split(\"days ago\")[0].split(\" \")[-1])\n            except:\n                pass\n            \n            if days_ago is not None:\n                task_date = conversation_date - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                start_time_str = line.lower().split(\"from \")[1].split(\" p.m.\")[0].replace(\"p.m.\", \"\").strip()\n                start_hour = int(start_time_str.split(\" \")[0])\n                end_hour = start_hour + 4 \n\n                tasks.append({\n                    \"work\": \"completing an expense report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n\n    return tasks\n```\n\n```\n[\n    {\n        \"work\": \"completing an expense report\",\n        \"days\": [\n            \"2024-01-07\"\n        ],\n        \"hours\": (\n            15,\n            19\n        )\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-08-06\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-08-01\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"authenticate a recent acquisition\",\n    \"days\": [\n      \"2022-08-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-08-11\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-08-12\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-15\",\n      \"2022-08-16\",\n      \"2022-08-17\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-06\",\n      \"2022-08-07\",\n      \"2022-08-08\",\n      \"2022-08-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-08-06\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-23\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-03-04\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2022-08-16\",\n      \"2022-08-17\",\n      \"2022-08-18\",\n      \"2022-08-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2022-08-13\",\n      \"2022-08-20\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"finish the roof framing\",\n    \"days\": [\n      \"2022-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2022-08-13\",\n      \"2022-08-20\",\n      \"2022-08-21\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    # Identify code review task\n    if \"code reviews\" in \"\".join(conversation):\n        days_later_5 = conversation_date + timedelta(days=5)\n        days_later_11 = conversation_date + timedelta(days=11)\n        \n        tasks.append({\n            \"work\": \"Conduct code reviews\",\n            \"days\": [days_later_5.strftime(\"%Y-%m-%d\"), days_later_11.strftime(\"%Y-%m-%d\")],\n            \"hours\": (9, 12)  # Assuming 3 hours from some starting point, e.g., 9:00 to 12:00\n        })\n\n    # Identify workshop preparation task\n    if \"workshop next week\" in \"\".join(conversation):\n        next_week = conversation_date + timedelta(days=7)\n        tasks.append({\n            \"work\": \"Prepare for workshop\",\n            \"days\": [next_week.strftime(\"%Y-%m-%d\")],\n            \"hours\": (9, 17) # Assuming working hours\n        })\n\n    #Identify lesson preparation\n    if \"tomorrow\u2019s lessons\" in \"\".join(conversation):\n      tomorrow = conversation_date + timedelta(days=1)\n      tasks.append({\n          \"work\": \"Prepare for lessons\",\n          \"days\": [tomorrow.strftime(\"%Y-%m-%d\")],\n          \"hours\": (16, 18) # Assuming preparation happens in the evening\n      })\n    \n    return tasks\n# Example usage:\nconversation = [\n    \"Fancy a chat?\",\n    \"Ivan: Hey Noor, just letting you know"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2022-08-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2022-08-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a community event\",\n    \"days\": [\n      \"2022-08-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2022-08-18\"\n    ],\n    \"hours\": (\n        8,\n        11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-08-15\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2022-08-23\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_and_time(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): A string representing the date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"client meeting\" in line:\n            try:\n                parts = line.split(\"from\")\n                hours_part = parts[1].strip()\n                start_hour_str = hours_part.split(\" \")[0].strip()\n                start_hour = int(start_hour_str)\n\n                duration_hours = int(hours_part.split(\"for\")[1].split(\" \")[0].strip())\n                end_hour = start_hour + duration_hours\n                \n                offset_days = 20\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                tasks.append({\n                    \"work\": \"client meeting\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n\n            except (ValueError, IndexError):\n                pass # Ignore lines that don't fit the expected format\n\n        if \"mural\" in line and \"next week\" in line:\n            try:\n                next_week_date = conversation_date + timedelta(days=7)\n                next_week_date_str = next_week_date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                  \"work\": \"working on a new mural\",\n                  \"days\": [next_week_date_str],\n                  \"hours\": (9, 17)\n                  })\n            except:\n                "
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-08-22\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2022-04-19\",\n      \"2022-04-20\",\n      \"2022-04-21\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"balance spring replacement\",\n    \"days\": [\n      \"2022-04-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"restoring an old grandfather clock\",\n    \"days\": [\n      \"2022-04-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, dates, and hours.  Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"review daily feedback\" in line:\n            work = \"Reviewing daily feedback\"\n            days_ago = 17\n            duration = 4\n            start_time_str = \"12 p.m.\"\n            end_time_offset = 2\n\n            # Calculate dates\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            start_date = conversation_datetime - timedelta(days=days_ago)\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n\n            # Calculate hours\n            start_hour = 12\n            end_hour = start_hour + end_time_offset\n\n            task_details.append({\n                \"work\": work,\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"editing\" in line:\n            work = \"Editing\"\n            task_details.append({\n                \"work\": work,\n                \"days\": [conversation_date],\n                \"hours\": (9, 17) #Assuming a default 9-5 editing schedule\n            })\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"daily briefing\",\n    \"days\": [\n      \"2022-04-18\",\n      \"2022-04-21\"\n    ],\n    \"hours\": [\n      8,\n      12\n    ]\n  },\n  {\n    \"work\": \"editing\",\n    \"days\": [\n      \"2022-04-19\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"review operational data\" in line:\n            task = \"review operational data\"\n            # Extract dates\n            days = []\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            days.append((date - timedelta(days=11)).strftime(\"%Y-%m-%d\"))\n            days.append((date - timedelta(days=9)).strftime(\"%Y-%m-%d\"))\n            days.append((date - timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n            hours = (11, 15)  # 11 AM to 4 PM (11 + 4 = 15)\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        elif \"start filming\" in line:\n            task = \"filming in the mountains\"\n            # Extract date\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            next_week_date = date + timedelta(days=7)\n            days = [next_week_date.strftime(\"%Y-%m-%d\")]\n            hours = (9, 17)\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        elif \"working on a documentary\" in line:\n            task = \"documentary about Andes community\"\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            days = [date.strftime(\"%Y-%m-%d\")]\n            hours = (9, 18)\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        elif \"commission for a museum\" in line:\n"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2022-04-13\",\n      \"2022-04-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-04-25\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-04-17\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-04-20\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"review a research paper\" in line:\n            try:\n                parts = line.split(\"ago\")\n                days_ago = int(parts[0].split(\" \")[-1])\n                task_date = conversation_date - timedelta(days=days_ago)\n                start_hour = 9\n                end_hour = 11\n                tasks.append({\n                    \"work\": \"review a research paper\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"dye\" in line and \"this week\" in line:\n            start_date = conversation_date\n            end_date = conversation_date + timedelta(days=6) #this week\n            tasks.append({\n                \"work\": \"trying out a new dye\",\n                \"days\": [start_date.strftime(\"%Y-%m-%d\"), end_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (9, 17) #assuming a full work day\n            })\n                \n        if \"sketching a new briefcase design\" in line:\n            tasks.append({\n                \"work\": \"sketching a new briefcase design\",\n                \"days\": [conversation_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (9, 17) #assuming a full work day\n            })\n        if \"prepping for a new film\" in line and \"next week\" in line:\n            next_week_date = conversation_date + timedelta(days"
"```json\n[\n  {\n    \"work\": \"drafting a customer feedback report\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"research a new project\",\n    \"days\": [\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2022-04-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation \n                                            in YYYY-MM-DD format. \n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    for line in conversation:\n        if \"deliver a training session\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n\n                # Calculate the absolute date\n                date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_object + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end hours\n                start_hour_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = int(start_hour_str.split(\" \")[0]) if \"p.m.\" in start_hour_str else int(start_hour_str)\n                if \"p.m.\" in start_hour_str:\n                  start_hour += 12\n                \n                end_hour = start_hour + 2\n\n                task_details.append({\n                    \"work\": \"deliver a training session\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n    return task_details\n\n# Example usage with the provided input\nconversation = [\n    \"How\u2019s everything going?\",\n    \"Hugo: Hey Alessia! Things have been pretty hectic. I just wanted to let you know that I have to deliver a training session 9 days later from 5 p.m. until 2 hours after that.\",\n    \"Alessia: Oh, that sounds intense"
"```json\n[\n  {\n    \"work\": \"Compile a weekly summary\",\n    \"days\": [\n      \"2022-04-12\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"edit the footage\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"conducting a market survey\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"conducting a market survey\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting to discuss funding\",\n    \"days\": [\n      \"2022-05-03\",\n      \"2022-05-04\",\n      \"2022-05-05\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    work_tasks = []\n    for line in conversation:\n        if \"update a work log\" in line and \"starting in 18 days\" in line:\n            task = \"Update work log\"\n            start_days = 18\n            consecutive_days = 3\n            start_time_str = \"11 in the morning\"\n            end_time_offset = 4\n\n            # Convert conversation date to datetime object\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n            # Calculate start date\n            start_date = conversation_datetime + timedelta(days=start_days)\n\n            # Create a list of dates for the task\n            days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n\n            # Calculate start and end hours\n            start_hour = 11\n            end_hour = start_hour + end_time_offset\n\n            hours = (start_hour, end_hour)\n\n            work_tasks.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return work_tasks\n\n# Example Usage (with the provided conversation)\nconversation = [\n    \"Is life treating you well?\",\n    \"Hugo: Hey Heidi, life's alright, a little hectic as always. I just wanted to let you know I have to update a work log, starting in 18 days for 3 consecutive days, from 11 in the morning until 4 hours after that.\",\n    \"Heidi: Oh,"
"```json\n[\n  {\n    \"work\": \"performing routine testing\",\n    \"days\": [\n      \"2022-04-27\",\n      \"2022-04-28\",\n      \"2022-04-29\",\n      \"2022-04-30\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2022-05-06\",\n      \"2022-05-08\",\n      \"2022-05-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2022-05-01\",\n      \"2022-05-02\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"Documentary filming in Patagonia\",\n    \"days\": [\n      \"2022-06-07\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2022-05-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2022-04-27\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation: A list of strings representing the conversation transcript.\n        conversation_date: The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n        Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"finalize a presentation\" in line:\n            # Extract temporal information\n            try:\n                days_later = int(line.split(\" \")[-3])\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_str = line.split(\"from \")[1].split(\" for \")[0]\n                if \"p.m.\" in start_time_str:\n                  start_time_str = start_time_str.replace(\" p.m.\", \"\")\n                  start_hour = int(start_time_str.split(\":\")[0]) + 12\n                elif \"a.m.\" in start_time_str:\n                  start_time_str = start_time_str.replace(\" a.m.\", \"\")\n                  start_hour = int(start_time_str.split(\":\")[0])\n                else:\n                  start_hour = int(start_time_str.split(\":\")[0])\n\n                duration_hours = int(line.split(\"for \")[1].split(\" hours\")[0])\n                end_hour = start_hour + duration_hours\n\n                tasks.append({\n                    \"work\": \"Finalize presentation\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n              pass\n    return tasks\n\n# Example Usage (with the provided input):\nconversation = [\n    \"Hugo: Just wanted to say hello and see how you are.\",\n    \"Mohammed"
"```python\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"workshop\" in line.lower() and \"organize\" in line.lower():\n            # Extract temporal information\n            try:\n                time_phrase = line.split(\"from \")[1]\n                hour_str = time_phrase.split(\" in the morning\")[0]\n                hour = int(hour_str)\n                duration = 3\n                start_hour = hour\n                end_hour = hour + duration\n                \n                # Calculate the date\n                offset_days = 2\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"Organize a workshop for local filmmakers\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError):\n                pass  # Handle cases where time information is not well-formatted\n\n    return tasks\nfrom datetime import datetime, timedelta\n\nconversation = [\n    \"It feels like ages since we last spoke.\",\n    \"Hugo: Hey Ananya! It's been hectic here. I had to organize a workshop two days later from 11 in the morning for three hours.\",\n    \"Ananya: Oh, that sounds involved! How are things going with your current film project, Hugo? Are you still working on the one about the nomadic tribes?\",\n    \"Hugo: Yes, still chipping away at it! It\u2019s a long process,"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2022-05-01\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"working on a film about the impact of plastic pollution\",\n    \"days\": [\n      \"2022-04-20\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2022-05-05\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  },\n  {\n    \"work\": \"cataloging some recent acquisitions for the museum\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2022-05-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing task details.  Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    task_description = \"record a tutorial video\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if task_description in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-2])\n                \n                # Calculate the absolute date\n                task_date = date_obj + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                # Extract the time range\n                start_hour = int(line.split(\" \")[-4])\n                end_hour = start_hour + 2\n\n\n                tasks.append({\n                    \"work\": task_description,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Hope things are alright.\",\n    \"Hugo: Hey Adam, just letting you know I have to record a tutorial video three days later, from 7 in the morning for two hours.\",\n    \"Adam: Hey Hugo, that sounds like a busy few days ahead for you! How's the project going?\",\n    \"Hugo: It's going well, though filming can be unpredictable. I did record a tutorial video three days later, and it went smoother than expected.\",\n    \"Adam: That's great to hear! Sometimes those things just fall into place, don't they? I've been banging my head against this AI problem all week.\",\n    "
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2021-07-07\",\n      \"2021-07-08\",\n      \"2021-07-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-01-30\",\n      \"2024-01-31\",\n      \"2024-02-01\",\n      \"2024-02-03\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (16, 18)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a daily summary\" in line:\n            task = \"Prepare daily summary\"\n            start_days_offset = 23\n            duration_days = 4\n            start_time_str = \"1 p.m.\"\n            duration_hours = 3\n\n            start_time = datetime.strptime(start_time_str, \"%I %p\")\n            start_hour = start_time.hour\n\n            end_hour = (start_hour + duration_hours) % 24\n\n            days = []\n            current_date = conversation_date + timedelta(days=start_days_offset)\n            for i in range(duration_days):\n                days.append(current_date.strftime(\"%Y-%m-%d\"))\n                current_date += timedelta(days=1)\n            \n            tasks.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": (start_hour, end_hour)\n            })\n        \n        if \"restoring a beautiful old pocket watch\" in line:\n            task = \"Restoring a pocket watch\"\n            \n            tasks.append({\n                \"work\": task,\n                \"days\": [],\n                \"hours\": (0, 24)\n            })\n\n    return tasks\n\n\n# Example Usage (with the provided input)\nconversation = [\n    \"Good to hear from you!\",\n    \"Emil: Hey Jayden, it\u2019s been a bit! I\u2019ve been really busy lately with work. I had to prepare a daily summary, and it started 23 days ago"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"KPIs\" in line and \"reviewing\" in line:\n            task_description = \"Reviewing daily KPIs\"\n            days_ago = []\n            if \"twelve days ago\" in line:\n                days_ago.append((conversation_date - timedelta(days=12)).strftime(\"%Y-%m-%d\"))\n            if \"ten days ago\" in line:\n                days_ago.append((conversation_date - timedelta(days=10)).strftime(\"%Y-%m-%d\"))\n\n            hours_str = \"noon until 3 hours after that\"\n            start_hour = 12\n            end_hour = 15\n            hours = (start_hour, end_hour)\n\n            tasks.append({\n                \"work\": task_description,\n                \"days\": days_ago,\n                \"hours\": hours\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-05\",\n      \"2024-03-07\",\n      \"2024-03-12\",\n      \"2024-03-14\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"working on a delicate mechanism\",\n    \"days\": [\n      \"2021-07-01\",\n      \"2021-07-06\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a contract\",\n    \"days\": [\n      \"2021-07-14\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"visiting a watch fair\",\n    \"days\": [\n      \"2021-08-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"prepare some stories\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-07-05\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2021-07-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-07-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2021-07-03\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"taking apart a very old pocket watch\",\n    \"days\": [\n      \"2021-07-10\",\n      \"2021-07-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a presentation\",\n    \"days\": [\n      \"2021-07-01\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"sketching new watch designs\",\n    \"days\": [\n      \"2021-07-06\",\n      \"2021-07-07\",\n      \"2021-07-08\",\n      \"2021-07-09\",\n      \"2021-07-10\",\n      \"2021-07-11\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-07-14\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-28\",\n      \"2024-03-06\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-07-19\",\n      \"2021-07-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"working on a customer's pocket watch\",\n    \"days\": [\n      \"2021-07-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2021-07-17\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-07-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"restoring an old pocket watch\",\n    \"days\": [\n      \"2021-07-12\",\n      \"2021-07-13\",\n      \"2021-07-14\",\n      \"2021-07-15\",\n      \"2021-07-16\",\n      \"2021-07-17\",\n      \"2021-07-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2021-07-24\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"restoration project of an old clock tower\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"prepping for a gig at Preservation Hall\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record a tutorial video\",\n    \"days\": [\n      \"2021-07-27\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-07-19\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2021-03-17\",\n      \"2021-03-18\",\n      \"2021-03-19\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor website analytics\" in line:\n            try:\n                parts = line.split(\"starting \")\n                if len(parts) > 1:\n                    days_ago_str = parts[1].split(\" days ago\")[0]\n                    days_ago = int(days_ago_str)\n                    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                    end_date = start_date + timedelta(days=3)\n                    dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n\n                    start_time_str = \"3 p.m.\"\n                    start_hour = datetime.strptime(start_time_str, \"%I %p\").hour\n                    end_hour = start_hour + 4\n                    hours = (start_hour, end_hour)\n\n                    tasks.append({\n                        \"work\": \"monitor website analytics\",\n                        \"days\": dates,\n                        \"hours\": hours\n                    })\n            except (ValueError, IndexError):\n                pass\n\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Jin: What\u2019s been keeping you busy lately?\",\n    \"Chen: Well, I've been quite occupied with work. I had to monitor website analytics, starting 22 days ago for 3 consecutive days, all from 3 p.m. until 4 hours after that.\",\n    \"Jin: That sounds like a lot to handle! I've been test-driving a new kimchi recipe, trying to get the spice level just right for"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"training schedule\" in line.lower() and \"maintain\" in line.lower():\n            # Extract temporal information\n            days_ago = int(line.lower().split(\"days ago\")[0].split(\" \")[-2])\n            consecutive_days = int(line.lower().split(\"consecutive days\")[0].split(\" \")[-2])\n            start_time = int(line.lower().split(\"from \")[1].split(\" in the morning\")[0])\n            duration = int(line.lower().split(\"for \")[1].split(\" hours\")[0])\n            end_time = start_time + duration\n\n            # Calculate start date\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            \n            # Generate list of dates\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n\n            task_details.append({\n                \"work\": \"Maintaining a training schedule\",\n                \"days\": dates,\n                \"hours\": (start_time, end_time)\n            })\n\n    return task_details\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Long time no talk!\",\n    \"Chen: Hi Emil, it\u2019s great to connect with you! I\u2019ve been really busy lately, I started to maintain a training schedule 22 days ago, for 4 consecutive days, and I've been doing it from 8 in the morning for three hours each day.\",\n    \"Emil: Chen, it\u2019s wonderful to hear from you as well! That sounds quite demanding, but I imagine a disciplined schedule is helpful for your tea ceremonies.\",\n    \"Chen"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-17\",\n      \"2024-02-20\",\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2021-03-11\",\n      \"2021-03-19\",\n      \"2021-03-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2021-03-11\",\n      \"2021-03-20\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2021-03-19\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"script revisions\",\n    \"days\": [\n      \"2021-03-23\",\n      \"2021-03-24\",\n      \"2021-03-25\",\n      \"2021-03-26\",\n      \"2021-03-27\",\n      \"2021-03-28\",\n      \"2021-03-29\",\n      \"2021-03-30\",\n      \"2021-03-31\",\n      \"2021-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-03-22\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2021-03-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2024-02-28\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \"2024-03-05\",\n      \"2024-03-06\",\n      \"2024-03-07\",\n      \"2024-03-08\",\n      \"2024-03-09\",\n      \"2024-03-10\",\n      \"2024-03-11\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2024-02-28\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \"2024-03-05\",\n      \"2024-03-06\",\n      \"2024-03-07\",\n      \"2024-03-08\",\n      \"2024-03-09\",\n      \"2024-03-10\",\n      \"2024-03-11\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2024-02-28\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \""
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2021-03-21\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a project timeline\",\n    \"days\": [\n      \"2021-03-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"preparing gear\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"brushing up on wilderness first aid\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\"2021-03-12\"],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"writing a performance review\",\n    \"days\": [\n      \"2021-03-13\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"review daily feedback\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Find mentions of the task and extract temporal details\n    for line in conversation:\n        if work_task in line.lower():\n            # Extract temporal expressions\n            if \"five days ago\" in line.lower():\n                date = date_obj - timedelta(days=5)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 11)  # 7 AM to 11 AM (4 hours)\n                task_details.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"yesterday\" in line.lower():\n                date = date_obj - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 11)\n                task_details.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"today\" in line.lower():\n                date = date_obj\n                days = [date.strftime(\"%Y-%m-%d\")]\n                hours = (7, 11)\n                task_details.append({\"work\": work_task, \"days\": days, \"hours\": hours})\n            elif \"three days ago\" in line.lower():\n                 date = date_obj - timedelta(days=3)\n                 days = [date.strftime(\"%Y-%m-%d\")]\n                 hours = (7, "
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-07-24\"):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"daily planning\" in line.lower():\n            if \"five days ago\" in line.lower() and \"three consecutive days\" in line.lower() and \"11 in the morning\" in line.lower() and \"three hours\" in line.lower():\n                start_date = conversation_date - timedelta(days=5)\n                days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n                hours = (11, 14)\n                tasks.append({\n                    \"work\": \"daily planning\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            elif \"work on daily planning around sourcing the right leaves\" in line.lower():\n                tasks.append({\n                    \"work\": \"daily planning around sourcing leaves\",\n                    \"days\": [conversation_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (9, 17)  # Assuming a typical workday\n                })\n\n    return tasks\n```\n\n```\n[\n    {\n        \"work\": \"daily planning\",\n        \"days\": [\n            \"2024-07-19\",\n            \"2024-07-20\",\n            \"2024-07-21\"\n        ],\n        \"hours\": (\n            11,\n            14\n        )\n    },\n    {\n        \"work\": \"daily planning around sourcing leaves\",\n        \"days\": ["
"```json\n[\n  {\n    \"work\": \"midday walk\",\n    \"days\": [\n      \"2021-04-04\",\n      \"2021-04-05\",\n      \"2021-04-06\",\n      \"2021-04-07\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"wallet design\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"briefcase project\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                               Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a work task\n              and its temporal details.  Returns an empty list if no task is found.\n    \"\"\"\n\n    work_tasks = []\n    \n    # Identify the work task\n    task_keywords = [\"review project metrics\", \"project metrics\"]\n    \n    # Find lines containing task keywords\n    task_lines = [line for line in conversation if any(keyword in line.lower() for keyword in task_keywords)]\n    \n    if not task_lines:\n        return []\n    \n    # Extract temporal details\n    for line in task_lines:\n        if \"12 days later\" in line:\n            days_later = 12\n            start_hour = 16  # 4 p.m. in 24-hour format\n            end_hour = 18     # 6 p.m. in 24-hour format\n            \n            conversation_date = datetime.strptime(date, \"%Y-%m-%d\")\n            task_date = conversation_date + timedelta(days=days_later)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            work_tasks.append({\n                \"work\": \"review project metrics\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"21 days later\" in line:\n            days_later = 21\n            start_hour = 16  # 4 p.m. in 24-hour format\n            end_hour = 18     # 6 p.m. in 24-hour format\n            \n            conversation_date = datetime.strptime(date, \"%Y-%m-%"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-01\",\n      \"2024-03-06\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"sourcing new clay for teapots\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Watering office plants\",\n    \"days\": [\n      \"2021-03-28\",\n      \"2021-03-29\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2021-04-01\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"record a podcast episode\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n\n                # Calculate the absolute date\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_time_str = line.split(\"from \")[1].split(\" until \")[0]\n                end_time_str = line.split(\" until \")[1].split(\".\")[0]\n\n                start_hour = int(datetime.strptime(start_time_str, \"%I in the morning\").hour) if \"in the morning\" in start_time_str else int(datetime.strptime(start_time_str, \"%I in the afternoon\").hour) if \"in the afternoon\" in start_time_str else int(start_time_str.split(\":\")[0])\n                end_hour = int(datetime.strptime(end_time_str, \"%I in the afternoon\").hour) if \"in the afternoon\" in end_time_str else int(end_time_str.split(\":\")[0])\n\n                # Convert to 24-hour format.\n                if 'in the afternoon' in start_time_str:\n                  start_hour += 12\n                  \n                if 'in the afternoon' in end_time_str:\n                  end_hour += 12\n\n                tasks.append({\n                    \""
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2021-04-05\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2021-03-30\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Identifies a work-related task and extracts its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"develop a marketing strategy\" in line:\n            try:\n                # Extract the relative time expression\n                time_offset_str = line.split(\"seven days later\")[1].strip()\n\n                # Calculate the absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=7)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 10\n                end_hour = 13\n\n                tasks.append({\n                    \"work\": \"develop a marketing strategy\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except Exception as e:\n                print(f\"Error processing line: {line}. Error: {e}\")\n                continue  # Skip to the next line if there's an error\n\n    return tasks\n\n\n# Example Usage (based on the provided input)\nconversation = [\n    \"Tom: What\u2019s new in your world?\",\n    \"Chen: Oh, hello Tom! It's been a busy time. I had to develop a marketing strategy seven days later from today, working from 10 in the morning for three hours.\",\n    \"Tom: That sounds like quite a task, Chen. I've been trying out a new dye for my leather, a really rich chestnut color.\",\n    \"Chen: A beautiful color, I\u2019m sure. Did you find it easy"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2021-03-26\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-05-16\",\n      \"2024-05-17\",\n      \"2024-05-18\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"restoring a beautiful old house downtown\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-05-09\",\n      \"2024-05-12\",\n      \"2024-05-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-05-08\",\n      \"2024-05-11\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-05-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-05-11\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"restoring an old frame\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\"2024-02-14\"],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"complete restoration of a barn\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-05-12\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2024-05-08\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-05-08\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-05-09\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-05-28\",\n      \"2024-05-29\",\n      \"2024-05-30\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine testing\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-05-27\",\n      \"2024-05-30\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-05-23\",\n      \"2024-05-29\",\n      \"2024-05-31\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-05-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"panel layout\",\n    \"days\": [\n      \"2024-05-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-23\",\n      \"2024-02-23\",\n      \"2024-02-23\",\n      \"2024-02-23\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-05-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"restoring an old barn door\",\n    \"days\": [\n      \"2024-06-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-05-26\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-05-31\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"restoration of a beam\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-03-04\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"writing a technical blog post\",\n    \"days\": [\n      \"2024-01-23\",\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-28\",\n      \"2024-01-29\",\n      \"2024-01-30\",\n      \"2024-01-31\",\n      \"2024-02-01\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, and hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"schedule routine maintenance\" in line:\n            task = \"schedule routine maintenance\"\n            days_ago = 7\n            duration = 4\n            start_time_str = \"11\"\n            hours = 4\n\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n            start_hour = int(start_time_str)\n            end_hour = start_hour + hours\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n        elif \"finalize the pairing this week\" in line:\n            task = \"finalize wine pairing\"\n            today = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            end_of_week = today + timedelta(days=(6 - today.weekday()))\n            dates = [(today + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range((end_of_week - today).days + 1)]\n            hours = (9, 17) \n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": hours\n            })\n\n    return tasks\n\n# Example Usage (with the provided input)\nconversation = [\n    \"INPUT: Just wanted to say hi!\",\n    \"Bianca: Hey Makayla! Just wanted to say hi! I've been super busy \u2013 I had to"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-12-01\",\n      \"2020-12-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2020-11-28\",\n      \"2020-12-01\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-12-02\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"prepare a proposal document\" in line:\n            try:\n                parts = line.split(\"from\")\n                time_part = parts[1].strip()\n                hour_str = time_part.split(\"in\")[1].split(\"for\")[0].strip()\n                hour = int(hour_str)\n                duration_str = time_part.split(\"for\")[1].strip().split(\"hours\")[0].strip()\n                duration = int(duration_str)\n                \n                offset_days_str = line.split(\"ago\")[0].split(\" \")[-1]\n                offset_days = int(offset_days_str)\n                \n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_hour = hour\n                end_hour = hour + duration\n\n                tasks.append({\n                    \"work\": \"prepare a proposal document\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n    return tasks\n```\n```output\n[{'work': 'prepare a proposal document', 'days': ['2024-01-17'], 'hours': (7, 11)}]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-12-03\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-01-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"wrestling with an engine block\",\n    \"days\": [\n      \"2024-01-22\",\n      \"2024-01-23\",\n      \"2024-01-24\",\n      \"2024-01-25\",\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\n[\n    {\n        \"work\": \"record a podcast episode\",\n        \"days\": [\"2024-02-16\"],\n        \"hours\": (11, 16)\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2020-12-06\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2020-12-03\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2020-11-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"coding for a demo\",\n    \"days\": [\n      \"2020-12-04\",\n      \"2020-12-05\",\n      \"2020-12-06\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2020-12-11\",\n      \"2020-12-12\",\n      \"2020-12-13\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update the maintenance log\",\n    \"days\": [\n      \"2020-12-15\",\n      \"2020-12-16\",\n      \"2020-12-17\",\n      \"2020-12-18\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-12-17\",\n      \"2020-12-19\",\n      \"2020-12-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\"\n    ],\n    \"hours\": (9, 12)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-12-15\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-12-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-12-13\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  },\n  {\n    \"work\": \"authenticate a painting\",\n    \"days\": [\n      \"2020-12-19\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"visit a small historical estate\",\n    \"days\": [\n      \"2020-12-26\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-12-09\",\n      \"2020-12-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-12-09\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2020-12-12\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (13, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=None):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            If None, defaults to today's date.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    if conversation_date is None:\n        conversation_date = datetime.now().strftime(\"%Y-%m-%d\")\n\n    task_details = []\n    work_task = \"update the maintenance log\"\n    \n    # Find the start date\n    start_date_str = None\n    for line in conversation:\n        if \"eleven days ago\" in line and work_task in line:\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=11)\n            start_date_str = start_date.strftime(\"%Y-%m-%d\")\n            break\n\n    if start_date_str:\n        days = []\n        start_dt = datetime.strptime(start_date_str, \"%Y-%m-%d\")\n        for i in range(3):\n            days.append((start_dt + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n\n        hours = (12, 15)  # 12 p.m. to 3 hours after (3 p.m.)\n\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n\n# Example usage:\nconversation = [\n    \"Imani: What\u2019s been keeping you busy lately?\",\n    \"Yuri: Well, it's been quite a stretch of work! I've been having to update the maintenance log, and it started eleven days ago, for three consecutive days. I had to do it from 12 p.m. until 3 hours after that each day.\",\n    \""
"```json\n[\n  {\n    \"work\": \"Maintaining a daily checklist\",\n    \"days\": [\n      \"2024-11-06\",\n      \"2024-11-07\",\n      \"2024-11-08\",\n      \"2024-11-09\"\n    ],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"Visit a fellow blacksmith\",\n    \"days\": [\n      \"2024-12-02\",\n      \"2024-12-06\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\nconversation_date = datetime(2024, 1, 26)  # Assuming today is January 26, 2024\n\ndef extract_task_details(conversation):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"review project progress\" in line:\n            days_ago = None\n            try:\n                days_ago = int(line.split(\" \")[-3])  # Attempt to extract days ago\n            except ValueError:\n                pass  # Handle cases where the number parsing fails\n            \n            if days_ago is not None:\n                task_date = conversation_date - timedelta(days=days_ago)\n                \n                start_hour = 15  # 3 p.m.\n                end_hour = 19  # 7 p.m.  (3 p.m. + 4 hours = 7 p.m.)\n\n                tasks.append({\n                    \"work\": \"Review project progress\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n    return tasks\n\n\nconversation = [\n    \"Just wanted to say hi.\",\n    \"Yuri: Hey Camila! Just wanted to say hi. I\u2019ve been really busy with work lately, I had to review project progress 27 days ago and then again 23 days ago, both times from 3 p.m. until 4 hours after that.\",\n    \"Camila: Hey Yuri! That sounds intense, always good to hear from you though! I've been working on something new myself, a massive wall down by the market.\",\n    \"Yuri: Oh, that's awesome! A mural, right? You always create such incredible pieces. It feels good to finally have a little downtime, even if it\u2019s just for a bit. I was reviewing project progress quite a while back, so it's good to be looking forward now.\","
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-11-11\",\n      \"2024-11-15\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (9, 11)\n  },\n  {\n    \"work\": \"get usable shots of a jaguar\",\n    \"days\": [\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"heading back to the rainforest\",\n    \"days\": [\n      \"2024-03-04\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\"2024-02-14\"],\n    \"hours\": [11, 13]\n  },\n  {\n    \"work\": \"harvest\",\n    \"days\": [\"2024-02-28\"],\n    \"hours\": [0, 24]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"writing a technical blog post\",\n    \"days\": [\n      \"2024-11-13\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-11-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-11-09\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"placement of a delicate sculpture\",\n    \"days\": [\n      \"2024-11-18\",\n      \"2024-11-19\",\n      \"2024-11-20\",\n      \"2024-11-21\",\n      \"2024-11-22\",\n      \"2024-11-23\",\n      \"2024-11-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"working on exhibition\",\n    \"days\": [\n      \"2024-11-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-11-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"plan next series of experiments, deep dives into theoretical physics\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-11-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-24\",\n      \"2024-11-25\",\n      \"2024-11-26\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-15\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-16\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-14\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-11-24\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Checking daily emails\",\n    \"days\": [\n      \"2024-11-19\",\n      \"2024-11-20\",\n      \"2024-11-21\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-21\",\n      \"2024-11-22\",\n      \"2024-11-23\",\n      \"2024-11-24\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-18\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-20\"\n    ],\n    \"hours\": (8, 11)\n  },\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"checking routine communications\" in line:\n            utterance = line.split(\": \")[1]\n            days_ago = None\n            future_days = None\n\n            if \"2 days ago\" in utterance:\n                days_ago = 2\n            if \"yesterday\" in utterance:\n                days_ago = 1\n            if \"11 days later\" in utterance:\n                future_days = 11\n\n            start_time_str = \"3 p.m.\"\n            start_hour = datetime.strptime(start_time_str, \"%I %p\").hour\n            end_hour = start_hour + 3\n            hours = (start_hour, end_hour)\n            \n            days = []\n            if days_ago is not None:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if future_days is not None:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=future_days)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n\n            if days:\n                tasks.append({\n                    \"work\": \"checking routine communications\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n    return tasks\n\n# Example usage (with the provided input)\nconversation = [\n    \"Everything alright?\",\n    \"Yuri: Hey Chen, just wanted to share that I had a busy few days! I was checking routine communications 2 days ago, and also yesterday, and then again starting 11 days later. It was from 3 p"
"```json\n[\n  {\n    \"work\": \"monitoring website analytics\",\n    \"days\": [\n      \"2024-11-16\",\n      \"2024-11-17\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-07-12\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-11-19\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-11-26\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries containing the task details, or an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"revise a contract\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n\n                # Calculate the absolute date\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract start and end times\n                start_time_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = int(start_time_str.split(\" \")[0])\n                if \"p.m.\" in start_time_str:\n                    start_hour += 12\n                if start_hour == 12:\n                    start_hour = 0\n\n                duration_str = line.split(\"for \")[1].split(\" \")[0]\n                duration = int(duration_str)\n\n                end_hour = (start_hour + duration) % 24\n\n                tasks.append({\n                    \"work\": \"revise a contract\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-03-08\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"draft a press release\" in line:\n            task_details = {}\n            task_details[\"work\"] = \"draft a press release\"\n            task_details[\"hours\"] = (7, 11)  # 7 AM to 11 AM (4 hours)\n\n            # Extract dates\n            dates = []\n            if \"tomorrow\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"yesterday\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"three days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"two days\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"four consecutive days\" in line:\n                 date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                 for i in range(4):\n                    dates.append((date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n            \n            task_details[\"days\"] = dates\n            tasks.append(task_details)\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-11-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-11-28\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2024-11-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"working on a song\",\n    \"days\": [\n      \"2024-11-10\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2023-11-23\",\n      \"2023-11-24\",\n      \"2023-11-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-11-13\",\n      \"2023-11-14\",\n      \"2023-11-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\",\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\",\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"create a large piece for a new mosque\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-11-21\",\n      \"2023-11-24\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"sketching ideas for calligraphy work\",\n    \"days\": [\n      \"2023-11-26\"\n    ],\n    \"hours\": (19, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"calligraphy project for a new mosque\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"organise a donation drive\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-11-20\",\n      \"2023-11-25\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  },\n  {\n    \"work\": \"large commission for a new mosque\",\n    \"days\": [\n      \"2023-11-16\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2023-11-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"calligraphy piece for a new mosque\",\n    \"days\": [\n      \"2023-12-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"optimizing a pathfinding algorithm\",\n    \"days\": [\n      \"2023-11-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"interview\",\n    \"days\": [\n      \"2023-11-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating an inventory list\",\n    \"days\": [\n      \"2023-11-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"concert hall booking\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-11-22\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\"2023-11-16\"],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-11-18\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-11-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-01-30\",\n      \"2024-01-31\",\n      \"2024-02-01\",\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-29\",\n      \"2024-01-28\",\n      \"2024-01-31\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Monitor team activity\",\n    \"days\": [\n      \"2023-11-29\",\n      \"2023-11-30\",\n      \"2023-12-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2023-12-06\",\n      \"2023-12-07\",\n      \"2023-12-08\",\n      \"2023-12-09\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-11-29\",\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n        12,\n        15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2023-11-27\",\n      \"2023-12-06\"\n    ],\n    \"hours\": (14, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2023-12-06\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2023-11-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\",\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-11-30\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Practicing for a tournament and analyzing opponent replays\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2023-12-02\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"calligraphy piece for a local mosque\",\n    \"days\": [\n      \"2023-12-10\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2023-11-29\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"complete a task checklist\" in line:\n            task_description = \"Complete task checklist\"\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end hours\n                start_hour = int(line.split(\"from \")[1].split(\" \")[0])\n                end_hour = start_hour + 3\n\n                tasks.append({\n                    \"work\": task_description,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing time information: {e}\")\n                continue\n\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2020-06-08\",\n      \"2020-06-09\",\n      \"2020-06-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-06-09\",\n      \"2020-06-10\",\n      \"2020-06-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-20\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  },\n  {\n    \"work\": \"work on a new commission for a local mosque\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2020-06-02\",\n      \"2020-06-10\",\n      \"2020-06-12\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2020-05-31\",\n      \"2020-06-06\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2020-06-05\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2020-06-03\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-06-07\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-04-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"performance review\" in line:\n            try:\n                # Extract time information\n                time_str = line.split(\"from \")[1].split(\" until \")[0]\n                start_hour = int(time_str.split(\" p.m.\")[0].split(\" a.m.\")[0])\n                duration_str = line.split(\" until \")[1].split(\" hours\")[0]\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n\n                # Calculate the date\n                days_ago = line.split(\"seven days ago\")[0].split(\"\u2013\")[1].strip()\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=7)\n                date_str = date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"performance review\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass # handle potential errors when parsing the time/dates\n\n    return tasks\n\n# Example Usage:\nconversation = [\n    \"Hope you're having a good day.\",\n    \"Alicia: Hey Helen! Just wanted to chat. I had a busy week \u2013 I had to write a performance review seven days ago from 2 p.m. until two hours after that.\",\n    \"Helen: Oh, hello Alicia! That sounds like quite a task, performance reviews can be so delicate. How are things at the hospital?\",\n    \"Alicia: It\u2019s been hectic, but rewarding as always. Lots of little ones needing extra care. Honestly, getting that"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"presentation\" in line and \"manage\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-2])\n\n                # Calculate the date of the presentation\n                task_date = conversation_date - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start time and duration\n                start_hour = int(line.split(\" \")[-3])\n                duration = 2\n\n                tasks.append({\n                    \"work\": \"manage a client presentation\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, start_hour + duration)\n                })\n            except:\n                pass\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"organizing a workshop\",\n    \"days\": [\n      \"2020-06-05\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Identifies a work-related task described in the conversation and extracts its temporal details.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with keys 'work', 'days', and 'hours'.\n              Returns an empty list if no work task or offset_days is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"prepare a proposal document\" in line:\n            # Extract temporal information\n            try:\n                parts = line.split(\"from\")\n                time_str = parts[1].strip()\n                start_time_str = time_str.split(\"until\")[0].strip()\n                duration_str = time_str.split(\"until\")[1].strip()\n\n                start_hour = int(start_time_str.split(\" \")[0].split(\":\")[0])\n                duration = int(duration_str.split(\" \")[0])\n                end_hour = (start_hour + duration) % 24\n\n                # Calculate the date\n                offset_days = 6\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"prepare a proposal document\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except Exception as e:\n                print(f\"Error parsing time information: {e}\")\n\n        if \"finished this complicated case at work\" in line:\n             tasks.append({\n                \"work\": \"finished this complicated case\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)\n            })\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2020-06-03\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conducting a daily safety check\",\n    \"days\": [\n      \"2020-06-19\",\n      \"2020-06-20\",\n      \"2020-06-21\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2020-06-14\",\n      \"2020-06-17\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct routine inspections\",\n    \"days\": [\n      \"2020-06-15\",\n      \"2020-06-17\",\n      \"2020-06-18\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-06-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"volunteering at the charity\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with keys 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n    task = \"project summary\"\n    days = []\n    hours = None\n    \n    for line in conversation:\n        if task in line.lower() and \"days later\" in line.lower():\n            try:\n                offset_days = int(line.lower().split(\"days later\")[0].split()[-1])\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                days.append(date_obj.strftime(\"%Y-%m-%d\"))\n            except ValueError:\n                pass\n        if task in line.lower() and \"p.m.\" in line.lower():\n            try:\n                start_time_str = line.lower().split(\"from \")[1].split(\"p.m.\")[0].strip()\n                start_hour = int(start_time_str.split(\":\")[0])\n                \n                if \"for\" in line.lower():\n                    duration_str = line.lower().split(\"for \")[1].split(\" hours\")[0].strip()\n                    duration = int(duration_str)\n                    end_hour = (start_hour + duration) % 24\n                elif \"until\" in line.lower():\n                    end_time_str = line.lower().split(\"until \")[1].split(\"p.m.\")[0].strip()\n                    end_hour = int(end_time_str.split(\":\")[0])\n                else:\n                    end_hour = start_hour + 2\n                \n                hours = (start_hour + 17, end_hour + 17"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-06-17\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2020-06-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-06-26\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"client meeting\" in line.lower() and \"hours\" in line.lower():\n            try:\n                # Extract the offset in days\n                offset_days = int(line.lower().split(\"days later\")[0].split(\"after \")[1])\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start time\n                start_time_str = line.lower().split(\"at \")[1].split(\"in the\")[0]\n                start_hour = int(start_time_str.split(\" \")[0]) if \"am\" not in start_time_str and \"pm\" not in start_time_str else \\\n                              int(start_time_str.split(\" \")[0]) + 12 if \"pm\" in start_time_str else \\\n                              int(start_time_str.split(\" \")[0])\n                if start_hour > 23:\n                    start_hour -= 12\n\n                # Extract duration\n                duration_hours = int(line.lower().split(\"for \")[1].split(\" hours\")[0])\n                end_hour = start_hour + duration_hours\n\n                tasks.append({\n                    \"work\": \"client meeting\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    for line in conversation:\n        if \"conference call\" in line.lower():\n            try:\n                time_phrase = line.split(\"from \")[1].split(\"for\")[0].strip()\n                hour = int(time_phrase.split(\" \")[0])\n                duration_hours = int(line.split(\"for \")[1].split(\" \")[0])\n                \n                days_ago = int(line.split(\"days ago\")[0].split(\" \")[-1])\n                task_date = conversation_date - timedelta(days=days_ago)\n\n                start_hour = hour\n                end_hour = hour + duration_hours                \n                \n                tasks.append({\n                    \"work\": \"conference call\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2020-04-20\",\n      \"2020-04-21\",\n      \"2020-04-22\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyzing samples collected from our last coastal cleanup\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"composing a new piece for the oud\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"video call\",\n    \"days\": [\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    work_task = \"maintain a training schedule\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    days = []\n    for line in conversation:\n        if work_task in line:\n            if \"2 days later\" in line:\n                task_date = date_obj + timedelta(days=2)\n                days.append(task_date.strftime(\"%Y-%m-%d\"))\n            if \"4 days later\" in line:\n                task_date = date_obj + timedelta(days=4)\n                days.append(task_date.strftime(\"%Y-%m-%d\"))\n                \n    # Extract hours\n    hours = (9, 11)\n\n    if days:\n        tasks.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Ali: Hey Yuna, just wanted to say hello! I\u2019ve been really busy lately, I had to maintain a training schedule 2 days later and then again 4 days later, both from 9 in the morning for two hours.\",\n    \"Yuna: Hi Ali! That sounds intense. It's wonderful to hear from you though. How are you finding things generally?\",\n    \"Ali: Honestly, it\u2019s been a bit of a whirlwind. Trying to balance everything, you know? The training schedule really takes up a chunk of my time, but it's good to keep a routine.\",\n    \"Yuna: I totally understand needing a routine. With the little ones, everything is about structure... and flexible chaos, haha! We've been doing lots of painting.\",\n    "
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2020-04-19\",\n      \"2020-04-25\",\n      \"2020-04-28\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2020-04-25\",\n      \"2020-04-26\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-04-20\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a product demo\",\n    \"days\": [\n      \"2020-04-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"Finish the gate\",\n    \"days\": [\n      \"2020-04-27\",\n      \"2020-05-03\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update a training manual\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n                # Calculate the date\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time and duration\n                start_time_str = \"3 in the afternoon\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n                start_hour = start_time.hour\n                duration_hours = 2\n                end_hour = (start_hour + duration_hours) % 24\n\n                tasks.append({\n                    \"work\": \"update a training manual\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where the date or offset is not a valid integer.\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Alicia: What have you been up to?\",\n    \"Ali: Well, it's been a busy stretch! I had to update a training manual 19 days ago from 3 in the afternoon for two hours. It was quite a bit of work to get it just right.\",\n    \"Alicia: Oh, that sounds intense. I actually just finished a double shift at"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2020-04-24\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"creating a budget spreadsheet\",\n    \"days\": [\n      \"2020-04-21\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"composing\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": [\n      18,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-04-29\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    results = []\n\n    for line in conversation:\n        if \"reviewing a performance report\" in line:\n            try:\n                # Extract the time offset\n                offset_days = 21\n                start_time_str = \"3 p.m.\"\n                start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n                end_time = (datetime.combine(datetime.today(), start_time) + timedelta(hours=4)).time()\n\n                # Calculate the date\n                task_date = conversation_date - timedelta(days=offset_days)\n\n                # Format the date\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Convert times to 24-hour format\n                start_hour = start_time.hour\n                end_hour = end_time.hour\n                \n                results.append({\n                    \"work\": \"reviewing a performance report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError as e:\n                print(f\"Error parsing time or date: {e}\")\n                \n    return results\n```\n"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-05-08\",\n      \"2020-05-09\",\n      \"2020-05-10\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-18\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-17\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-16\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-04-15\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details (work, days, hours).\n    \"\"\"\n    tasks = []\n    current_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"water the office plants\" in line:\n            task = \"Water the office plants\"\n            hours = (15, 17)  # 3 PM to 5 PM\n\n            days = []\n            if \"tomorrow\" in line:\n                date = current_date + timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"yesterday\" in line:\n                date = current_date - timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"today\" in line:\n                date = current_date\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"in 2 days\" in line:\n                date = current_date + timedelta(days=2)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            elif \"4 consecutive days\" in line:\n                date = current_date + timedelta(days=1)\n                for i in range(4):\n                    days.append((date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n\n            if days:\n                tasks.append({\n                    \"work\": task,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-13\",\n      \"2024-03-15\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2020-05-05\",\n      \"2020-05-07\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2020-05-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"playing a gig at The Blue Note\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2020-05-14\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-05-12\",\n      \"2020-05-12\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2020-05-15\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording a podcast episode\",\n    \"days\": [\n      \"2020-05-11\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"recording a podcast episode\",\n    \"days\": [\n      \"2020-05-12\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-05-16\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-05-14\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-05-13\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article for research\",\n    \"days\": [\n      \"2021-01-02\",\n      \"2021-01-03\",\n      \"2021-01-04\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"Work on a new commission for a community center mural\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-02-28\",\n      \"2024-02-27\",\n      \"2024-03-04\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  },\n  {\n    \"work\": \"new project - community mural\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"training schedule\" in line.lower() and \"maintain\" in line.lower():\n            # Extract temporal details\n            days_later_1 = 2\n            days_later_2 = 5\n            start_time_hour = 15\n            duration_hours = 4\n\n            # Calculate absolute dates\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            date_1 = conversation_datetime + timedelta(days=days_later_1)\n            date_2 = conversation_datetime + timedelta(days=days_later_2)\n\n            # Format dates as YYYY-MM-DD\n            date_1_str = date_1.strftime(\"%Y-%m-%d\")\n            date_2_str = date_2.strftime(\"%Y-%m-%d\")\n\n            # Extract the task\n            task_description = \"Maintain training schedule for art installation\"\n\n            tasks.append({\n                \"work\": task_description,\n                \"days\": [date_1_str, date_2_str],\n                \"hours\": (start_time_hour, start_time_hour + duration_hours)\n            })\n\n    return tasks\n\n# Example usage (with the provided input)\nconversation = [\n    \"Just wanted to say hi.\",\n    \"Camila: Hey Rose! Just wanted to say hi. I've been really busy lately, I had to maintain a training schedule two days later and then again five days later, both from 3 p.m. for four hours.\",\n    \"Rose: Hi Camila, that sounds intense! How"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"start a new mural\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-22\"\n    ],\n    \"hours\": (8, 10)\n  },\n  {\n    \"work\": \"paint in studio\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"decipher an ancient maqam\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"mural design for the community center\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-01-01\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2021-01-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-01-24\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2021-01-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-01-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    work_task = \"organizing a community event\"\n    days = []\n    hours = (15, 16)\n\n    # Calculate the date twelve days ago\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    event_date = date_obj - timedelta(days=12)\n    days.append(event_date.strftime(\"%Y-%m-%d\"))\n\n    tasks.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n    \n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-01-10\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"sketching\",\n    \"days\": [\n      \"2021-01-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-03-16\",\n      \"2024-03-17\",\n      \"2024-03-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-07-16\",\n      \"2024-07-31\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\",\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"start a new mural in the community garden\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"volunteering with a local youth coding group\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2021-01-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"new sketches\",\n    \"days\": [\n      \"2021-01-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"incorporating more textures into my next mural\",\n    \"days\": [\n      \"2021-01-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2021-01-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-01-12\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2021-01-11\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"start a new community project\",\n    \"days\": [\n      \"2021-01-31\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Interview with a journalist\",\n    \"days\": [\n      \"2021-01-16\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"Debuting a new song\",\n    \"days\": [\n      \"2021-01-27\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"Proposing a new mural design to the city council\",\n    \"days\": [\n      \"2021-02-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"Working on an arrangement of an old Billie Holiday song\",\n    \"days\": [\n      \"2021-01-20\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"sketching out designs for a new community project\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-01-18\",\n      \"2024-01-19\",\n      \"2024-01-20\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2022-02-06\",\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"planning a new expedition route\",\n    \"days\": [\n      \"2022-02-09\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"gear maintenance\",\n    \"days\": [\n      \"2022-02-09\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2022-01-30\",\n      \"2022-02-01\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"plan out my next archaeological tour to Delphi\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2022-01-29\",\n      \"2022-01-31\",\n      \"2022-02-07\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"plan a workshop\",\n    \"days\": [\n      \"2022-03-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-02-21\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"monitor social media trends\" in line:\n            utterance = line.split(\": \")[1]\n            days_ago = int(utterance.split(\" \")[0])\n            task_date = conversation_date - timedelta(days=days_ago)\n            \n            if \"nine days ago\" in line:\n                days = [task_date.strftime(\"%Y-%m-%d\")]\n                hours = (9, 13)\n                tasks.append({\n                    \"work\": \"monitor social media trends\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n            elif \"eight days ago\" in line:\n                days = [task_date.strftime(\"%Y-%m-%d\")]\n                hours = (9, 13)\n                tasks.append({\n                    \"work\": \"monitor social media trends\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n        elif \"wrestling with a particularly tricky bug\" in line and \"all week\" in line:\n            utterance = line\n            tasks.append({\n                \"work\": \"fix bug in language learning app\",\n                \"days\": [(conversation_date - timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(7)],\n                \"hours\": (9, 17)\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2022-01-29\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  },\n  {\n    \"work\": \"summarizing past findings at the Acropolis\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-02-10\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"gather materials for a course on the Peloponnesian War\",\n    \"days\": [\n      \"2022-02-11\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2022-02-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"revisiting Plato\u2019s Republic\",\n    \"days\": [\n      \"2022-02-07\",\n      \"2022-02-08\",\n      \"2022-02-09\",\n      \"2022-02-10\",\n      \"2022-02-11\",\n      \"2022-02-12\",\n      \"2022-02-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"debut a poem at an open mic night\",\n    \"days\": [\n      \"2022-02-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting a customer feedback report\",\n    \"days\": [\n      \"2022-02-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2022-02-05\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"giving a small lecture\",\n    \"days\": [\n      \"2022-02-21\",\n      \"2022-02-22\",\n      \"2022-02-23\",\n      \"2022-02-24\",\n      \"2022-02-25\",\n      \"2022-02-26\",\n      \"2022-02-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"preparing for a meeting with the museum director\",\n    \"days\": [\n      \"2022-02-15\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"tackling logistical problems with the excavation site\",\n    \"days\": [\n      \"2022-02-14\",\n      \"2022-02-15\",\n      \"2022-02-16\",\n      \"2022-02-17\",\n      \"2022-02-18\",\n      \"2022-02-19\",\n      \"2022-02-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Responding to customer inquiries\",\n    \"days\": [\n      \"2022-02-15\",\n      \"2022-02-16\",\n      \"2022-02-17\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-07-16\",\n      \"2024-07-17\",\n      \"2024-07-18\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-07-13\",\n      \"2024-07-14\",\n      \"2024-07-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2022-02-11\",\n      \"2022-02-22\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"prepare for my lecture on Plato's Republic\",\n    \"days\": [\n      \"2022-02-21\",\n      \"2022-02-22\",\n      \"2022-02-23\",\n      \"2022-02-24\",\n      \"2022-02-25\",\n      \"2022-02-26\",\n      \"2022-02-27\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"experiment\",\n    \"days\": [\n      \"2022-02-21\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct code reviews\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-21\",\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-01-28\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-02-24\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2022-02-22\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-02-16\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"researching interpretations of Thucydides' account of the Peloponnesian War\",\n    \"days\": [\n      \"2022-02-18\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2022-02-11\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2022-02-23\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation (YYYY-MM-DD).\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a task\n              and contains its description, dates, and hours.  Returns an empty\n              list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"water the office plants\" in line:\n            try:\n                # Extract the start date\n                start_date_str = conversation_date\n                start_date = datetime.strptime(start_date_str, \"%Y-%m-%d\")\n\n                # Calculate the offset in days\n                offset_days = 22\n                task_start_date = start_date + timedelta(days=offset_days)\n\n                # Extract the duration in days\n                duration_days = 3\n                task_dates = [task_start_date + timedelta(days=i) for i in range(duration_days)]\n                task_dates = [d.strftime(\"%Y-%m-%d\") for d in task_dates]\n                \n                # Extract the time range\n                start_time = 15  # 3 p.m.\n                end_time = start_time + 4\n                hours = (start_time, end_time)\n\n                tasks.append({\n                    \"work\": \"Water the office plants\",\n                    \"days\": task_dates,\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass  # Handle cases where date parsing fails\n\n    return tasks\n\nconversation = [\n    \"Irina: How have you been lately?\",\n    \"Alejandro: I\u2019m doing well, just enjoying a quiet moment before the next harvest. The aroma of coffee is filling the air, which always lifts my spirits. How about you, Irina? Are you preparing for another competition?\",\n    \""
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-29\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2022-07-07\",\n      \"2022-07-09\",\n      \"2022-07-11\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2022-07-03\",\n      \"2022-07-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"planning a new exhibit focusing on Victorian photography\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2022-06-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"conference call\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-2])\n                task_date = conversation_date - timedelta(days=offset_days)\n\n                # Extract start time and duration\n                start_time_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = int(datetime.strptime(start_time_str, \"%I%p\").strftime(\"%H\")) \n                duration_hours = 3\n                end_hour = (start_hour + duration_hours) % 24\n\n                tasks.append({\n                    \"work\": \"setting up a conference call\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2022-07-04\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2022-07-11\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2022-07-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"working on a new piece for a local exhibition\",\n    \"days\": [\n      \"2022-07-24\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-07-13\",\n      \"2024-07-14\",\n      \"2024-07-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    \n    for line in conversation:\n        if \"review operational data\" in line or \"reviewing operational data\" in line:\n            try:\n                # Extract the number of days until the task starts\n                days_offset = int(line.split(\"in \")[1].split(\" \")[0])\n\n                # Calculate the start date\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_offset)\n                start_date_str = start_date.strftime(\"%Y-%m-%d\")\n                \n                # Find consecutive days\n                consecutive_days = int(line.split(\"for \")[1].split(\" \")[0])\n                \n                dates = []\n                current_date = datetime.strptime(start_date_str, \"%Y-%m-%d\")\n                for i in range(consecutive_days):\n                    dates.append(current_date.strftime(\"%Y-%m-%d\"))\n                    current_date += timedelta(days=1)\n                \n                # Extract the start and end hours\n                start_hour = 8\n                end_hour = start_hour + 2\n                \n                task_details.append({\n                    \"work\": \"Review operational data\",\n                    \"days\": dates,\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass # Ignore lines that mention the task but don't have all the necessary details\n\n    return task_details\n\n# Example Usage:\nconversation = [\n    \"Carmen: I was just thinking about you.\","
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-07-17\",\n      \"2022-07-23\",\n      \"2022-07-25\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"check daily emails\" in line:\n            # Extract the offset in days\n            try:\n                offset_days = int(line.split()[-2])\n            except ValueError:\n                continue  # Skip if the offset is not a valid integer\n\n            # Calculate the absolute date\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            task_date = conversation_datetime + timedelta(days=offset_days)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            # Extract the time range\n            start_hour = 14  # 2 p.m.\n            end_hour = start_hour + 4\n\n            tasks.append({\n                \"work\": \"Check daily emails\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"prepping for a big qualifier next week\" in line:\n            # Calculate the absolute date\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            task_date = conversation_datetime + timedelta(days=7)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            tasks.append({\n                \"work\": \"Prepping for a big qualifier\",\n                \"days\": [task_date_str],\n                \"hours\": (0, 23)\n            })\n\n        if \"choreograph a new ribbon routine\" in line:\n            tasks.append({\n                \"work\": \"Choreograph a new ribbon routine\",\n                \"days\": [],\n                \"hours\": (0, 23)\n            })\n\n    return"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update an inventory list\" in line:\n            try:\n                # Extract temporal information\n                time_info = line.split(\"from \")[1]\n                start_time_str = time_info.split(\" in the morning\")[0]\n                duration_str = time_info.split(\"for \")[1].split(\" hours\")[0]\n\n                start_hour = int(start_time_str)\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n\n                # Calculate the date\n                offset_days = 2\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"update an inventory list\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass  # Ignore lines that don't match the expected format\n\n    return tasks\n\n# Example usage with the provided input\nconversation = [\n    \"Irina: Hope your week is going well. I just wanted to let you know I have to update an inventory list two days later from 11 in the morning for three hours.\",\n    \"Adam: That sounds like a task! I\u2019ve been debugging some really tricky code all week, it's been keeping me busy.\",\n    \"Irina: Oh, debugging can be the worst! I remember when I was learning"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2022-07-14\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-07-24\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2022-07-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2022-07-13\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-07-23\"\n    ],\n    \"hours\": [\n      14,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2022-07-22\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  },\n  {\n    \"work\": \"playing a concert\",\n    \"days\": [\n      \"2022-07-21\"\n    ],\n    \"hours\": (\n      18,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"working on a new floor routine\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2022-07-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-03-07\",\n      \"2024-03-08\",\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \"2024-03-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2024-03-03\",\n      \"2024-03-04\",\n      \"2024-03-05\",\n      \"2024-03-06\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"checking inventory levels\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"receiving a new shipment of 1960s dresses\",\n    \"days\": [\n      \"2024-03-22\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-03-06\",\n      \"2024-03-10\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-02\"):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"practice a musical instrument\" in line:\n            task = \"Practicing a musical instrument\"\n            days = []\n            hours = (7, 11)  # 7 am for four hours\n            \n            # Extract dates\n            if \"25 days ago\" in line:\n                date1 = conversation_date - timedelta(days=25)\n                days.append(date1.strftime(\"%Y-%m-%d\"))\n            if \"the next day\" in line:\n                date2 = conversation_date - timedelta(days=24)  #Day after 25 days ago\n                days.append(date2.strftime(\"%Y-%m-%d\"))\n            if \"13 days ago\" in line:\n                date3 = conversation_date - timedelta(days=13)\n                days.append(date3.strftime(\"%Y-%m-%d\"))\n            \n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        if \"collection launch\" in line or \"sourcing new pieces\" in line or \"adding some hats to the collection\" in line:\n            task = \"Preparing for a new collection launch\"\n            # Temporal details are vague - no specific dates or hours are mentioned\n            # We can add a placeholder or skip this task if no dates are available\n            #For the sake of this case, the temporal aspects are not present.\n            pass\n    \n    return tasks\n\n# Example Usage (with input from the prompt)\nconversation = [\n    \"How's your"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"re-display 1920s dresses\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"visit Owen's workshop\",\n    \"days\": [\n      \"2024-03-25\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-01-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-03-09\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-03-07\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"rehearsals for the new play\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"restore the frame of an old house\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"planning a sourcing trip\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-03-21\",\n      \"2024-03-22\",\n      \"2024-03-23\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article for a new inventory system\",\n    \"days\": [\n      \"2024-03-21\",\n      \"2024-03-22\",\n      \"2024-03-23\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-03-12\",\n      \"2024-03-13\",\n      \"2024-03-14\",\n      \"2024-03-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-03-17\",\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-03-13\",\n      \"2024-03-15\",\n      \"2024-03-21\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2024-03-16\",\n      \"2024-03-22\"\n    ],\n    \"hours\": [\n      14,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-03-20\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  },\n  {\n    \"work\": \"host a 1960s themed fashion show\",\n    \"days\": [\n      \"2024-04-08\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  },\n  {\n    \"work\": \"layout for a new exhibit on Victorian fashion photography\",\n    \"days\": [\n      \"2024-03-25\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-03-25\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-03-15\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  },\n  {\n    \"work\": \"source new pieces for the store\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      10,\n      17\n    ]\n  },\n  {\n    \"work\": \"work on a new briefcase design\",\n    \"days\": [\n      \"2024-03-19\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-03-24\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-03-23\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-03-17\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  },\n  {\n    \"work\": \"post photos on the shop\u2019s instagram\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      18,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2020-03-23\",\n      \"2020-03-24\",\n      \"2020-03-25\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project metrics\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Practicing for a performance\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"Developing a new AI model for predictive analytics\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-03-19\",\n      \"2020-03-22\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a client meeting\",\n    \"days\": [\n      \"2020-03-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"editing footage from an expedition\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"practicing for a new opera role\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a budget proposal\",\n    \"days\": [\n      \"2024-02-03\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"practicing scales\",\n    \"days\": [\n      \"2024-02-03\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"trip to Paris searching for new treasures\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze sales data\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"Rehearsing for a new role\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"Cataloging a new collection of Victorian jewelry\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"Researching provenance of a brooch\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-03-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2020-03-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-03-28\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-03-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"rehearsal\",\n    \"days\": [\n      \"2020-03-23\"\n    ],\n    \"hours\": (\n      12,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2020-03-15\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"finish a new wallet design\",\n    \"days\": [\n      \"2020-04-04\",\n      \"2020-04-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"rehearsals for *La Traviata*\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2020-03-29\",\n      \"2020-03-30\",\n      \"2020-03-31\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2020-04-06\",\n      \"2020-04-07\",\n      \"2020-04-08\",\n      \"2020-04-09\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-16\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Gig at 'The Blue Note'\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine inspections\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-19\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"finalize a presentation\" in line.lower() and \"16 days later\" in line.lower():\n            task_date = conversation_date + timedelta(days=16)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            start_hour = int(line.lower().split(\"from \")[1].split(\" p.m. \")[0]) + 12\n            end_hour = int(line.lower().split(\"until \")[1].split(\" p.m. \")[0]) + 12\n            \n            tasks.append({\n                \"work\": \"finalize a presentation\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-04-05\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2020-04-08\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2020-04-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"prepare a workshop agenda\" in line and \"15 days later\" in line and \"1 p.m.\" in line:\n            task_date = conversation_date + timedelta(days=15)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            start_time_str = \"1 p.m.\"\n            start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n            end_time = (datetime.combine(datetime.today(), start_time) + timedelta(hours=3)).time()\n\n            start_hour = start_time.hour\n            end_hour = end_time.hour\n            \n            tasks.append({\n                \"work\": \"prepare a workshop agenda\",\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"It feels like ages since we last spoke.\",\n    \"Alessia: Oh, hi Malik! It feels like forever. I\u2019ve been completely swamped lately. I had to prepare a workshop agenda 15 days later, working from 1 p.m. until 3 hours after that.\",\n    \"Malik: Hey Alessia, good to hear from you! That sounds intense. How are things going with your singing? Any exciting performances coming up?\",\n    \"Alessia: Things are"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-04-03\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2020-04-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-07-27\",\n      \"2024-07-28\",\n      \"2024-07-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a daily review session\",\n    \"days\": [\n      \"2024-07-30\",\n      \"2024-07-31\",\n      \"2024-08-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine inspections\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-07-23\",\n      \"2024-07-27\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-21\",\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-07-25\",\n      \"2024-08-01\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"working on the proposal\",\n    \"days\": [\n      \"2024-07-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"preparing for a new exhibition on Victorian portraiture\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"secure a loan of a painting for the exhibit\",\n    \"days\": [\n      \"2024-01-31\"\n    ],\n    \"hours\": []\n  },\n  {\n    \"work\": \"meeting a contact to expedite things\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-07-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-07-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-07-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-07-28\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-08-11\",\n      \"2024-08-12\",\n      \"2024-08-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"work on daily planning\",\n    \"days\": [\n      \"2024-08-12\",\n      \"2024-08-13\",\n      \"2024-08-14\",\n      \"2024-08-15\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-08-04\",\n      \"2024-08-13\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"preparing for a small exhibition of local artists\",\n    \"days\": [\n      \"2024-09-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2024-08-03\",\n      \"2024-08-04\",\n      \"2024-08-08\",\n      \"2024-08-05\",\n      \"2024-08-06\",\n      \"2024-08-09\",\n      \"2024-08-09\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-08-02\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"visit a small antique fair\",\n    \"days\": [\n      \"2024-08-12\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"organize a workshop\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n\n                # Calculate the workshop date\n                workshop_date = conversation_date + timedelta(days=offset_days)\n                workshop_date_str = workshop_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start and end hours\n                start_hour_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = int(start_hour_str.split(\":\")[0])\n                if \"in the morning\" in line:\n                    start_hour = start_hour\n                elif \"in the afternoon\" in line:\n                    start_hour += 12\n                elif \"in the evening\" in line:\n                    start_hour += 12\n\n                duration_hours = int(line.split(\"for \")[1].split(\" \")[0])\n                end_hour = start_hour + duration_hours\n\n                tasks.append({\n                    \"work\": \"organize a workshop\",\n                    \"days\": [workshop_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return tasks\n\n\n# Example Usage:\nconversation = [\n    \"Victoria: Hey Malik! Just wanted to let you know I have to organize a workshop 16 days later, from 11 in the morning for four hours.\",\n    \"Malik: Oh, that's"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-08-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-08-06\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"update a training manual\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-3])\n                # Calculate the absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = int(line.split(\" \")[-2])\n                end_hour = start_hour + 2\n                \n                tasks.append({\n                    \"work\": \"update a training manual\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Got a moment to chat?\",\n    \"Victoria: Hey Dante! Just wanted to let you know I have to update a training manual nine days later, from 7 in the morning for two hours. It\u2019s been a busy few weeks getting everything ready for the new exhibit.\",\n    \"Dante: Oh, that sounds\u2026 thorough, Victoria! New exhibits must be a lot of work. What's the theme this time around?\",\n    \"Victoria: It is! This one focuses on Victorian-era photography \u2013 the technical challenges and the social impact. It\u2019s been fascinating diving into all the research.\",\n    \"Dante: Victorian photography, wow. I imagine the stories those images could tell! It\u2019s amazing how much can be captured in a single frame.\",\n    \"Victoria: Absolutely. And the processes were so laborious! I was reading about the"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-08-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a research paper\",\n    \"days\": [\n      \"2024-08-11\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"prepping for a Victorian-era jewellery exhibit\",\n    \"days\": [\n      \"2024-08-12\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2021-11-22\",\n      \"2021-11-23\",\n      \"2021-11-24\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-01-25\",\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-28\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"work on a new dish\",\n    \"days\": [\n      \"2024-01-29\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2021-11-29\",\n      \"2021-11-30\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking daily emails\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-11-24\",\n      \"2021-11-25\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2021-11-22\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"vaccination campaign\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"give a lecture to undergraduates\",\n    \"days\": [\n      \"2024-02-05\",\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (0, 0)\n  },\n  {\n    \"work\": \"planning summer archaeological dig\",\n    \"days\": [\n      \"2024-06-01\"\n    ],\n    \"hours\": (0, 0)\n  },\n  {\n    \"work\": \"map out competition schedule\",\n    \"days\": [\n      \"2025-01-01\"\n    ],\n    \"hours\": (0, 0)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2021-12-01\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2021-11-28\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"prepare a workshop agenda\" in line:\n            task = \"prepare a workshop agenda\"\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\"two days later\")[0].split()[-1])\n                # Calculate the absolute date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_obj + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_time_str = line.split(\"from \")[1].split(\" in the morning\")[0]\n                start_hour = int(start_time_str)\n                end_hour = start_hour + 4\n                hours = (start_hour, end_hour)\n\n                tasks.append({\n                    \"work\": task,\n                    \"days\": [task_date_str],\n                    \"hours\": hours\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error processing the line: {line}. Error: {e}\")\n                continue\n\n    return tasks\n\n\nconversation = [\n    \"Just checking in.\",\n    \"Hailey: Hey Yuri! I just wanted to let you know I\u2019m going to prepare a workshop agenda two days later, from 7 in the morning for four hours. It\u2019s been a busy few weeks of training, but I\u2019m looking forward to getting this done.\",\n    \"Yuri: Hi Hailey, that\u2019s great to hear! How\u2019s the training going? Are you preparing for a"
"```json\n[\n  {\n    \"work\": \"writing a technical blog post\",\n    \"days\": [\n      \"2024-01-18\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"writing\",\n    \"days\": [\n      \"2024-01-29\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-12-11\",\n      \"2021-12-12\",\n      \"2021-12-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2021-12-13\",\n      \"2021-12-14\",\n      \"2021-12-15\",\n      \"2021-12-16\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2021-12-07\",\n      \"2021-12-12\",\n      \"2021-12-14\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    # Identify the task and its temporal details\n    task_description = \"monitor social media trends\"\n    \n    # Find mentions of the task and extract dates\n    dates = []\n    \n    # First mention\n    if \"13 days later\" in conversation[1]:\n        date_1 = conversation_date + timedelta(days=13)\n        dates.append(date_1.strftime(\"%Y-%m-%d\"))\n    \n    # Second mention\n    if \"20 days later\" in conversation[1]:\n        date_2 = conversation_date + timedelta(days=20)\n        dates.append(date_2.strftime(\"%Y-%m-%d\"))\n\n    # Extract hours\n    start_hour = 10\n    end_hour = 13  # 10 a.m. + 3 hours\n\n    if dates:\n      tasks.append({\n          \"work\": task_description,\n          \"days\": dates,\n          \"hours\": (start_hour, end_hour)\n      })\n\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Everything alright with you?\",\n    \"Hailey: Hey Joel! Things are good, although I\u2019ve been pretty busy lately. I had to monitor social media trends 13 days later from 10 a.m. until three hours after that, and then again 20 days later during the same time.\",\n    \"Joel: That sounds like a lot to keep up with! I've been trying to sort through footage from my last expedition - so much to review and edit.\",\n    \"Hailey:"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-12-14\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-12-04\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"performing at a small venue\",\n    \"days\": [\n      \"2021-12-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-02-27\",\n      \"2024-02-28\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"workshop\" in line.lower() and \"days later\" in line.lower():\n            try:\n                # Extract the number of days\n                days_later = int(line.lower().split(\"days later\")[0].split()[-1])\n                task_date = conversation_date + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time\n                time_str = line.lower().split(\"from \")[1].split(\" for\")[0]\n                hour = int(time_str.split(\" p\")[0])\n                if \"a.m.\" in time_str:\n                    hour = hour\n                elif \"p.m.\" in time_str and hour != 12:\n                    hour += 12\n                \n                duration_hours = int(line.lower().split(\"for \")[1].split(\" hours\")[0])\n                end_hour = hour + duration_hours\n\n                tasks.append({\n                    \"work\": \"organize a workshop\",\n                    \"days\": [task_date_str],\n                    \"hours\": (hour, end_hour)\n                })\n            except (ValueError, IndexError) as e:\n                print(f\"Error parsing date or time: {e}\")\n                continue  # Skip to the next line in case of parsing errors\n\n    return tasks\n\n# Example Usage\nconversation = [\n    \"Julia: I'm all ears if you need to vent.\",\n    \"Ha"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"host a webinar session\" in line:\n            try:\n                # Extract temporal information\n                days_offset = int(line.split(\" \")[-3])\n                start_time_str = line.split(\"from \")[1].split(\" for\")[0]\n\n                # Convert relative time to absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract start and end hours\n                start_hour = int(start_time_str.split(\" \")[0])\n                if \"a.m.\" in start_time_str:\n                  if start_hour != 12:\n                    start_hour = start_hour\n                  else:\n                    start_hour = 0\n                elif \"p.m.\" in start_time_str:\n                  if start_hour != 12:\n                    start_hour += 12\n                  else:\n                    start_hour = 12\n\n                end_hour = start_hour + 3\n\n                task_details.append({\n                    \"work\": \"host a webinar session\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-12-08\",\n      \"2021-12-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2021-12-10\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"scheduling routine maintenance\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2023-10-15\",\n      \"2023-10-16\",\n      \"2023-10-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-07-12\",\n      \"2024-07-13\",\n      \"2024-07-14\",\n      \"2024-07-15\",\n      \"2024-07-19\"\n    ],\n    \"hours\": [\n      14,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2023-10-06\",\n      \"2023-10-08\",\n      \"2023-10-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-01-28\",\n      \"2024-01-29\",\n      \"2024-01-30\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2023-10-07\",\n      \"2023-10-11\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-10-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-10-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2023-10-12\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2023-10-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-10-08\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2023-10-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"planning a workshop for the local youth center\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"preliminary research for a story\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-10-17\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2023-10-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-10-08\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-10-27\",\n      \"2023-10-28\",\n      \"2023-10-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-10-24\",\n      \"2023-10-25\",\n      \"2023-10-26\",\n      \"2023-10-27\"\n    ],\n    \"hours\": [\n      13,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-01\",\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2023-10-20\",\n      \"2023-10-23\",\n      \"2023-10-28\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2023-10-20\",\n      \"2023-10-22\"\n    ],\n    \"hours\": [\n      9,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a budget proposal\",\n    \"days\": [\n      \"2023-10-23\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"wrestling with a balance spring\",\n    \"days\": [\n      \"2023-10-31\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-10-31\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2023-11-02\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2023-11-01\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-10-26\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2023-10-22\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2023-10-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"submit a project proposal\" in line:\n            task = \"submit a project proposal\"\n            days_offset = 14\n            task_date = conversation_date + timedelta(days=days_offset)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n            start_time_str = \"1 p.m.\"\n            start_time = datetime.strptime(start_time_str, \"%I %p\").time()\n            start_hour = start_time.hour\n\n            end_time = start_time + timedelta(hours=3)\n            end_hour = end_time.hour\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date_str],\n                \"hours\": (start_hour, end_hour)\n            })\n    \n    return tasks\n\nconversation = [\n    \"Mila: Everything as expected? I just wanted to let you know I have to submit a project proposal 14 days later from 1 p.m. until 3 hours after that.\",\n    \"Mohammed: That sounds like a big undertaking, Mila. How are things going with your reporting currently? Are you focused on a particular region right now?\",\n    \"Mila: It's challenging, as always. I did submit a project proposal 14 days later, and thankfully, it went smoothly. It\u2019s a relief to finally have that off my plate.\",\n    \"Mohammed: I can only imagine the pressures you face. I find that focusing on the details helps me with my work\u2014the precision of each"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours'.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update a status report\" in line:\n            task = \"Update status report\"\n            hours = (9, 11)\n\n            days = []\n            if \"ten days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=10)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"today\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"in 2 days\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            \n            if days:\n                tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2024-03-11\",\n      \"2024-03-12\",\n      \"2024-03-13\",\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-24\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2022-03-21\",\n      \"2022-03-22\",\n      \"2022-03-24\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"restore '57 Chevy\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"decipher data from ocean sampling\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"present evidence to policymakers\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2022-03-12\",\n      \"2022-03-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-03-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2022-03-22\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"finalizing the wine list for a special event\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-03-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"reorganize the local history section at the library\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2022-03-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"car restoration\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"planning a small exhibition\",\n    \"days\": [\n      \"2022-04-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"tinkering with a '57 Chevy\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-03-17\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"designing new collection\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"restoration projects\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"bodywork on Chevy\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"working on the engine of Chevy\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  },\n  {\n    \"work\": \"sewing\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2022-03-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"client presentation\" in line.lower() and \"three days ago\" in line.lower():\n            try:\n                date_str = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)).strftime(\"%Y-%m-%d\")\n                start_hour = 11\n                end_hour = 11 + 4\n                tasks.append({\n                    \"work\": \"manage client presentation\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle potential date parsing errors\n\n        if \"engine work\" in line.lower() and \"Mustang\" in line.lower() and \"bodywork\" in line.lower():\n            tasks.append({\n                \"work\": \"bodywork on a 1967 Mustang\",\n                \"days\": [conversation_date],\n                \"hours\": (9, 17)\n            })\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-03-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"restoring a Packard from '35\",\n    \"days\": [\n      \"2022-04-07\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2022-03-12\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"restore a '67 Mustang\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-23\",\n      \"2022-03-24\",\n      \"2022-03-25\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"water the office plants\",\n    \"days\": [\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\",\n      \"2022-03-30\",\n      \"2022-03-31\",\n      \"2022-04-01\",\n      \"2022-04-02\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    tasks = []\n    task_description = \"update the project dashboard\"\n    \n    for line in conversation:\n        if task_description in line.lower():\n            # Extract temporal information\n            if \"starting in 5 days\" in line.lower():\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=5)\n                days = [start_date.strftime(\"%Y-%m-%d\"),\n                        (start_date + timedelta(days=1)).strftime(\"%Y-%m-%d\"),\n                        (start_date + timedelta(days=2)).strftime(\"%Y-%m-%d\")]\n                hours = (16, 19)  # 4 p.m. to 7 p.m.\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})\n            elif \"3 days ago\" in line.lower():\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (16, 19)\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})\n            elif \"yesterday\" in line.lower():\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                hours = (16, 19)\n                tasks.append({\"work\": task_description, \"days\": days, \"hours\": hours})\n            elif \"two days ago\" in line.lower():\n                start_date = datetime.strptime(conversation"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2022-03-28\",\n      \"2022-04-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record daily observations\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-04-02\",\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-07\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"revise a contract\" in line.lower() and \"18 days later\" in line.lower():\n            task = \"revise a contract\"\n            offset_days = 18\n            task_date = conversation_date + timedelta(days=offset_days)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            \n            if \"from 7 in the morning for two hours\" in line.lower():\n                start_hour = 7\n                end_hour = 9\n                hours = (start_hour, end_hour)\n            else:\n                hours = None\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date_str],\n                \"hours\": hours\n            })\n\n        if \"next week\" in line.lower() and \"tasting menu\" in line.lower():\n            task = \"special tasting menu\"\n            offset_days = 7\n            task_date = conversation_date + timedelta(days=offset_days)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date_str],\n                \"hours\": None\n            })\n        \n        if \"next month\" in line.lower() and \"beach\" in line.lower():\n            task = \"beach vacation\"\n            offset_months = 1\n            task_date = conversation_date.replace(month=conversation_date.month + offset_months)\n            task"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2022-03-30\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2022-03-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2022-03-30\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"organizing a workshop for families\",\n    \"days\": [\n      \"2022-03-26\",\n      \"2022-03-27\",\n      \"2022-03-28\",\n      \"2022-03-29\",\n      \"2022-03-30\",\n      \"2022-03-31\",\n      \"2022-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-04-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"restore a '67 Mustang\",\n    \"days\": [\n      \"2022-04-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-04-04\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-03-25\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-07-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"restoring a '57 Chevy\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2023-12-22\",\n      \"2023-12-23\",\n      \"2023-12-24\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2023-12-25\",\n      \"2023-12-26\",\n      \"2023-12-27\",\n      \"2023-12-28\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2023-12-19\",\n      \"2023-12-23\",\n      \"2023-12-28\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"responding to customer inquiries\",\n    \"days\": [\n      \"2023-12-17\",\n      \"2023-12-19\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"collaborative mural project\",\n    \"days\": [\n      \"2024-02-01\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2023-12-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-12-16\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-12-20\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"village health education session\",\n    \"days\": [\n      \"2024-01-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-12-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a proposal document\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-12-19\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-01-07\",\n      \"2024-01-08\",\n      \"2024-01-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2023-12-31\",\n      \"2024-01-08\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-01-03\",\n      \"2024-01-05\",\n      \"2024-01-07\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring social media trends\",\n    \"days\": [\n      \"2023-12-30\",\n      \"2024-01-04\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"interview with a potential volunteer\",\n    \"days\": [\"2024-01-30\"],\n    \"hours\": (13, 16)\n  },\n  {\n    \"work\": \"writing a new piece about empathy\",\n    \"days\": [\"2024-01-31\"],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-01-11\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"meeting with a potential investor\",\n    \"days\": [\n      \"2023-12-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-12-29\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-01-01\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-01-01\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"review a research paper\" in line and \"16 days later\" in line and \"7 in the morning\" in line and \"four hours\" in line:\n            task = \"Review research paper\"\n            offset_days = 16\n            task_date = conversation_date + timedelta(days=offset_days)\n            start_hour = 7\n            end_hour = 7 + 4\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (start_hour, end_hour)\n            })\n\n    return tasks\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format. Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    results = []\n\n    for line in conversation:\n        if \"analyze customer feedback\" in line:\n            try:\n                # Extract temporal information\n                days_later = int(line.split(\" \")[-2])\n                task_date = conversation_date + timedelta(days=days_later)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                start_time_str = line.split(\"from \")[1].split(\" until\")[0]\n                start_hour = int(start_time_str.split(\" \")[0]) if start_time_str else 12\n                if \"a.m.\" in line:\n                    if start_hour == 12: \n                       start_hour = 0\n                elif \"p.m.\" in line and start_hour != 12:\n                    start_hour += 12\n\n                end_hour = start_hour + 3\n\n                results.append({\n                    \"work\": \"analyze customer feedback\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except Exception as e:\n                print(f\"Error processing line: {line}, Error: {e}\")\n\n    return results\n```\n\n```\n[\n    {\n        \"work\": \"analyze customer feedback\",\n        \"days\": [\n            \"2024-01-25\"\n        ],\n        \"hours\": (\n            12,\n            15\n        )\n    },\n    {\n        \"work\":"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-01-10\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.  \n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"update the maintenance log\" in line:\n            task = \"Update maintenance log\"\n            days_ago = int(line.split(\" \")[-3])\n            start_date = conversation_date - timedelta(days=days_ago)\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n            hours = (11, 15)  # 11 AM to 3 PM (11 + 4 hours)\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": hours\n            })\n\n    return tasks\n```\n\n```python\nconversation = [\n    \"Logan: What have you been up to?\",\n    \"Yuna: Oh, hi Logan! I\u2019ve been quite busy recently. I had to update the maintenance log, starting 22 days ago for three consecutive days, and then again from 11 in the morning for four hours each day.\",\n    \"Logan: That sounds like a lot to handle alongside everything else! I've been prepping for a big kayaking trip next month, making sure all the gear is in top shape.\",\n    \"Yuna: Kayaking sounds amazing! I wish I had more time for adventures. It seems like I just finished one task and there's another waiting. I actually did update the maintenance log, starting 22 days ago for three consecutive days.\",\n    \"Logan: It's good to stay busy, I guess. Keeps life interesting. We'"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task details are found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"safety check\" in line.lower():\n            try:\n                start_days_ago = int(\"eleven\")\n                duration_days = 4\n                start_time_str = \"3 p.m.\"\n                start_hour = datetime.strptime(start_time_str, \"%I %p\").hour\n                end_hour = start_hour + 4\n                \n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=start_days_ago)\n                days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n                \n                tasks.append({\n                    \"work\": \"daily safety check\",\n                    \"days\": days,\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass\n        if \"exhibition\" in line.lower():\n            tasks.append({\n                    \"work\": \"preparing exhibition\",\n                    \"days\": [conversation_date],\n                    \"hours\": (9,17)\n                })\n\n    return tasks\n\n# Example usage (assuming the provided conversation as input):\nconversation = [\n    \"Long time no talk!\",\n    \"Yuna: Hi Victoria! It feels like ages. I\u2019ve been swamped with work lately. I had to conduct a daily safety check, starting eleven days ago for four consecutive days, from 3 p.m. until 4 hours after that, and it was"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-10-01\",\n      \"2024-10-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2024-02-01\",\n      \"2024-02-08\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-09-28\",\n      \"2024-10-09\"\n    ],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-10-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"planning a team outing\",\n    \"days\": [\n      \"2024-10-26\",\n      \"2024-10-20\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  },\n  {\n    \"work\": \"gathering data on plant growth in microgravity\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-10-06\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"make felt animals\",\n    \"days\": [\n      \"2024-10-28\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  },\n  {\n    \"work\": \"compete\",\n    \"days\": [\n      \"2024-11-17\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-10-03\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"nature walk with students\",\n    \"days\": [\n      \"2024-10-14\",\n      \"2024-10-15\",\n      \"2024-10-16\",\n      \"2024-10-17\",\n      \"2024-10-18\",\n      \"2024-10-19\",\n      \"2024-10-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-10-23\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"make little felt animals with the children\",\n    \"days\": [\n      \"2023-10-30\"\n    ],\n    \"hours\": null\n  },\n  {\n    \"work\": \"prepare some stories\",\n    \"days\": [\n      \"2023-10-29\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-10-05\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"preparing for class/story time\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  },\n  {\n    \"work\": \"find a venue for a workshop\",\n    \"days\": [\n      \"2024-10-07\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"rehearsals for Tosca performance\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"preparing new art lessons\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-10-17\",\n      \"2024-10-18\",\n      \"2024-10-19\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-10-22\",\n      \"2024-10-23\",\n      \"2024-10-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"sourcing rare spices\",\n    \"days\": [\n      \"2024-10-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-10-11\",\n      \"2024-10-12\",\n      \"2024-10-13\",\n      \"2024-10-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2024-10-20\",\n      \"2024-10-21\",\n      \"2024-10-23\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-10-15\",\n      \"2024-10-18\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update an inventory list\"\n    days_offset = None\n    start_hour = None\n    end_hour = None\n\n    for line in conversation:\n        if work_task in line.lower() and \"days later\" in line.lower():\n            try:\n                days_offset = int(line.lower().split(\"days later\")[0].split()[-1])\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            except ValueError:\n                pass\n        if work_task in line.lower() and \"in the morning\" in line.lower():\n            start_hour = 11\n            end_hour = start_hour + 3\n\n    if days_offset is not None and start_hour is not None and end_hour is not None:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": [task_date_str],\n            \"hours\": (start_hour, end_hour)\n        })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-10-18\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"market survey\" in line.lower():\n            if \"today\" in line.lower():\n                start_hour = int(line.lower().split(\"at \")[-1].split(\" in the morning\")[0]) if \"in the morning\" in line.lower() else int(line.lower().split(\"at \")[-1].split(\":\")[0])\n                end_hour = start_hour + 4\n                tasks.append({\n                    \"work\": \"conducting a market survey\",\n                    \"days\": [conversation_date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            elif \"next week\" in line.lower():\n                reference_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                next_week_date = reference_date + timedelta(days=7)\n                next_week_date_str = next_week_date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": \"conducting a market survey\",\n                    \"days\": [next_week_date_str],\n                    \"hours\": (0, 0)  # Time not specified\n                })\n            elif \"in a week or so\" in line.lower():\n                reference_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                a_week_date = reference_date + timedelta(days=7)\n                a_week_date_str = a_week_date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": \"conducting a"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2024-10-15\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  },\n  {\n    \"work\": \"planning a fall-themed story time\",\n    \"days\": [\n      \"2024-10-14\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details = []\n\n    for line in conversation:\n        if \"compile a weekly summary\" in line:\n            task = \"Compile weekly summary\"\n            \n            # Extract the offset in days\n            offset_days = int(line.split(\" \")[-2])\n            \n            # Calculate the task date\n            task_date = conversation_date + timedelta(days=offset_days)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n           \n            # Extract time information\n            if \"from 12 p.m. until 3 hours after that\" in line:\n                start_hour = 12\n                end_hour = 15\n            elif \"from 12 p.m. for three hours\" in line:\n                start_hour = 12\n                end_hour = 15\n            else:\n                start_hour = None\n                end_hour = None\n\n            if start_hour is not None and end_hour is not None:\n                task_details.append({\n                    \"work\": task,\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n\n    return task_details\n\n# Example usage\nconversation = [\n    \"Just wanted to say hi and connect.\",\n    \"Yuna: Hi Tom! It's been a while. I just wanted to let you know I have to compile a weekly summary 19 days later, from 12 p.m. until 3 hours after that.\",\n    \"Tom: Hi Yuna! It\u2019s good"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-10-15\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    for line in conversation:\n        if \"maintenance log\" in line and \"update\" in line:\n            days = []\n            start_date = conversation_date - timedelta(days=12)\n            for i in range(3):\n                days.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n            \n            hours = (17, 19)  # 5 p.m. to 7 p.m. (two hours after 5 p.m.)\n            \n            tasks.append({\n                \"work\": \"Update maintenance log\",\n                \"days\": days,\n                \"hours\": hours\n            })\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"Conduct code reviews\",\n    \"days\": [\n      \"2022-11-17\",\n      \"2022-11-18\",\n      \"2022-11-19\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reading a technical article\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2022-11-15\",\n      \"2022-11-26\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-18\",\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Manage daily work schedule\",\n    \"days\": [\n      \"2022-11-18\",\n      \"2022-11-25\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Filming orangutans in Borneo\",\n    \"days\": [\n      \"2022-12-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-11-15\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2022-11-27\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"fundraising for next project\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2022-11-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2022-11-25\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2022-11-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"preparing for another trip to the Amazon\",\n    \"days\": [\n      \"2022-12-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a proposal document for a new project focused on documenting whale migration patterns\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      14,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-11-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Write a technical blog post\",\n    \"days\": [\n      \"2022-11-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            try:\n                # Extract temporal information\n                time_str = \"3 p.m.\"\n                duration_str = \"4 hours\"\n                \n                # Convert time string to datetime object\n                time_obj = datetime.strptime(time_str, \"%I %p\")\n                start_hour = time_obj.hour\n\n                # Calculate end time\n                end_hour = start_hour + int(duration_str.split(\" \")[0])\n\n                # Calculate meeting date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                meeting_date = date_obj + timedelta(days=2)\n                meeting_date_str = meeting_date.strftime(\"%Y-%m-%d\")\n                \n                tasks.append({\n                    \"work\": \"organize a strategy meeting\",\n                    \"days\": [meeting_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where time extraction fails\n    return tasks\n\n# Example usage with the provided conversation\nconversation = [\n    \"How are you feeling today?\",\n    \"Joel: Hey Malik! I\u2019m doing alright, just letting you know I have to organize a strategy meeting two days later from 3 p.m. until 4 hours after that.\",\n    \"Malik: That sounds like a busy couple of days, Joel! What have you been working on recently, besides planning the meeting?\",\n    \"Joel: Primarily, I've been focused on editing footage from my recent trip to Borneo. The orangutans were incredible! It's been taking up most of my time, but it'"
"```json\n[\n  {\n    \"work\": \"scheduling routine maintenance\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-02-29\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-02-26\",\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-03-05\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-01-18\",\n      \"2024-01-19\",\n      \"2024-01-20\",\n      \"2024-01-21\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2022-12-06\",\n      \"2022-12-12\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-19\",\n      \"2024-02-24\",\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-19\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2022-12-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"filming b-roll footage for a potential documentary\",\n    \"days\": [\n      \"2022-11-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2022-12-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2022-12-03\",\n      \"2022-12-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"submit a project proposal\" in line:\n            try:\n                parts = line.split(\"submit a project proposal \")\n                offset_str = parts[1].split(\" later\")[0]\n                offset_days = int(offset_str)\n                \n                time_range_str = parts[1].split(\"from \")[1]\n                start_time_str = time_range_str.split(\" until \")[0]\n                \n                if \"p.m.\" in start_time_str:\n                    start_time_str = start_time_str.replace(\" p.m.\", \"\")\n                    start_hour = int(start_time_str.split(\":\")[0]) + 12\n                else:\n                    start_hour = int(start_time_str.split(\":\")[0])\n                \n                duration_str = time_range_str.split(\"until \")[1].split(\" hours\")[0]\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n                \n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                tasks.append({\n                    \"work\": \"submit a project proposal\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except Exception as e:\n                print(f\"Error parsing temporal details: {e}\")\n                continue\n\n    "
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2022-12-07\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"organize a workshop\" in line:\n            try:\n                # Extract the relative time expression\n                days_offset = 21\n\n                # Convert relative date to absolute date\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = conversation_datetime + timedelta(days=days_offset)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract time details\n                start_time_str = \"3 in the afternoon\"\n                start_time = datetime.strptime(start_time_str, \"%I in the %p\").time()\n                start_hour = start_time.hour\n\n                duration_hours = 2\n                end_hour = start_hour + duration_hours\n\n                task_details.append({\n                    \"work\": \"organize a workshop\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except Exception as e:\n                print(f\"Error processing line: {line} - {e}\")\n                continue  # Skip to the next line if there's an error\n\n    return task_details\n\n# Example Usage:\nconversation = [\n    \"Just sending some good vibes your way.\",\n    \"Joel: Hey Imani, just wanted to let you know I have to organize a workshop 21 days later, from 3 in the afternoon for two hours. It\u2019s been a busy few weeks getting everything planned out.\",\n    \"Imani"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"filming the orangutans in Borneo\",\n    \"days\": [\n      \"2024-03-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2020-01-13\",\n      \"2020-01-15\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    \n    for line in conversation:\n        if \"safety check\" in line.lower():\n            # Extract the number of days ago\n            days_ago = int(\"\".join(filter(str.isdigit, line)))\n            \n            # Calculate the date\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            date_str = date.strftime(\"%Y-%m-%d\")\n\n            tasks.append({\n                \"work\": \"daily safety check\",\n                \"days\": [date_str],\n                \"hours\": (7, 9)  # 7 am for 2 hours\n            })\n        if \"debugging\" in line.lower():\n            tasks.append({\n                \"work\": \"debugging AI code\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 24)\n            })\n        if \"machine learning model\" in line.lower():\n            tasks.append({\n                \"work\": \"tackling a new machine learning model\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 24)\n            })\n        if \"rearranging\" in line.lower():\n            tasks.append({\n                \"work\": \"rearranging the Victorian section\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 24)\n            })\n        if \"sourcing trips\" in line.lower() and \"Paris\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=30)\n            date_str = date.strftime(\"%Y-%m-%d\")\n\n            tasks.append({\n                \"work\": \"sourcing trips to Paris\",\n                \"days\": [date_str],\n                \"hours"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2020-01-10\",\n      \"2020-01-13\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2020-01-14\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2020-01-08\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2020-01-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-01-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"podcast episode sixteen days ago\" in line:\n            task = \"record podcast episode\"\n            days = [ (conversation_date - timedelta(days=16)).strftime(\"%Y-%m-%d\")]\n            hours = (17, 19)\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        if \"working on another project this week\" in line:\n            task = \"work on another project\"\n            days = [(conversation_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(7) if (conversation_date + timedelta(days=i)).weekday() < 5]\n            hours = (9, 17)  # Assuming a standard workday\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n        if \"get this new algorithm to work\" in line:\n            task = \"work on AI algorithm\"\n            days = [conversation_date.strftime(\"%Y-%m-%d\")]\n            hours = (9, 17)\n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n    return tasks\n\n# Example usage (assuming the input conversation is in a variable called 'conversation'):\nconversation = [\n    \"Good to hear from you, how are things?\",\n    \"Adam: Hey Makayla, things are pretty busy! I had to record a podcast episode sixteen days ago, and it took up my evening from 5 p.m. until 7 p.m. It was a lot of work getting everything just right.\",\n"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2020-01-21\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"prepare for next assignment, heading to Ukraine\",\n    \"days\": [\n      \"2020-01-29\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-16\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"financial report\" in line:\n            try:\n                date_str = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days_ago = 24\n                task_date = date_str - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                start_hour = 7\n                end_hour = start_hour + 4\n                tasks.append({\n                    \"work\": \"prepare a financial report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                print(\"Invalid date format. Please use YYYY-MM-DD.\")\n                return []\n        elif \"improve the efficiency of an algorithm\" in line:\n            tasks.append({\n                \"work\": \"improve the efficiency of an algorithm\",\n                \"days\": [],\n                \"hours\": (0, 24)\n            })\n        elif \"playing at a small venue downtown next week\" in line:\n            try:\n                date_str = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                task_date = date_str + timedelta(days=7)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": \"playing at a small venue downtown\",\n                    \"days\": [task_date_str],\n                    \"hours\": (0, 24)\n                })\n            except ValueError:\n                print(\"Invalid date format. Please use YYYY-MM-DD.\")\n                return []\n\n"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2020-01-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2020-01-18\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-27\",\n      \"2020-01-28\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reading a technical article\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"reading a technical article\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"reading a technical article\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"reading a technical article\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-27\",\n      \"2020-01-28\",\n      \"2020-01-29\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2020-01-26\",\n      \"2020-01-29\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2020-01-28\",\n      \"2020-01-23\",\n      \"2020-01-22\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"coding\",\n    \"days\": [\n      \"2020-01-28\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"sketches for the new collection\",\n    \"days\": [\n      \"2020-01-28\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"design\",\n    \"days\": [\n      \"2020-01-28\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-03-12\"\n    ],\n    \"hours\": (13, 17)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"draft an email to stakeholders\" in line:\n            try:\n                # Extract temporal information\n                time_expression = \"two days ago\"\n                days_ago = int(time_expression.split()[0])\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                start_hour = 7\n                end_hour = 7 + 2\n                \n                tasks.append({\n                    \"work\": \"draft an email to stakeholders\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass\n        if \"working on a new algorithm for image recognition\" in line:\n            tasks.append({\n                \"work\": \"working on a new algorithm for image recognition\",\n                \"days\": [],\n                \"hours\": []\n            })\n        if \"heading to Japan for a competition next week\" in line:\n            try:\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": \"competition in Japan\",\n                    \"days\": [task_date_str],\n                    \"hours\": []\n                })\n            except ValueError:\n                pass\n\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"It\u2019s good to connect with you.\",\n    \"Adam: Hey Hailey, it\u2019s good to connect with you too! I just finished a busy stretch - I"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-01-22\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  },\n  {\n    \"work\": \"debugging a particularly nasty AI algorithm\",\n    \"days\": [\n      \"2020-01-22\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-24\"\n    ],\n    \"hours\": (9, 12)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2020-02-01\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-07-10\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2020-02-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2020-01-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-01-12\",\n      \"2024-01-13\",\n      \"2024-01-14\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2021-09-15\",\n      \"2021-09-16\",\n      \"2021-09-17\",\n      \"2021-09-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-30\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"work on a new composition for the trio\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-09-07\",\n      \"2021-09-11\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organizing a community event\",\n    \"days\": [\n      \"2021-09-09\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-09-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"calligraphy commission for a local mosque\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"composing a new piece\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"private commission - a large panel for a collector in Riyadh\",\n    \"days\": [\n      \"2021-09-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-09-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\"2024-02-13\"],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.  Empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"finalizing a business plan\" in line:\n            task = \"finalizing a business plan\"\n            # Calculate the date 21 days ago\n            date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            days_ago = 21\n            task_date = date_obj - timedelta(days=days_ago)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            hours = (10, 13)  # 10 am to 1 pm (3 hours)\n            tasks.append({\"work\": task, \"days\": [task_date_str], \"hours\": hours})\n        if \"gig at \\\"The Blue Note\\\" next month\" in line:\n            task = \"gig at The Blue Note\"\n            # Calculate the date next month\n            date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            next_month = date_obj.month + 1\n            next_year = date_obj.year\n            if next_month > 12:\n                next_month = 1\n                next_year += 1\n            task_date = datetime(next_year, next_month, 1).strftime(\"%Y-%m-%d\")\n            hours = (19, 23)  # Assuming a typical evening gig, adjust as needed\n            tasks.append({\"work\": task, \"days\": [task_date], \"hours\": hours})\n\n    return tasks\n```\n\n```\n[\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\n      \"2024-01-0"
"```json\n[\n  {\n    \"work\": \"updating a training manual\",\n    \"days\": [\n      \"2021-09-14\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"gig with the trio\",\n    \"days\": [\n      \"2021-11-01\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task description, dates, and time range) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.  Used as a reference\n                                 for relative time expressions.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"performance review\" in line.lower():\n            try:\n                # Extract the offset in days\n                offset_days = int(line.lower().split(\"nine days ago\")[0].split()[-1])\n                # Calculate the date of the performance review\n                review_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                review_date_str = review_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the start time\n                start_time_str = line.lower().split(\"1 p.m.\")[0].split()[-1]\n                start_hour = 13\n                end_hour = start_hour + 1\n                \n                tasks.append({\n                    \"work\": \"write a performance review\",\n                    \"days\": [review_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass #if the date format is off, do nothing\n        if \"boat commission\" in line.lower() or \"boat show\" in line.lower() or \"finish this hull\" in line.lower():\n            tasks.append({\n                \"work\": \"boat commission\",\n                \"days\": [],\n                \"hours\": (0, 24)\n            })\n        if \"stretch my improvisational muscles\" in line.lower():\n            try:\n                #find the date next week\n                date_object = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                "
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-09-12\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"brainstorm new menu items\",\n    \"days\": [\n      \"2021-09-22\"\n    ],\n    \"hours\": (18, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-27\",\n      \"2021-09-28\",\n      \"2021-09-29\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-08\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-09\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-11\",\n      \"2021-09-12\",\n      \"2021-09-13\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2021-09-06\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine maintenance\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-07-17\",\n      \"2024-07-18\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"performing at The Blue Note\",\n    \"days\": [\n      \"2024-07-29\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-09-29\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2021-09-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"on-snow training\",\n    \"days\": [\n      \"2021-10-11\",\n      \"2021-10-12\",\n      \"2021-10-13\",\n      \"2021-10-14\",\n      \"2021-10-15\",\n      \"2021-10-16\",\n      \"2021-10-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-09-28\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule an interview\",\n    \"days\": [\n      \"2021-09-28\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-07-12\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2023-03-07\",\n      \"2023-03-08\",\n      \"2023-03-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-03-04\",\n      \"2023-03-10\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Identifies a work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"monitor team activity\" in line.lower():\n            days_ago = []\n            hours = []\n            \n            if \"eight days ago\" in line.lower():\n                days_ago.append((date_obj - timedelta(days=8)).strftime(\"%Y-%m-%d\"))\n            if \"six days ago\" in line.lower():\n                days_ago.append((date_obj - timedelta(days=6)).strftime(\"%Y-%m-%d\"))\n            if \"five days ago\" in line.lower():\n                days_ago.append((date_obj - timedelta(days=5)).strftime(\"%Y-%m-%d\"))\n\n            if \"3 in the afternoon\" in line.lower():\n                hours = [15, 18]\n\n            if days_ago and hours:\n                for day in days_ago:\n                    task_details.append({\n                        \"work\": \"Monitor team activity\",\n                        \"days\": [day],\n                        \"hours\": tuple(hours)\n                    })\n        if \"bronze figure of Apollo\" in line.lower():\n            task_details.append({\n                \"work\": \"Sculpting a bronze figure of Apollo\",\n                \"days\": [],\n                \"hours\": []\n            })\n\n    return task_details\n\n# Example usage:\nconversation = [\n    \"How\u2019s everything been?\",\n    \"Leonardo: Hey Alejandro! Things have been pretty busy here. I had to monitor team activity eight days ago, six days ago, and five days ago, all from 3"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2023-03-10\",\n      \"2023-03-11\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2023-03-11\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2023-03-13\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2023-03-06\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"refine a marble bust\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-03-02\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"sculpting a bronze figure of Hercules\",\n    \"days\": [\n      \"2023-03-11\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2023-03-12\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2023-03-04\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-03-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2023-03-19\",\n      \"2023-03-20\",\n      \"2023-03-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking system alerts\",\n    \"days\": [\n      \"2023-03-16\",\n      \"2023-03-17\",\n      \"2023-03-18\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2023-03-20\",\n      \"2023-03-21\",\n      \"2023-03-22\",\n      \"2023-03-23\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2023-03-17\",\n      \"2023-03-24\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2023-03-14\",\n      \"2023-03-18\",\n      \"2023-03-19\"\n    ],\n    \"hours\": (9, 13)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-03-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2023-03-26\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-03-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2023-03-16\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2023-03-18\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-03-14\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2021-08-07\",\n      \"2021-08-08\",\n      \"2021-08-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-13\",\n      \"2021-08-14\",\n      \"2021-08-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-06\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-03\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2021-08-06\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article to understand a new physics engine\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"recording daily observations\",\n    \"days\": [\n      \"2021-08-02\",\n      \"2021-08-06\"\n    ],\n    \"hours\": (13, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2021-08-04\",\n      \"2021-08-07\",\n      \"2021-08-10\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"starting a new VR project\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2021-08-03\",\n      \"2021-08-06\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2021-08-08\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"coding\",\n    \"days\": [\n      \"2021-08-14\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  },\n  {\n    \"work\": \"running a series of health workshops\",\n    \"days\": [\n      \"2021-08-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a market survey for the new VR project\",\n    \"days\": [\n      \"2021-08-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-08-02\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"brainstorming some new worlds\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"adding a puzzle element to the VR game\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      16,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a figure inspired by Icarus\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-08-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"VR development - adding a new underwater level and experimenting with shaders\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"restoring a chronometer\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-08-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"perfect a new rose iron design\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"expand the VR world with more interactive elements\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"trying a new technique with Damascus steel\",\n    \"days\": [\n      \"2021-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-08-05\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"cataloging a new collection of Victorian-era scientific instruments\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"check system alerts\" in line:\n            task_description = \"check system alerts\"\n            start_time_str = line.split(\"from \")[1].split(\" until\")[0]\n            end_time_str = line.split(\"until \")[1].split(\",\")[0]\n\n            start_hour = int(start_time_str.split(\" p.m.\")[0].split(\" a.m.\")[0])\n            if \"p.m.\" in start_time_str:\n                if start_hour != 12:\n                    start_hour += 12\n            \n            end_hour = start_hour + 2\n            hours = (start_hour, end_hour)\n\n            if \"4 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=4)\n                days = [start_date.strftime(\"%Y-%m-%d\"), (start_date + timedelta(days=1)).strftime(\"%Y-%m-%d\"), (start_date + timedelta(days=2)).strftime(\"%Y-%m-%d\")]\n            elif \"2 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n            elif \"yesterday\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n            elif \"today\" in line:\n                start_date = datetime.strptime"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2021-08-21\",\n      \"2021-08-22\",\n      \"2021-08-23\",\n      \"2021-08-24\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-07-19\",\n      \"2024-07-20\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"stand-up meeting\" in line:\n            days_later = []\n            hours = (12, 14)\n            \n            if \"12 days later\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=12)\n                days_later.append(date.strftime(\"%Y-%m-%d\"))\n            if \"the day after that\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=13)\n                days_later.append(date.strftime(\"%Y-%m-%d\"))\n            if \"15 days later\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=15)\n                days_later.append(date.strftime(\"%Y-%m-%d\"))\n                \n            tasks.append({\n                \"work\": \"attend daily stand-up meeting\",\n                \"days\": days_later,\n                \"hours\": hours\n            })\n        if \"VR development\" in line:\n            tasks.append({\n                \"work\": \"VR development\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 24)\n            })\n        if \"custom briefcase\" in line:\n            tasks.append({\n                \"work\": \"work on a custom briefcase\",\n                \"days\": [conversation_date],\n                \"hours\": (0, 24)\n            })\n        if \""
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2021-08-17\",\n      \"2021-08-18\"\n    ],\n    \"hours\": (8, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"review a performance report\" in line:\n            try:\n                if \"tomorrow\" in line:\n                    task_date = date_obj + timedelta(days=1)\n                elif \"yesterday\" in line:\n                    task_date = date_obj - timedelta(days=1)\n                elif \"2 days ago\" in line:\n                    task_date = date_obj - timedelta(days=2)\n                elif \"the day before yesterday\" in line:\n                    task_date = date_obj - timedelta(days=3)\n                elif \"in 2 days\" in line:\n                    task_date = date_obj + timedelta(days=2)\n                elif \"in 3 days\" in line:\n                    task_date = date_obj + timedelta(days=3)\n                elif \"today\" in line:\n                     task_date = date_obj\n                else:\n                    continue\n\n                start_time_str = line.split(\"from \")[1].split(\" for\")[0]\n                start_hour = int(start_time_str.split(\":\")[0])\n                \n                if \"three hours\" in line:\n                    end_hour = start_hour + 3\n                elif \"until 6 p.m.\" in line:\n                    end_hour = 18\n                else:\n                     continue\n                \n                tasks.append({\n                    \"work\": \"review a performance report\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError):\n                pass\n    \n    return"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2021-08-25\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-08-16\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  },\n  {\n    \"work\": \"squash some bugs\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2021-08-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"starting a new commission\",\n    \"days\": [\n      \"2021-08-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2021-08-21\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2021-08-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2021-08-29\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"check inventory levels\"\n    days = []\n    hours = (8, 11)  # 8 AM to 11 AM\n\n    # Calculate the start date based on \"starting in 3 days\"\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n    \n    # Add 3 consecutive days to the days list\n    for i in range(3):\n        date = start_date + timedelta(days=i)\n        days.append(date.strftime(\"%Y-%m-%d\"))\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"working on a new piece for a reading\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a daily summary\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2022-01-09\",\n      \"2022-01-10\",\n      \"2022-01-12\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2022-01-04\",\n      \"2022-01-11\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n  \"\"\"\n  Extracts work-related task details from a conversation.\n\n  Args:\n    conversation: A list of strings representing the conversation transcript.\n    conversation_date: A string representing the date of the conversation (YYYY-MM-DD).\n\n  Returns:\n    A list of dictionaries, each representing a work task with its details.\n  \"\"\"\n\n  tasks = []\n  date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n  for line in conversation:\n    if \"prepare a workshop agenda\" in line.lower():\n      try:\n        time_str = line.split(\"from \")[1].split(\" for \")[0]\n        start_hour = int(time_str.split(\" \")[0])\n\n        duration_str = line.split(\"for \")[1].split(\" hours\")[0]\n        duration = int(duration_str)\n        end_hour = start_hour + duration\n\n        days_ago_str = line.split(\"ago\")[0].split(\" \")[-1]\n        days_ago = int(days_ago_str)\n\n        task_date = date_obj - timedelta(days=days_ago)\n        task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n        tasks.append({\n            \"work\": \"prepare a workshop agenda\",\n            \"days\": [task_date_str],\n            \"hours\": (start_hour, end_hour)\n        })\n      except:\n        pass\n\n  return tasks\n\n# Example usage:\nconversation = [\n    \"Heidi: How\u2019s your week going?\",\n    \"Camila: It's been pretty good, actually! I just finished a new sketch for a community project. It\u2019s a big one, so lots of planning involved. How about you?\",\n    \"Heidi: Things have been busy. I had to prepare a workshop agenda 19 days ago, keeping me occupied from 7 in the morning for three hours. It was a lot to get done, but I think it all came together well.\",\n    \"Camila: That sounds intense! It's good you managed to pull it off. I always find the preparation stage is the hardest part of any"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-01-04\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"practice for World Cup race\",\n    \"days\": [\n      \"2024-03-16\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2022-01-02\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update the company website\",\n    \"days\": [\n      \"2022-01-11\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Rehearsal\",\n    \"days\": [\n      \"2022-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"organize a strategy meeting\" in line:\n            try:\n                parts = line.split(\"from\")\n                time_str = parts[1].split(\"for\")[0].strip()\n                hour_str = time_str.split(\" \")[0]\n                hour = int(hour_str)\n                duration_str = parts[1].split(\"for\")[1].strip()\n                duration = int(duration_str.split(\" \")[0])\n                \n                offset_days = 22\n                task_date = conversation_date - timedelta(days=offset_days)\n                \n                start_hour = hour\n                end_hour = hour + duration\n\n                task = {\n                    \"work\": \"organize a strategy meeting\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour),\n                }\n                tasks.append(task)\n            except:\n                pass\n    return tasks\n\n# Example Usage (using the provided input):\nconversation = [\n    \"How\u2019s everything?\",\n    \"Heidi: Oh, hi Atsuko! Things have been busy. I had to organize a strategy meeting 22 days ago from 10 in the morning for two hours. It was quite a task getting everyone aligned, but it went well!\",\n    \"Atsuko: That sounds\u2026intense! I can only imagine coordinating so many people. I've been lost in the details of a new chapter for my manga.\",\n    "
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2022-01-05\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"research for a new exhibit\",\n    \"days\": [\n      \"2022-01-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Reading a technical article for professional development\",\n    \"days\": [\n      \"2022-01-15\",\n      \"2022-01-16\",\n      \"2022-01-17\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2022-01-23\",\n      \"2022-01-24\",\n      \"2022-01-25\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project progress\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2022-01-20\",\n      \"2022-01-23\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    work_task = \"maintain a training schedule\"\n    days = []\n    hours = (7, 11)\n\n    for line in conversation:\n        if \"14 days later\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=14)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"15 days later\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=15)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"17 days later\" in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=17)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n        if \"tomorrow\" in line and work_task in line:\n            date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n            days.append(date.strftime(\"%Y-%m-%d\"))\n\n    if days:\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2022-01-21\",\n      \"2022-01-26\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"prepare a proposal document\"\n    \n    # Calculate the date 15 days from the conversation date\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    target_date = conversation_datetime + timedelta(days=15)\n    target_date_str = target_date.strftime(\"%Y-%m-%d\")\n    \n    hours = (8, 11)  # 8 in the morning for three hours\n\n    for line in conversation:\n        if task in line and \"15 days later\" in line:\n            task_details.append({\n                \"work\": task,\n                \"days\": [target_date_str],\n                \"hours\": hours\n            })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2022-01-20\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting a customer feedback report\",\n    \"days\": [\n      \"2022-01-18\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  },\n  {\n    \"work\": \"catch a flight\",\n    \"days\": [\n      \"2022-01-25\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"organize a community event\" in line:\n            try:\n                # Extract the number of days and time details\n                days_later = int(line.split(\" \")[-3])\n                start_time_str = line.split(\"from \")[1].split(\" \")[0]\n                start_hour = int(datetime.strptime(start_time_str, \"%I %p\").hour)\n                end_hour = start_hour + 2\n\n                # Calculate the event date\n                event_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_later)\n                event_date_str = event_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"organize a community event\",\n                    \"days\": [event_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle potential errors in parsing dates or times\n    return tasks\n\n# Example Usage\nconversation = [\n    \"Fancy chatting for a bit?\",\n    \"Heidi: Hey Hugo! I just wanted to let you know I have to organize a community event 18 days later from 1 p.m. until 2 hours after that.\",\n    \"Hugo: Oh, that sounds like a big undertaking, Heidi! What kind of event are you planning?\",\n    \"Heidi: It's for the local ski club, mostly a fun day on the slopes with some apr\u00e8s-ski activities. It'll be nice to get everyone together.\",\n    \"Hugo: That\u2019s really cool of you. It's great that you're so involved with the ski club, especially with how demanding your training schedule must be.\",\n    \"Heidi: It"
"```json\n[\n  {\n    \"work\": \"preparing a meal\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"preparing a meal\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": null\n  },\n  {\n    \"work\": \"performing at The Blue Note\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2022-01-24\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-01-30\",\n      \"2023-01-31\",\n      \"2023-02-01\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2023-01-31\",\n      \"2023-02-01\",\n      \"2023-02-02\",\n      \"2023-02-03\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2023-01-27\",\n      \"2023-01-30\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-03-01\",\n      \"2024-03-07\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-01-30\",\n      \"2024-02-03\",\n      \"2024-02-03\",\n      \"2024-02-03\",\n      \"2024-02-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2023-02-06\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  },\n  {\n    \"work\": \"making larger pieces\",\n    \"days\": [\n      \"2023-02-13\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"sharpening tools\",\n    \"days\": [\n      \"2023-02-06\",\n      \"2023-02-07\",\n      \"2023-02-08\",\n      \"2023-02-09\",\n      \"2023-02-10\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"work out a new design for the seating\",\n    \"days\": [\n      \"2023-02-10\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"experimenting with new technique with layering glass\",\n    \"days\": [\n      \"2023-02-10\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-01-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"finish the '57 Chevy Bel Air\",\n    \"days\": [\n      \"2023-04-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"get accepted into a gallery showing in Prague\",\n    \"days\": [\n      \"2023-03-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze customer feedback\",\n    \"days\": [\n      \"2023-01-30\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-01-26\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-01-30\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Identifies a work-related task and extracts its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"update the company website\"\n    \n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract temporal expressions and convert them to absolute dates\n    dates = []\n    hours = (8, 10)\n\n    # Yesterday\n    yesterday_date = date_obj - timedelta(days=1)\n    dates.append(yesterday_date.strftime(\"%Y-%m-%d\"))\n   \n    # Tomorrow\n    tomorrow_date = date_obj + timedelta(days=1)\n    dates.append(tomorrow_date.strftime(\"%Y-%m-%d\"))\n\n    # Two days ago\n    two_days_ago_date = date_obj - timedelta(days=2)\n    dates.append(two_days_ago_date.strftime(\"%Y-%m-%d\"))\n    \n    # Three days ago\n    three_days_ago_date = date_obj - timedelta(days=3)\n    dates.append(three_days_ago_date.strftime(\"%Y-%m-%d\"))\n\n    # Starting in two days for three consecutive days\n    start_date = date_obj + timedelta(days=2)\n    for i in range(3):\n        dates.append((start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n\n    # Today\n    today_date = date_obj\n    dates.append(today_date.strftime(\"%Y-%m-%d\"))\n\n    task_info = {\n        \"work\": task,\n        \"days\": dates,\n        \"hours\": hours\n    }\n    task_details.append(task_info)\n\n    return task"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2023-02-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_description = \"submit a project proposal\"\n    results = []\n\n    for line in conversation:\n        if task_description in line:\n            # Extract temporal information\n            if \"sixteen days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=16)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                \n                if \"11 in the morning until 4 in the afternoon\" in line:\n                    start_hour = 11\n                    end_hour = 16\n                    results.append({\n                        \"work\": task_description,\n                        \"days\": [date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n            \n            if \"soon\" in line:\n                # Assuming \"soon\" means within the next week, we add 7 days\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                results.append({\n                    \"work\": task_description,\n                    \"days\": [date_str],\n                    \"hours\": (0, 23)  # Assuming full day if time not specified\n                })\n\n    return results\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_task_and_time(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task and its temporal details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    results = []\n    work_task = \"update a work log\"\n    days = []\n    hours = (16, 18)\n    offset_days = 9\n    consecutive_days = 3\n\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    start_date += timedelta(days=offset_days)\n\n    for i in range(consecutive_days):\n        current_date = start_date + timedelta(days=i)\n        days.append(current_date.strftime(\"%Y-%m-%d\"))\n\n    results.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return results\n```\n"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2023-02-14\",\n      \"2023-02-15\",\n      \"2023-02-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2023-02-11\",\n      \"2023-02-12\",\n      \"2023-02-13\",\n      \"2023-02-14\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    task_keywords = [\"track daily expenses\", \"tracking daily expenses\", \"custom commission\"]\n\n    for line in conversation:\n        for keyword in task_keywords:\n            if keyword in line.lower():\n                if \"11 days later\" in line.lower():\n                    date_11 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=11)\n                    date_str_11 = date_11.strftime(\"%Y-%m-%d\")\n                    hours_start = 7\n                    hours_end = 7 + 4\n                    tasks.append({\n                        \"work\": \"track daily expenses\",\n                        \"days\": [date_str_11],\n                        \"hours\": (hours_start, hours_end)\n                    })\n                if \"14 days later\" in line.lower():\n                    date_14 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=14)\n                    date_str_14 = date_14.strftime(\"%Y-%m-%d\")\n                    hours_start = 7\n                    hours_end = 7 + 4\n                    tasks.append({\n                        \"work\": \"track daily expenses\",\n                        \"days\": [date_str_14],\n                        \"hours\": (hours_start, hours_end)\n                    })\n                if \"custom commission\" in line.lower():\n                    tasks.append({\n                        \"work\": \"custom commission\",\n                        \"days\": [],\n                        \"hours\": (0, 24)\n                    })\n                break  #"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-05\",\n      \"2024-03-14\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-02-07\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-02-10\",\n      \"2023-02-10\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Writing a performance review\",\n    \"days\": [\n      \"2023-02-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"Creating a glass sculpture for a hotel lobby\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-02-12\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-02-18\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"deliver a training session\" in line and \"10 days later\" in line and \"3 in the afternoon\" in line:\n            try:\n                # Parse the conversation date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n                # Calculate the date 10 days from the conversation date\n                task_date = date_obj + timedelta(days=10)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract hours\n                start_hour = 15  # 3 PM in 24-hour format\n                end_hour = start_hour + 2\n\n                tasks.append({\n                    \"work\": \"deliver a training session\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                print(\"Error parsing date.\")\n                return []\n\n    return tasks\n```\n\n```\n[\n    {\n        \"work\": \"deliver a training session\",\n        \"days\": [\n            \"2024-01-11\"\n        ],\n        \"hours\": (\n            15,\n            17\n        )\n    }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"prepare a financial report\" in line:\n            try:\n                parts = line.split(\"sixteen days later\")\n                if len(parts) > 1:\n                    date_str = parts[1].strip()\n                    # Extract time information\n                    start_time_str = \"\"\n                    end_time_str = \"\"\n                    if \"starting from 11 in the morning\" in date_str:\n                        start_time_str = \"11:00\"\n                        end_time_str = \"15:00\"\n                    elif \"starting at 11 a.m.\" in date_str:\n                        start_time_str = \"11:00\"\n                        end_time_str = \"15:00\"\n                    \n                    if start_time_str and end_time_str:\n                        # Calculate the date\n                        date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=16)\n                        date = date_obj.strftime(\"%Y-%m-%d\")\n                        \n                        tasks.append({\n                            \"work\": \"prepare a financial report\",\n                            \"days\": [date],\n                            \"hours\": (int(start_time_str.split(\":\")[0]), int(end_time_str.split(\":\")[0]))\n                        })\n            except Exception as e:\n                print(f\"Error processing line: {line}. Error: {e}\")\n\n    return tasks\n\n# Example usage\nconversation = [\n    \"INPUT: What\u2019s been occupying your time?\",\n    \"Leah: Alejandro, it feels like things have been quite hectic lately! I have to prepare a financial report sixteen days later, starting from 11 in the morning for four hours.\",\n    "
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-09-06\",\n      \"2023-09-07\",\n      \"2023-09-08\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2023-09-07\",\n      \"2023-09-08\",\n      \"2023-09-09\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"app development (Arabic learning app)\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"book drive organization\",\n    \"days\": [\n      \"2024-05-06\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2023-09-02\",\n      \"2023-09-05\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-08-31\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting a legal memorandum\",\n    \"days\": [\n      \"2023-09-07\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a financial report\",\n    \"days\": [\n      \"2023-09-04\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"building an app to help kids learn basic math skills\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2023-08-29\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, days, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each containing 'work', 'days', and 'hours' keys.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details = []\n\n    for line in conversation:\n        if \"design a product prototype\" in line or \"product prototype\" in line:\n            task = \"Design product prototype\"\n            \n            # Extract temporal information\n            days_ago = None\n            try:\n                days_ago = int(line.split(\" \")[-3])\n            except ValueError:\n                pass\n            \n            if days_ago is not None:\n                task_date = conversation_date - timedelta(days=days_ago)\n                days = [task_date.strftime(\"%Y-%m-%d\")]\n            else:\n                days = []\n            \n            start_time_str = None\n            end_time_str = None\n            \n            if \"11 a.m.\" in line:\n                start_time = datetime.strptime(\"11:00\", \"%H:%M\").time()\n                end_time = start_time + timedelta(hours=2)\n                hours = (start_time.hour, end_time.hour)\n            else:\n                hours = None\n\n            if task and days and hours:\n                task_details.append({\n                    \"work\": task,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n                \n    return task_details\n```\n\n```\n[\n    {\n        \"work\": \"Design product prototype\",\n        \"days\": [\n            \"2024-01-08\"\n        ],\n        \"hours\": (\n            11,\n            "
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-09-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"volunteering teaching a coding workshop\",\n    \"days\": [\n      \"2023-09-23\",\n      \"2023-09-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2023-09-02\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event (coding workshop for kids)\",\n    \"days\": [\n      \"2023-08-28\"\n    ],\n    \"hours\": [\n      13,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-08-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2023-09-17\",\n      \"2023-09-18\",\n      \"2023-09-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"work on lavender sauce\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    task = \"review daily feedback\"\n    days_offset = 14\n    duration = 4\n    start_time_str = \"4 p.m.\"\n    duration_hours = 3\n\n    try:\n        conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n        start_date = conversation_date_obj + timedelta(days=days_offset)\n        dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration)]\n\n        start_hour = int(start_time_str.split(\" \")[0])\n        if \"p.m.\" in start_time_str:\n            start_hour += 12\n        hours = (start_hour, start_hour + duration_hours)\n\n        task_details.append({\n            \"work\": task,\n            \"days\": dates,\n            \"hours\": hours\n        })\n\n    except ValueError:\n        return []\n\n    return task_details\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation (YYYY-MM-DD).\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"routine communications\" in line.lower():\n            task = \"Check routine communications\"\n            try:\n                # Extract the offset in days\n                offset_days = int(\"\".join(filter(str.isdigit, line.lower().split(\"days later\")[0])))\n\n                # Calculate the date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                date = date_obj.strftime(\"%Y-%m-%d\")\n\n                # Extract hours\n                hours_str = \"noon until four hours after that\"\n                start_hour = 12\n                end_hour = 16\n\n                tasks.append({\n                    \"work\": task,\n                    \"days\": [date],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass\n\n    return tasks\n\n# Example Usage\nconversation = [\n    \"Leah: I hope everything is well.\",\n    \"Malik: Hey Leah! Things are good, just been keeping busy. I had to check routine communications eight days later and then again sixteen days later, both times from noon until four hours after that. It feels like it\u2019s been a whirlwind!\",\n    \"Leah: Oh, that sounds\u2026 thorough! I\u2019ve been experimenting with a new shade of cobalt blue, trying to get just the right translucence. It's proving to be quite a challenge.\",\n    \"Malik: That sounds beautiful! I bet it's mesmerizing to watch you work with glass. With the routine communications, it felt good to just"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2023-09-18\",\n      \"2023-09-20\",\n      \"2023-09-22\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Water the office plants\",\n    \"days\": [\n      \"2023-09-16\",\n      \"2023-09-23\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2023-09-14\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"app project\",\n    \"days\": [\n      \"2023-09-12\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2023-09-23\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Finalize a presentation\",\n    \"days\": [\n      \"2023-09-16\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"preparing for our annual book fair\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"organizing the book displays\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"teaching coding\",\n    \"days\": [\n      \"2023-09-21\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-09-20\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2023-09-17\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"work on a new app idea (coding)\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"finishing up some lesson plans\",\n    \"days\": [\n      \"2023-09-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-09-15\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format. \n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"compile a research summary\" in line:\n            try:\n                parts = line.split(\"from\")\n                hours_part = parts[1].strip()\n                time_range = hours_part.split(\"for\")[0].strip()\n\n                start_hour = int(time_range.split(\" \")[0])\n                end_hour = start_hour + 2\n\n                offset_days = 16\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"compile a research summary\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass  # Ignore lines that don't match the expected format\n                \n    return tasks\n\nconversation = [\n    \"How\u2019s life been?\",\n    \"Malik: Hey Henry, life\u2019s been busy! I\u2019ve been trying to keep up with a lot recently, including needing to compile a research summary 16 days later, from 8 in the morning for two hours.\",\n    \"Henry: That sounds intense, Malik! I've been elbow-deep in a '67 Mustang restoration \u2013 the bodywork is always the biggest challenge, you know?\",\n    \"Malik: Oh wow, a '67 Mustang, that\u2019s classic! It must be very rewarding. I imagine it takes a lot of concentration and patience to do that kind of work.\",\n    "
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\",\n      \"2024-02-06\",\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\",\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2021-02-11\",\n      \"2021-02-12\",\n      \"2021-02-13\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2021-02-13\",\n      \"2021-02-19\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  },\n  {\n    \"work\": \"children's story hour\",\n    \"days\": [\n      \"2021-03-03\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2021-02-14\",\n      \"2021-02-17\",\n      \"2021-02-18\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2021-02-11\",\n      \"2021-02-15\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"preparing a workshop agenda\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"wrapping up lesson plans\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"introducing a gardening project\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      15\n    )\n  },\n  {\n    \"work\": \"making kimchi\",\n    \"days\": [\n      \"2024-02-03\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"finding new Spanish poetry\",\n    \"days\": [\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\",\n      \"2024-02-06\",\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"trying the new painting technique\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2021-02-20\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"planning a reading festival\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating a training manual\",\n    \"days\": [\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2021-02-08\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2021-02-13\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"organizing new arrivals\",\n    \"days\": [\n      \"2021-02-27\"\n    ],\n    \"hours\": (\n      13,\n      17\n    )\n  },\n  {\n    \"work\": \"planning the next author talk\",\n    \"days\": [\n      \"2021-03-01\",\n      \"2021-03-02\",\n      \"2021-03-03\",\n      \"2021-03-04\",\n      \"2021-03-05\",\n      \"2021-03-06\",\n      \"2021-03-07\"\n    ],\n    \"hours\": (\n      10,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-02-17\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2021-02-23\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"conduct a market survey\"\n    start_hour = 11\n    duration = 4\n\n    dates = []\n\n    for line in conversation:\n        if task_description in line:\n            if \"tomorrow\" in line:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            if \"today\" in line:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            if \"in two days\" in line:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            if \"three days ago\" in line:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=3)\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            if \"in three days\" in line:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                dates.append(date_obj.strftime(\"%Y-%m-%d\"))\n            if \"four consecutive days\" in line:\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=3)\n                for i in range(4):\n                    dates.append((date_obj + timedelta(days=i)).strftime(\"%Y-%m-%"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Identifies a work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"monitoring quality control metrics\"\n    start_hour = 15\n    end_hour_offset = 4\n    consecutive_days = 3\n\n    # Calculate the end hour\n    end_hour = start_hour + end_hour_offset\n\n    # Parse the conversation date\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Calculate the dates for the task\n    dates = []\n    for i in range(consecutive_days):\n        current_date = date_obj + timedelta(days=i)\n        dates.append(current_date.strftime(\"%Y-%m-%d\"))\n\n    task_info = {\n        \"work\": work_task,\n        \"days\": dates,\n        \"hours\": (start_hour, end_hour),\n    }\n    task_details.append(task_info)\n\n    return task_details\n```\n"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, and hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"track daily expenses\" in line:\n            task = \"Track daily expenses\"\n            \n            # Extract temporal information\n            if \"6 days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=6)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"yesterday\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"today\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days = [date.strftime(\"%Y-%m-%d\")]\n            elif \"2 days from now\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=2)\n                days = [date.strftime(\"%Y-%m-%d\")]\n            else:\n                days = []\n\n            hours_start = 15  # 3 p.m.\n            hours_end = 17  # 2 hours after 3 p.m.\n\n            tasks.append({\n                \"work\": task,\n                \"days\": days,\n                \"hours\": (hours_start, hours_end)\n            })\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Just checking in.\",\n    \"Carmen: Hey Camila! Just"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2021-03-01\",\n      \"2021-03-02\",\n      \"2021-03-03\",\n      \"2021-03-04\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Analyze daily reports\",\n    \"days\": [\n      \"2021-02-25\",\n      \"2021-02-27\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-15\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-02-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2021-02-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2021-02-26\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2021-02-26\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-07-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2021-03-05\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  },\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-02-10\",\n      \"2024-02-11\",\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Daily briefing on safety protocols and weather updates\",\n    \"days\": [\n      \"2023-05-21\",\n      \"2023-05-22\",\n      \"2023-05-23\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"conduct code reviews\" in line:\n            task = \"conduct code reviews\"\n            days_ago = 21\n            consecutive_days = 4\n            start_hour = 7\n            duration = 4\n\n            dates = []\n            start_date = conversation_date - timedelta(days=days_ago)\n            for i in range(consecutive_days):\n                date = start_date + timedelta(days=i)\n                dates.append(date.strftime(\"%Y-%m-%d\"))\n\n            end_hour = start_hour + duration\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Long time no talk!\",\n    \"Logan: Hey Heidi! It\u2019s been a while. Just wanted to share that I started to conduct code reviews 21 days ago, for 4 consecutive days, from 7 in the morning for four hours.\",\n    \"Heidi: Oh, hey Logan! That sounds\u2026intense. How are things up in Alaska? Still battling the elements?\",\n    \"Logan: You have no idea! But it\u2019s good. The work keeps me busy, and honestly, I actually managed to conduct code reviews again starting 21 days ago, for 4 consecutive days, from 7 in the morning for four hours. It's a bit different from guiding, but it keeps the brain sharp.\",\n    \"Heidi: That's neat! I can imagine"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2023-05-18\",\n      \"2023-05-25\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2023-05-17\",\n      \"2023-05-27\",\n      \"2023-05-28\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2023-05-23\",\n      \"2023-05-26\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Updating the company website\",\n    \"days\": [\n      \"2023-05-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-05-19\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"creating a budget spreadsheet\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"planning expeditions\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"preparing for a concert\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-05-16\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    for line in conversation:\n        if \"prepare a meal\" in line.lower():\n            task = \"Prepare a meal\"\n            \n            # Extract temporal information\n            time_phrase = \"10 days ago\"\n            if time_phrase:\n                try:\n                    date_format = \"%Y-%m-%d\"\n                    conv_date = datetime.strptime(conversation_date, date_format)\n                    days_ago = int(time_phrase.split()[0])\n                    task_date = conv_date - timedelta(days=days_ago)\n                    dates = [task_date.strftime(date_format)]\n                except ValueError:\n                    dates = []\n            else:\n                dates = []\n\n            start_hour = 7\n            end_hour = 9\n\n            task_details.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-05-15\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"designing a new collection using handwoven fabrics\",\n    \"days\": [],\n    \"hours\": (0, 0)\n  },\n  {\n    \"work\": \"map out a new kayaking route\",\n    \"days\": [\n      \"2023-05-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"developing a marketing strategy\",\n    \"days\": [\n      \"2024-06-04\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"prepping for a new kayaking expedition\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-05-16\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  },\n  {\n    \"work\": \"planning routes for bird watchers\",\n    \"days\": [\n      \"2023-05-24\",\n      \"2023-05-25\",\n      \"2023-05-26\",\n      \"2023-05-27\",\n      \"2023-05-28\",\n      \"2023-05-29\",\n      \"2023-05-30\",\n      \"2023-05-31\"\n    ],\n    \"hours\": [\n      9,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2023-05-17\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2023-05-30\",\n      \"2023-05-31\",\n      \"2023-06-01\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a performance log\",\n    \"days\": [\n      \"2023-06-01\",\n      \"2023-06-02\",\n      \"2023-06-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-07-16\",\n      \"2024-07-17\",\n      \"2024-07-18\",\n      \"2024-07-19\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine maintenance\",\n    \"days\": [\n      \"2023-05-31\",\n      \"2023-06-08\",\n      \"2023-06-08\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-05\",\n      \"2024-03-08\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"give a lecture on the Peloponnesian War\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing operational data\",\n    \"days\": [\n      \"2023-05-29\",\n      \"2023-06-09\"\n    ],\n    \"hours\": [\n      14,\n      16\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2023-06-07\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"design a product prototype\" in line:\n            task_details = {}\n            task_details[\"work\"] = \"Design a product prototype\"\n\n            # Extract dates\n            if \"seven days ago\" in line:\n                date = conversation_date - timedelta(days=7)\n                task_details[\"days\"] = [date.strftime(\"%Y-%m-%d\")]\n            elif \"a week ago\" in line:\n                date = conversation_date - timedelta(days=7)\n                task_details[\"days\"] = [date.strftime(\"%Y-%m-%d\")]\n            else:\n                task_details[\"days\"] = []\n\n            # Extract hours\n            if \"7 a.m. until 10 a.m.\" in line:\n                task_details[\"hours\"] = (7, 10)\n            elif \"7 in the morning for three hours\" in line:\n                task_details[\"hours\"] = (7, 10)\n            elif \"7 a.m.\" in line and \"three hours\" in line:\n                task_details[\"hours\"] = (7, 10)\n            else:\n                task_details[\"hours\"] = None\n\n            tasks.append(task_details)\n\n    return tasks\n```\n```\n[\n    {\n        \"work\": \"Design a product prototype\",\n        \"days\": [\n            \"2023-05-31\"\n        ],\n        \"hours\": (\n            7,\n            10\n        )\n    },\n    {\n        \"work\": \"Design a product prototype\",\n        \"days\": [\n            \"2"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2023-06-07\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-06-08\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2023-05-29\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-06-06\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  },\n  {\n    \"work\": \"building a currach\",\n    \"days\": [\n      \"2023-06-08\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"launching a currach\",\n    \"days\": [\n      \"2023-09-01\",\n      \"2023-11-30\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2023-06-11\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\"2023-05-29\"],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2023-04-17\",\n      \"2023-04-18\",\n      \"2023-04-19\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2023-04-13\",\n      \"2023-04-14\",\n      \"2023-04-15\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2023-04-15\",\n      \"2023-04-16\"\n    ],\n    \"hours\": (9, 12)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with work task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"daily huddle\" in line:\n            task = \"attend daily huddle\"\n            \n            if \"19 days ago\" in line:\n                date_str = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=19)).strftime(\"%Y-%m-%d\")\n                tasks.append({\"work\": task, \"days\": [date_str], \"hours\": (13, 15)})\n            if \"14 days ago\" in line:\n                date_str = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=14)).strftime(\"%Y-%m-%d\")\n                tasks.append({\"work\": task, \"days\": [date_str], \"hours\": (13, 15)})\n            if \"13 days ago\" in line:\n                date_str = (datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=13)).strftime(\"%Y-%m-%d\")\n                tasks.append({\"work\": task, \"days\": [date_str], \"hours\": (13, 15)})\n            if \"tomorrow\" in line:\n                date_str = (datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n                tasks.append({\"work\": task, \"days\": [date_str], \"hours\": (13, 15)})\n\n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"How are things treating you?\",\n    \"Liam: Hey Joel, things are keeping me busy! I've had to attend a daily huddle 19 days ago, then again"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"daily summary\" in line.lower():\n            if \"five days ago\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=5)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours = (11, 13)\n                tasks.append({\n                    \"work\": \"prepare daily summary\",\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n            if \"two days later\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=5) + timedelta(days=2)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                hours = (11, 13)\n                tasks.append({\n                    \"work\": \"prepare daily summary\",\n                    \"days\": [date_str],\n                    \"hours\": hours\n                })\n            if \"next week\" in line.lower():\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                # No specific hours mentioned for next week's task\n    return tasks\n```\n\n```\n[\n    {\n        'work': 'prepare daily summary',\n        'days': ['2024-01-21'],\n        'hours': (11, 13)\n    },\n    {\n        'work': 'prepare daily summary',\n        'days': ['2024-01-23'],\n        'hours': (11, 13)\n    }\n]"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2023-04-16\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2023-04-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2023-04-09\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-04-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2023-04-22\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2023-04-13\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"volunteer at a coding workshop\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-04-09\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-04-25\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2023-04-11\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"perform at a small festival\",\n    \"days\": [\n      \"2023-05-06\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2023-04-24\",\n      \"2023-04-25\",\n      \"2023-04-26\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2023-04-19\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2023-04-15\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-02-27\",\n      \"2024-02-28\",\n      \"2024-03-01\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-04-24\",\n      \"2023-04-25\",\n      \"2023-04-26\",\n      \"2023-04-27\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2023-04-23\",\n      \"2023-04-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitoring team activity\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-17\",\n      \"2024-02-22\"\n    ],\n    \"hours\": (13, 16)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2023-05-01\",\n      \"2023-05-02\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  },\n  {\n    \"work\": \"sketching out ideas related to sustainable energy\",\n    \"days\": [\n      \"2023-04-24\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2023-04-29\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Finalizing a business plan\",\n    \"days\": [\n      \"2023-05-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"Level design for VR project\",\n    \"days\": [\n      \"2023-04-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2023-04-29\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2023-04-26\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview\",\n    \"days\": [\n      \"2023-04-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"Explore a new Python library\",\n    \"days\": [\n      \"2023-05-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2023-04-24\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-04-27\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2023-04-28\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2022-09-15\",\n      \"2022-09-16\",\n      \"2022-09-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    # Identify the work task\n    work_task = \"update the maintenance log\"\n\n    # Extract temporal details\n    days_ago_list = [19, 13]\n    hours = (13, 15)\n\n    for days_ago in days_ago_list:\n        task_date = conversation_date - timedelta(days=days_ago)\n        tasks.append({\n            \"work\": work_task,\n            \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n            \"hours\": hours\n        })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-28\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2022-09-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\n      \"2022-09-09\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-09-21\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2022-09-10\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  },\n  {\n    \"work\": \"live stream of practice session\",\n    \"days\": [\n      \"2022-09-19\",\n      \"2022-09-20\",\n      \"2022-09-21\",\n      \"2022-09-22\",\n      \"2022-09-23\",\n      \"2022-09-24\",\n      \"2022-09-25\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"playing a small gig\",\n    \"days\": [\n      \"2022-09-15\"\n    ],\n    \"hours\": [\n      18,\n      24\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details (work, days, hours).\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"draft an email to stakeholders\" in line:\n            try:\n                parts = line.split()\n                days_ago = int(parts[parts.index(\"days\") - 1])\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                start_hour = int(parts[parts.index(\"from\") + 1].split()[0])\n                end_hour = start_hour + 2\n                tasks.append({\n                    \"work\": \"draft an email to stakeholders\",\n                    \"days\": [date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass\n        if \"final testing and bug fixes\" in line or \"testing and bug fixes\" in line:\n             tasks.append({\n                    \"work\": \"final testing and bug fixes\",\n                    \"days\": [],\n                    \"hours\": (0, 24)\n                })\n\n    return tasks\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n\n    Returns:\n        list: A list of dictionaries, each containing task details (work, days, hours).\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    conversation_date = datetime(2022, 9, 16)  # From the last line of the input\n\n    for line in conversation:\n        if \"create a budget spreadsheet\" in line:\n            try:\n                parts = line.split(\"from\")\n                time_part = parts[1].strip()\n                start_time_str = time_part.split(\"for\")[0].strip()\n                duration_str = time_part.split(\"for\")[1].strip()\n                \n                start_hour = int(start_time_str.split(\" \")[0])\n                duration = int(duration_str.split(\" \")[0])\n                end_hour = start_hour + duration\n\n                days_ago = 4\n                task_date = conversation_date - timedelta(days=days_ago)\n\n                task_details.append({\n                    \"work\": \"create a budget spreadsheet\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass  # Handle potential parsing errors\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2022-09-18\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, where each dictionary represents a work task\n              and contains the keys 'work', 'days', and 'hours'.  Returns an empty list\n              if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"checking routine communications\" in line:\n            task_description = \"checking routine communications\"\n            start_time_str = \"7 in the morning\"\n            duration_str = \"4 hours\"\n\n            start_hour = 7\n            end_hour = start_hour + 4\n\n            days = []\n            if \"two days ago\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days.append((date - timedelta(days=2)).strftime(\"%Y-%m-%d\"))\n            if \"today\" in line:\n                days.append(conversation_date)\n            if \"tomorrow\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                days.append((date + timedelta(days=1)).strftime(\"%Y-%m-%d\"))\n            if \"three consecutive days\" in line:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                for i in range(3):\n                    days.append((date + timedelta(days=i)).strftime(\"%Y-%m-%d\"))\n\n            tasks.append({\n                \"work\": task_description,\n                \"days\": days,\n                \"hours\": (start_hour, end_hour)\n            })\n    return tasks\n```\n```\n[\n    {\n        \"work\": \"checking routine communications\",\n        \"days\": [\n            \"2024-0"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"midday walk as part of training regimen\",\n    \"days\": [\n      \"2022-09-29\",\n      \"2022-09-30\",\n      \"2022-10-01\",\n      \"2022-10-02\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"check inventory levels\" in line:\n            # Extract temporal information\n            try:\n                days_later1 = int(line.split(\"four days later\")[0].split()[-1])\n                days_later2 = int(line.split(\"nine days later\")[0].split()[-1])\n\n                date1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_later1)\n                date2 = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=days_later2)\n                date1_str = date1.strftime(\"%Y-%m-%d\")\n                date2_str = date2.strftime(\"%Y-%m-%d\")\n                \n                hours = (12, 14)  # Noon until two hours after that\n                \n                tasks.append({\n                    \"work\": \"Check inventory levels\",\n                    \"days\": [date1_str, date2_str],\n                    \"hours\": hours\n                })\n            except:\n                pass\n        if \"regional qualifiers are starting next week\" in line:\n            try:\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(weeks=1)\n                date_str = date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": \"Participate in regional qualifiers\",\n                    \"days\": [date_str],\n                    \"hours\": (0, 23)  # Assuming the entire day\n                })\n            except:\n                pass\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"How are things"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-22\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"delivery of new oak\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"managing a support ticket queue\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-03-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2022-09-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"practicing and scrims for the next tournament\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"new program to support young mothers (workshops and childcare resources)\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"preparing for a wine tasting event\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-02-27\",\n      \"2024-02-26\",\n      \"2024-03-04\",\n      \"2024-03-05\",\n      \"2024-03-01\",\n      \"2024-02-25\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2022-10-04\",\n      \"2022-10-04\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"expense report\" in line.lower():\n            try:\n                # Extract temporal information\n                time_info = line.lower().split(\"from \")[1]\n                start_time_str = time_info.split(\" \")[0]\n                start_hour = int(start_time_str.split(\" \")[0])\n\n                duration_str = time_info.split(\"until \")[1].split(\" hour\")[0]\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n\n                # Calculate date\n                offset_days = 15\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"complete an expense report\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass # No need to report exceptions as per the instructions, just continue\n\n        if \"tournament\" in line.lower():\n            try:\n                 tasks.append({\n                    \"work\": \"training for a tournament\",\n                    \"days\": [conversation_date],\n                    \"hours\": (0, 24)\n                })\n            except:\n                pass # No need to report exceptions as per the instructions, just continue\n\n    return tasks\n\n# Example Usage:\nconversation = [\n    \"INPUT: What's been occupying your time?\",\n    \"Jayden: Hey Joel! So, I had to complete an expense report fifteen days later, from 1 p"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2022-09-23\",\n      \"2022-09-24\",\n      \"2022-09-25\",\n      \"2022-09-26\",\n      \"2022-09-27\"\n    ],\n    \"hours\": (9, 12)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2022-09-22\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2020-07-14\",\n      \"2020-07-15\",\n      \"2020-07-16\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily summary\",\n    \"days\": [\n      \"2020-07-11\",\n      \"2020-07-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-13\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"start editing the documentary\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"starting a new collection based on the embroidery techniques\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing details of a work task.\n    \"\"\"\n\n    tasks = []\n    watering_plants_days = []\n    watering_plants_hours = (15, 19)  # 3 p.m. to 7 p.m.\n\n    # Parse the conversation date\n    conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    for line in conversation:\n        if \"water the office plants\" in line:\n            if \"eleven days ago\" in line:\n                date = conversation_datetime - timedelta(days=11)\n                watering_plants_days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"eight days ago\" in line:\n                date = conversation_datetime - timedelta(days=8)\n                watering_plants_days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line:\n                date = conversation_datetime - timedelta(days=1)\n                watering_plants_days.append(date.strftime(\"%Y-%m-%d\"))\n                \n    if watering_plants_days:\n        tasks.append({\n            \"work\": \"Watering office plants\",\n            \"days\": watering_plants_days,\n            \"hours\": watering_plants_hours\n        })\n\n    return tasks\n\n\n# Example usage (assuming the conversation date is 2024-01-04)\nconversation = [\n    \"Anything new with you?\",\n    \"Ananya: Hey Malik! So much has been going on. I had to water the office plants eleven days ago and then again eight days ago, both times from 3 p.m. until four hours after that. It was a really calming break, actually, amidst all the design work.\",\n    \"Malik: That sounds\u2026 peaceful, honestly. I\u2019m currently trying to debug some really frustrating code \u2013 nothing calming"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    \n    for line in conversation:\n        if \"product demo\" in line.lower():\n            task = \"product demo\"\n            try:\n                date_str = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=9)\n                date = date_str.strftime(\"%Y-%m-%d\")\n            except ValueError:\n                date = None\n            \n            start_hour = 15\n            end_hour = 18\n            tasks.append({\"work\": task, \"days\": [date], \"hours\": (start_hour, end_hour)})\n\n        if \"prepping for a reading\" in line.lower() or \"reading next week\" in line.lower():\n            task = \"reading prep/performance\"\n            try:\n                 date_str = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=7)\n                 date = date_str.strftime(\"%Y-%m-%d\")\n            except ValueError:\n                date = None\n            \n            #Assuming the reading takes place during standard business hours\n            start_hour = 9\n            end_hour = 17\n            tasks.append({\"work\": task, \"days\": [date], \"hours\": (start_hour, end_hour)})\n            \n        if \"working on sketches\" in line.lower() or \"incorporate more recycled materials\" in line.lower():\n             task = \"sketching/designing\"\n             # Assuming sketching/designing is ongoing\n             start_hour = 9\n             end_hour = 17\n             tasks.append({\"work\": task, \"days\": [conversation_date"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2020-07-07\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"participate in a small exhibit showcasing sustainable designers\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyzing customer feedback\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-12\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2020-07-05\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"designing a new collection\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"finishing a marble bust\",\n    \"days\": [\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\",\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"completing an expense report\",\n    \"days\": [\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"sketching new ideas for a collection\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2020-07-17\"\n    ],\n    \"hours\": (\n      14,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project progress\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2020-07-20\",\n      \"2020-07-21\",\n      \"2020-07-22\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-07-28\",\n      \"2020-07-29\",\n      \"2020-07-30\",\n      \"2020-07-31\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-16\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2020-07-18\",\n      \"2020-07-20\",\n      \"2020-07-30\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct a daily safety check\",\n    \"days\": [\n      \"2020-07-23\",\n      \"2020-07-28\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-07-21\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-08\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"prepare a meal\" in line:\n            try:\n                parts = line.split(\"from\")\n                time_part = parts[1].strip()\n                time_info = time_part.split(\"for\")\n                start_time_str = time_info[0].strip()\n                duration_str = time_info[1].strip().split(\"hours\")[0].strip()\n\n                start_hour = int(start_time_str.split(\" \")[0])\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n\n                offset_days = 16\n                task_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"prepare a meal\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except:\n                pass  # Ignore lines that don't match the expected format\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2020-07-29\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"refine a new piece for the oud\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"playing at a small festival\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"working on a new collection inspired by the monsoon season\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"sketching for next collection\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      10,\n      17\n    )\n  },\n  {\n    \"work\": \"sourcing sustainable fabrics\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      10,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-07-24\"\n    ],\n    \"hours\": [\n      16,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2020-07-19\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  },\n  {\n    \"work\": \"designing the autumn collection\",\n    \"days\": [\n      \"2020-07-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-07-18\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-01-26\",\n      \"2024-01-27\",\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"midday walk\",\n    \"days\": [\n      \"2024-01-27\",\n      \"2024-01-28\",\n      \"2024-01-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  },\n  {\n    \"work\": \"ironwork\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"future projects\",\n    \"days\": [\n      \"2024-01-27\",\n      \"2024-01-28\",\n      \"2024-01-29\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-03\",\n      \"2024-02-04\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2024-02-01\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2024-01-25\",\n      \"2024-01-30\",\n      \"2024-02-04\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"a large panel for a local cultural center\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-01-28\",\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"prepping for a boat show\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-01-24\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"rehearsals for a new play\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-01-26\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-01-27\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a gate for a new manor house\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"rewrites on my new play\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2024-02-07\",\n      \"2024-02-08\",\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-02-11\",\n      \"2024-02-12\",\n      \"2024-02-13\",\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-02-22\"):\n    \"\"\"\n    Extracts work task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    task_description = \"review project progress\"\n    start_time = 12\n    end_time = 15\n\n    # Calculate dates\n    date_15_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=15)\n    date_21_days_later = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=21)\n\n    date_15_days_later_str = date_15_days_later.strftime(\"%Y-%m-%d\")\n    date_21_days_later_str = date_21_days_later.strftime(\"%Y-%m-%d\")\n\n    tasks.append({\n        \"work\": task_description,\n        \"days\": [date_15_days_later_str],\n        \"hours\": (start_time, end_time)\n    })\n\n    tasks.append({\n        \"work\": task_description,\n        \"days\": [date_21_days_later_str],\n        \"hours\": (start_time, end_time)\n    })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2024-02-10\",\n      \"2024-02-14\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"designing a gate\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-11\"\n    ],\n    \"hours\": [\n      11,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"producing a quarterly report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"design gate for local estate\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-11\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2024-02-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"starting on a new gate design\",\n    \"days\": [\n      \"2024-02-12\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      14,\n      16\n    )\n  },\n  {\n    \"work\": \"sketch forge designs\",\n    \"days\": [\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-04-05\",\n      \"2024-04-06\",\n      \"2024-04-07\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-13\",\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-04-05\",\n      \"2024-04-06\",\n      \"2024-04-07\",\n      \"2024-04-08\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-15\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"managing a support ticket queue\",\n    \"days\": [\n      \"2024-04-09\",\n      \"2024-04-11\",\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2024-04-12\",\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-04-08\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"practicing for a gig\",\n    \"days\": [\n      \"2024-04-27\",\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a presentation\",\n    \"days\": [\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2024-04-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"practice hours\",\n    \"days\": [\n      \"2024-04-15\",\n      \"2024-04-16\",\n      \"2024-04-17\",\n      \"2024-04-18\",\n      \"2024-04-19\",\n      \"2024-04-20\",\n      \"2024-04-21\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"collect more samples\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-04-05\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"write something for the club anniversary\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing a budget proposal\",\n    \"days\": [\n      \"2024-04-14\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  },\n  {\n    \"work\": \"performing at The Blue Note\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-04-04\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"songwriting\",\n    \"days\": [\n      \"2024-04-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\"2024-01-13\"],\n    \"hours\": (12, 16)\n  },\n  {\n    \"work\": \"perform at The Blue Note\",\n    \"days\": [\"2024-01-25\"],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-04-07\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"gig at The Blue Note\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"working on a new interpretation of \\\"Summertime\\\"\",\n    \"days\": [\n      \"2024-04-15\"\n    ],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-04-17\",\n      \"2024-04-18\",\n      \"2024-04-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-25\",\n      \"2024-04-26\",\n      \"2024-04-27\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-16\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-04-19\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2024-04-18\",\n      \"2024-04-19\",\n      \"2024-04-20\",\n      \"2024-04-21\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"set at The Blue Note\",\n    \"days\": [\n      \"2024-05-07\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-04-19\",\n      \"2024-04-28\"\n    ],\n    \"hours\": [\n      7,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2024-04-17\",\n      \"2024-04-22\",\n      \"2024-04-29\",\n      \"2024-04-22\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine maintenance\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-01-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"sketching out a few ideas for new songs\",\n    \"days\": [\n      \"2024-02-01\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-04-29\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a research summary\",\n    \"days\": [\n      \"2024-04-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"finalizing the menu\",\n    \"days\": [\n      \"2024-05-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  },\n  {\n    \"work\": \"training\",\n    \"days\": [\n      \"2024-04-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2024-04-24\"\n    ],\n    \"hours\": [\n      10,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2021-06-01\",\n      \"2021-06-02\",\n      \"2021-06-03\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-04\",\n      \"2021-06-05\",\n      \"2021-06-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-05\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2021-06-06\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine testing\",\n    \"days\": [\n      \"2024-07-12\",\n      \"2024-07-13\",\n      \"2024-07-14\",\n      \"2024-07-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2021-05-25\",\n      \"2021-05-27\",\n      \"2021-06-02\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"designing the next boat\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"working on a new collection\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2021-05-27\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a contract\",\n    \"days\": [\n      \"2021-06-07\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"sketching designs for a new community project\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      12,\n      17\n    )\n  },\n  {\n    \"work\": \"starting on a small currach\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze sales data\",\n    \"days\": [\n      \"2021-05-30\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  },\n  {\n    \"work\": \"restoring an old boat\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2021-06-05\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"making a new varnish for the boats\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"sketching out a design for a new currach\",\n    \"days\": [\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"rebuilding a small rowing skiff\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2021-06-05\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2021-05-26\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"building a small currach for a local fisherman\",\n    \"days\": [\n      \"2021-06-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"finish manga chapter\",\n    \"days\": [\n      \"2021-06-20\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2021-06-18\",\n      \"2021-06-19\",\n      \"2021-06-20\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"midday walk\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"boat building\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"securing funding for a new community center\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2021-06-18\",\n      \"2021-06-19\",\n      \"2021-06-20\",\n      \"2021-06-21\"\n    ],\n    \"hours\": [\n      10,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Read a technical article\",\n    \"days\": [\n      \"2021-06-15\",\n      \"2021-06-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a daily checklist\",\n    \"days\": [\n      \"2021-06-14\",\n      \"2021-06-21\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-03-11\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compiling a weekly summary\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      10,\n      12\n    )\n  },\n  {\n    \"work\": \"repair a rowing skiff\",\n    \"days\": [\n      \"2021-06-14\"\n    ],\n    \"hours\": (\n      18,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2021-06-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Write a technical blog post\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  },\n  {\n    \"work\": \"Starting a new commission, a small rowing boat\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2021-06-09\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"checking system alerts\",\n    \"days\": [\n      \"2023-07-25\",\n      \"2023-07-26\",\n      \"2023-07-27\"\n    ],\n    \"hours\": (16, 18)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-07-03\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.  Empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    \n    for line in conversation:\n        if \"safety check\" in line.lower() and \"started\" in line.lower():\n            task = \"Conduct daily safety check\"\n            days_ago = int(line.lower().split(\"started \")[1].split(\" days\")[0])\n            consecutive_days = int(line.lower().split(\"for \")[1].split(\" consecutive\")[0])\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=days_ago)\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n            hours_str = line.lower().split(\"from \")[1].split(\" in the morning\")[0]\n            hours = int(hours_str)\n            end_hours = hours + 3\n            hours_tuple = (hours, end_hours)\n            \n            task_details.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": hours_tuple\n            })\n            \n    return task_details\n\n# Example usage with the provided input:\nconversation = [\n    \"Makayla: What\u2019s been keeping you busy lately?\",\n    \"Malik: Not too much, just trying to stay cool with this heat! Been tinkering with a new app design, actually. What about you? Training going well?\",\n    \"Makayla: It is, thanks! Though I\u2019ve also been busy with something else. I had to conduct a daily safety check, and it started 21 days ago for 3 consecutive days, from 8 in the morning for three hours each day.\",\n    \"Malik: Oh, that sounds"
"```json\n[\n  {\n    \"work\": \"take a midday walk\",\n    \"days\": [\n      \"2023-08-03\",\n      \"2023-08-04\",\n      \"2023-08-05\",\n      \"2023-08-06\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the project dashboard\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"record daily observations\" in line:\n            task = \"record daily observations\"\n            hours = (7, 9)  # 7:00 AM to 9:00 AM (2 hours)\n\n            days = []\n            if \"17 days ago\" in line:\n                date = conversation_date - timedelta(days=17)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"9 days ago\" in line:\n                date = conversation_date - timedelta(days=9)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"8 days ago\" in line:\n                date = conversation_date - timedelta(days=8)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            \n            tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n    return tasks\n```\n\n```\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2024-02-12\",\n      \"2024-02-20\",\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2023-08-04\",\n      \"2023-08-06\",\n      \"2023-08-06\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2023-07-30\"\n    ],\n    \"hours\": [\n      17,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2023-07-31\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"update a project report\" in line:\n            try:\n                # Extract the time information and calculate the absolute date\n                offset_days = 5\n                report_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n                report_date_str = report_date.strftime(\"%Y-%m-%d\")\n                start_hour = 16  # 4 p.m.\n                end_hour = start_hour + 2\n\n                tasks.append({\n                    \"work\": \"update a project report\",\n                    \"days\": [report_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle potential date parsing errors\n\n        if \"training camp\" in line and \"next month\" in line:\n            try:\n                #calculate the date for next month\n                current_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                next_month = current_date.month + 1\n                next_year = current_date.year\n                if next_month > 12:\n                    next_month = 1\n                    next_year += 1\n\n                training_camp_date = datetime(next_year, next_month, 1)\n                training_camp_date_str = training_camp_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"training camp\",\n                    \"days\": [training_camp_date_str],\n                    \"hours\": (0, 24) #Assume all day\n                })\n            except ValueError:\n                pass\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2023-07-29\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"perfect new dishes at the restaurant\",\n    \"days\": [\n      \"2023-08-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"training schedule\",\n    \"days\": [\n      \"2023-08-11\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-01-12\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"restoring original beams\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2023-08-05\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"gymnastics training\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"pitching an idea for a new community art project\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"conference call\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2023-08-02\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-07-12\",\n      \"2024-07-13\",\n      \"2024-07-14\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update a status report\"\n    offset_days = None\n    consecutive_days = None\n    start_time = None\n    duration_hours = None\n\n    for line in conversation:\n        if work_task in line and \"starting in\" in line and \"days\" in line and \"consecutive days\" in line and \"p.m.\" in line:\n            try:\n                offset_days = int(line.split(\"starting in \")[1].split(\" days\")[0])\n                consecutive_days = int(line.split(\"for \")[1].split(\" consecutive days\")[0])\n                start_time_str = line.split(\"from \")[1].split(\" p.m.\")[0]\n                start_hour = int(start_time_str.split(\":\")[0])\n                duration_hours = int(line.split(\"until \")[1].split(\" hours\")[0])\n                end_hour = start_hour + duration_hours\n            except ValueError:\n                continue\n\n    if offset_days is not None and consecutive_days is not None and start_time is not None and duration_hours is not None:\n        start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n        days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(consecutive_days)]\n        hours = (start_hour, end_hour)\n\n        task_details.append({\n            \"work\": work_task,\n            \"days\": days,\n            \"hours\": hours\n        })\n\n    return task_details\n\n\nconversation = [\n    \"What's new in your world?\",\n    \"Makayla:"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    task_details = []\n    work_task = \"conduct routine inspections\"\n    \n    # Convert conversation date to datetime object\n    conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    \n    # Extract dates\n    date_10_days_later = conversation_date_obj + timedelta(days=10)\n    date_14_days_later = conversation_date_obj + timedelta(days=14)\n    \n    dates = [date_10_days_later.strftime(\"%Y-%m-%d\"), date_14_days_later.strftime(\"%Y-%m-%d\")]\n    \n    # Extract time range\n    hours = (8, 12)  # From 8 in the morning for four hours\n    \n    task_details.append({\n        \"work\": work_task,\n        \"days\": dates,\n        \"hours\": hours\n    })\n    \n    return task_details\n```\n"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2023-08-07\",\n      \"2023-08-11\",\n      \"2023-08-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"maintain a training schedule\",\n    \"days\": [\n      \"2024-02-26\",\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2023-08-15\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"start a new floor routine\",\n    \"days\": [\n      \"2023-08-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\"2024-07-12\"],\n    \"hours\": (8, 12)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-08-07\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2023-08-18\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-08-09\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-08-08\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n    task_details = []\n    work_task = \"monitor team activity\"\n    \n    # Calculate the start date based on \"five days ago\"\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=5)\n    \n    # Extract days for the task (three consecutive days)\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n\n    # Extract hours\n    hours = (16, 18)  # 4 p.m. to 6 p.m.\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": hours\n    })\n\n    return task_details\n```"
"```json\n[\n  {\n    \"work\": \"monitor social media trends\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  },\n  {\n    \"work\": \"working on a new play\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2020-10-29\",\n      \"2020-10-30\",\n      \"2020-10-31\",\n      \"2020-11-01\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"KPI\" in line and \"review\" in line:\n            # Extract temporal information\n            days_ago_1 = 10\n            days_ago_2 = 7\n            start_hour = 8\n            duration = 3\n\n            # Calculate absolute dates\n            date_1 = conversation_date - timedelta(days=days_ago_1)\n            date_2 = conversation_date - timedelta(days=days_ago_2)\n            \n            end_hour = start_hour + duration\n            \n            tasks.append({\n                \"work\": \"Review daily KPIs\",\n                \"days\": [date_1.strftime(\"%Y-%m-%d\"), date_2.strftime(\"%Y-%m-%d\")],\n                \"hours\": (start_hour, end_hour)\n            })\n        if \"developing a piece\" in line and \"reconciliation\" in line:\n            tasks.append({\n                \"work\": \"Developing a play about reconciliation\",\n                \"days\": [conversation_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (0, 23) # Assuming the task happens throughout the day\n            })\n            \n    return tasks\n\n# Example usage with the provided conversation:\nconversation = [\n    \"Just wanted to say hi!\",\n    \"Ayanda: Hey Leah! Just wanted to say hi, and also let you know I've been really busy with work lately \u2013 I had to review daily KPIs ten"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-10-30\",\n      \"2020-10-31\",\n      \"2020-11-02\"\n    ],\n    \"hours\": (\n      10,\n      13\n    )\n  },\n  {\n    \"work\": \"secure funding for community centre\",\n    \"days\": [\n      \"2020-11-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Record daily observations for a new play\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-06\"\n    ],\n    \"hours\": (\n      9,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-11-01\"\n    ],\n    \"hours\": (\n      9,\n      12\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"marketing strategy\" in line.lower() or \"sketches\" in line.lower() or \"textile markets\" in line.lower() or \"natural dyes\" in line.lower() or \"venue\" in line.lower() or \"production\" in line.lower():\n            if \"marketing strategy\" in line.lower():\n                task = \"developing a marketing strategy\"\n                if \"yesterday\" in line.lower():\n                    date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                    days = [date.strftime(\"%Y-%m-%d\")]\n                elif \"two days ago\" in line.lower():\n                    date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                    days = [date.strftime(\"%Y-%m-%d\")]\n                else:\n                    days = []\n\n                if \"7 in the morning\" in line.lower() and \"two hours\" in line.lower():\n                    hours = (7, 9)\n                else:\n                    hours = None\n\n                if hours and days:\n                    tasks.append({\"work\": task, \"days\": days, \"hours\": hours})\n\n            elif \"sketches\" in line.lower():\n                task = \"working on sketches for the new collection\"\n                days = []\n                hours = None\n\n            elif \"textile markets\" in line.lower():\n                task = \"visiting textile markets\"\n                days = []\n                hours = None\n\n            elif \"natural dyes\" in line.lower():\n                task = \"experimenting with natural dyes"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2024-01-18\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"brainstorming ideas for a new piece about the changing landscape of community arts funding\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"finalizing a business plan\",\n    \"days\": [\"2024-02-14\"],\n    \"hours\": [7, 9]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2020-10-25\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2020-11-01\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"restoration project\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"writing\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  },\n  {\n    \"work\": \"sketch out ideas for a new play\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-13\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2020-11-07\",\n      \"2020-11-08\",\n      \"2020-11-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"brainstorm ideas for a new play\",\n    \"days\": [\n      \"2020-11-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2020-11-11\",\n      \"2020-11-12\",\n      \"2020-11-13\",\n      \"2020-11-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-07-19\",\n      \"2024-07-25\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-03\",\n      \"2024-03-09\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```python\n[\n    {\n        \"work\": \"prepare a daily briefing\",\n        \"days\": [\"2020-11-09\", \"2020-11-15\"],\n        \"hours\": (11, 15)\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-11-11\"\n    ],\n    \"hours\": (7, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\"2020-11-16\"],\n    \"hours\": (15, 17)\n  },\n  {\n    \"work\": \"theatre work (rehearsals, script readings, lighting)\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  },\n  {\n    \"work\": \"workshopping a new play\",\n    \"days\": [\"2020-11-23\", \"2020-11-24\", \"2020-11-25\", \"2020-11-26\", \"2020-11-27\", \"2020-11-28\", \"2020-11-29\"],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2020-11-10\"\n    ],\n    \"hours\": (7, 11)\n  },\n  {\n    \"work\": \"bringing together the work for a museum exhibit\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"managing a client presentation\",\n    \"days\": [\n      \"2020-11-07\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"editing a new play\",\n    \"days\": [\n      \"2020-11-13\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-11-10\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"brainstorm new ideas for a play\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"catch a new production\",\n    \"days\": [\n      \"2020-11-15\"\n    ],\n    \"hours\": []\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    work_tasks = []\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    \n    for line in conversation:\n        if \"produce a quarterly report\" in line and \"15 days later\" in line and \"11 a.m.\" in line and \"two hours\" in line:\n            task = \"produce a quarterly report\"\n            offset_days = 15\n            task_date = conversation_date + timedelta(days=offset_days)\n            start_hour = 11\n            end_hour = 13\n            \n            work_tasks.append({\n                \"work\": task,\n                \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": (start_hour, end_hour)\n            })\n            \n    return work_tasks\n\n# Example usage (with the provided input):\nconversation = [\n    \"Just wanted to connect.\",\n    \"Ayanda: Hey Noor, just wanted to let you know I'm scheduled to produce a quarterly report 15 days later from 11 a.m. for two hours.\",\n    \"Noor: Hi Ayanda, it\u2019s so good to hear from you! How have things been going with your latest project?\",\n    \"Ayanda: Oh, it\u2019s been quite hectic, balancing rehearsals and planning. I have to produce a quarterly report 15 days later, which is adding to the stress, but it will be good to get it done from 11 a.m. for two hours.\",\n    \"Noor: That sounds like a lot"
"```json\n[\n  {\n    \"work\": \"brainstorm ideas for a new play\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      14,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-06-22\",\n      \"2024-06-23\",\n      \"2024-06-24\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-06-14\",\n      \"2024-06-15\",\n      \"2024-06-16\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-02-29\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each containing task details ('work', 'days', 'hours').\n    \"\"\"\n\n    tasks = []\n    date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"monitor social media trends\" in line:\n            days = [(date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(11, 15)]\n            tasks.append({\n                \"work\": \"monitor social media trends\",\n                \"days\": days,\n                \"hours\": (11, 16)\n            })\n        elif \"delivered a briefcase\" in line:\n            yesterday = date - timedelta(days=1)\n            tasks.append({\n                \"work\": \"deliver a briefcase\",\n                \"days\": [yesterday.strftime(\"%Y-%m-%d\")],\n                \"hours\": (0, 24)  # Assuming the briefcase was delivered sometime yesterday\n            })\n        elif \"wrapped up a wallet\" in line:\n            today = date\n            tasks.append({\n                \"work\": \"wrap up a wallet\",\n                \"days\": [today.strftime(\"%Y-%m-%d\")],\n                \"hours\": (11, 15)\n            })\n        elif \"heading to the leather supplier\" in line:\n            tomorrow = date + timedelta(days=1)\n            tasks.append({\n                \"work\": \"go to the leather supplier\",\n                \"days\": [tomorrow.strftime(\"%Y-%m-%d\")],\n                \"hours\": (11, 15)\n            })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"Watering the office plants\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-13\",\n      \"2024-02-05\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-06-16\",\n      \"2024-06-17\",\n      \"2024-06-25\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing project progress\",\n    \"days\": [\n      \"2024-06-17\",\n      \"2024-06-22\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-06-18\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-01-23\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"design a new briefcase\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"organizing workshop\",\n    \"days\": [\n      \"2024-01-28\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"leather tooling - wallets\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"prepare for lectures\",\n    \"days\": [\n      \"2024-01-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2024-07-11\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"working on a special briefcase\",\n    \"days\": [\n      \"2024-07-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"updating an inventory list\",\n    \"days\": [\n      \"2024-06-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"new wallet design\",\n    \"days\": [\n      \"2024-07-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"visiting a new supplier\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-06-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"starting a new community project\",\n    \"days\": [\n      \"2024-06-24\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"new briefcase commission\",\n    \"days\": [\n      \"2024-06-18\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Submit a project proposal\",\n    \"days\": [\n      \"2024-06-14\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"Working on a briefcase\",\n    \"days\": [\n      \"2024-06-17\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2024-02-09\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2024-06-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work task and temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries containing task details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"monitor quality control metrics\" in line:\n            task_description = \"monitor quality control metrics\"\n            hours = (7, 11)\n            days = []\n\n            if \"Starting in 17 days\" in line:\n                start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=17)\n                for i in range(3):\n                    days.append(start_date.strftime(\"%Y-%m-%d\"))\n                    start_date += timedelta(days=1)\n            if \"two days ago\" in line:\n                past_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=2)\n                days.append(past_date.strftime(\"%Y-%m-%d\"))\n            if \"yesterday\" in line:\n                past_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=1)\n                days.append(past_date.strftime(\"%Y-%m-%d\"))\n            if \"in 14 days\" in line:\n                future_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=14)\n                days.append(future_date.strftime(\"%Y-%m-%d\"))\n            if \"today\" in line:\n                days.append(conversation_date)\n                \n\n            if days:\n                tasks.append({\n                    \"work\": task_description,\n                    \"days\": days,\n                    \"hours\": hours\n                })\n\n    return tasks\n\n\nconversation = [\n    \"How\u2019s everything going?\",\n    \"Tom: Hey Victoria! Things are pretty busy here. I have to monitor quality control metrics Starting in 17"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2024-07-01\",\n      \"2024-07-02\",\n      \"2024-07-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update performance log\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update performance log\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"update performance log\",\n    \"days\": [\n      \"2024-02-27\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  },\n  {\n    \"work\": \"start a new commission\",\n    \"days\": [\n      \"2024-03-04\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct code reviews\",\n    \"days\": [\n      \"2024-06-28\",\n      \"2024-07-04\"\n    ],\n    \"hours\": (12, 16)\n  },\n  {\n    \"work\": \"making a custom briefcase\",\n    \"days\": [\n      \"2024-06-28\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-06-27\",\n      \"2024-07-07\",\n      \"2024-07-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine testing\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"new briefcase designs\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-07-01\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  },\n  {\n    \"work\": \"tooling a floral design on a wallet\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\n      \"2024-07-04\"\n    ],\n    \"hours\": [\n      9,\n      12\n    ]\n  },\n  {\n    \"work\": \"work on a briefcase\",\n    \"days\": [\n      \"2024-07-09\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"sanding some edges\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2024-07-09\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-07-03\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"working on a special briefcase\",\n    \"days\": [\n      \"2024-06-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"produce a quarterly report\",\n    \"days\": [\n      \"2024-07-07\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"prep work for the next batch of orders\",\n    \"days\": [\n      \"2024-07-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2024-07-10\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2022-12-24\",\n      \"2022-12-25\",\n      \"2022-12-26\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"read a technical article\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily review session\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\",\n      \"2024-03-04\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2022-12-17\",\n      \"2022-12-22\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"routine maintenance\",\n    \"days\": [\n      \"2022-12-17\",\n      \"2022-12-27\",\n      \"2022-12-29\"\n    ],\n    \"hours\": [\n      10,\n      12\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2022-12-18\",\n      \"2022-12-23\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-22\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-12-23\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  },\n  {\n    \"work\": \"work on reports\",\n    \"days\": [\n      \"2023-01-12\"\n    ],\n    \"hours\": [\n      0,\n      24\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2022-12-19\"\n    ],\n    \"hours\": (\n      17,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2022-12-20\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  },\n  {\n    \"work\": \"preparing for a concert\",\n    \"days\": [\n      \"2024-03-06\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2022-12-29\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2022-12-19\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2022-12-21\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  },\n  {\n    \"work\": \"start a new briefcase project\",\n    \"days\": [\n      \"2023-01-03\",\n      \"2023-01-04\",\n      \"2023-01-05\",\n      \"2023-01-06\",\n      \"2023-01-07\",\n      \"2023-01-08\",\n      \"2023-01-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2024-07-17\",\n      \"2024-07-18\",\n      \"2024-07-19\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2023-01-04\",\n      \"2023-01-05\",\n      \"2023-01-06\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2023-01-09\",\n      \"2023-01-10\",\n      \"2023-01-11\",\n      \"2023-01-12\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    task_description = \"monitor quality control metrics\"\n    start_hour = 7\n    duration = 3\n    end_hour = start_hour + duration\n\n    # Convert conversation date to datetime object\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Extract dates\n    days = []\n    for line in conversation:\n        if task_description in line:\n            if \"nine days later\" in line:\n                date = date_obj + timedelta(days=9)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"eleven days later\" in line:\n                date = date_obj + timedelta(days=11)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"today\" in line:\n                date = date_obj\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            if \"in two days\" in line:\n                date = date_obj + timedelta(days=2)\n                days.append(date.strftime(\"%Y-%m-%d\"))\n            \n    if days:\n        tasks.append({\n            \"work\": task_description,\n            \"days\": days,\n            \"hours\": (start_hour, end_hour)\n        })\n\n    return tasks\n\n# Example usage with the provided conversation\nconversation = [\n    \"INPUT: Just checking in.\",\n    \"Julia: Hey Xavier! Just wanted to let you know I have to monitor quality control metrics nine days later and then again eleven days later, both times from 7 in the morning for three hours. It's been a busy season with cases!\",\n    \"X"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2023-01-07\",\n      \"2023-01-10\",\n      \"2023-01-13\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2022-12-31\",\n      \"2023-01-04\"\n    ],\n    \"hours\": [\n      15,\n      19\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2023-01-09\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-01-11\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      16,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-12-31\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2023-01-01\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2022-12-31\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    for line in conversation:\n        if \"conduct routine inspections\" in line:\n            task = \"Conduct routine inspections\"\n            try:\n                # Extract the start date (twenty-five days ago)\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                start_date = date_obj - timedelta(days=25)\n                \n                # Extract the duration (three consecutive days)\n                dates = [start_date + timedelta(days=i) for i in range(3)]\n                dates = [date.strftime(\"%Y-%m-%d\") for date in dates]\n                \n                # Extract hours (3 p.m. until 4 hours after that)\n                start_hour = 15\n                end_hour = start_hour + 4\n                hours = (start_hour, end_hour)\n\n                tasks.append({\n                    \"work\": task,\n                    \"days\": dates,\n                    \"hours\": hours\n                })\n            except ValueError:\n                pass  # Handle cases where date parsing fails\n    return tasks\n\n# Example usage with the provided conversation\nconversation = [\n    \"Hey, how have you been?\",\n    \"Louis: Julia, it\u2019s good to hear from you! Things have been rather hectic with the restaurant, though I did manage to conduct routine inspections, started twenty-five days ago, for three consecutive days, all from 3 p.m. until 4 hours after that.\",\n    \"Julia: Oh, that sounds\u2026thorough, Louis. My week\u2019s been pretty intense as well, a new case landed on my"
"```json\n[\n  {\n    \"work\": \"attend daily stand-up meeting\",\n    \"days\": [\n      \"2023-06-27\",\n      \"2023-06-28\",\n      \"2023-06-29\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_work_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with work details, or an empty list if none are found.\n    \"\"\"\n\n    work_details = []\n    date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    for line in conversation:\n        if \"status report\" in line.lower():\n            if \"seven days ago\" in line.lower():\n                start_date = date_obj - timedelta(days=7)\n                days = [start_date.strftime(\"%Y-%m-%d\")]\n                for i in range(1, 4):\n                    next_date = start_date + timedelta(days=i)\n                    days.append(next_date.strftime(\"%Y-%m-%d\"))\n                hours = (11, 15)\n                work_details.append({\n                    \"work\": \"Update status report\",\n                    \"days\": days,\n                    \"hours\": hours\n                })\n        if \"mural project\" in line.lower():\n            work_details.append({\n                \"work\": \"Sketching ideas for a new mural project\",\n                \"days\": [],\n                \"hours\": ()\n            })\n        if \"dessert recipes\" in line.lower() and \"weekend\" in line.lower():\n            work_details.append({\n                \"work\": \"Working on new dessert recipes\",\n                \"days\": [],\n                \"hours\": ()\n            })\n        if \"exhibition next week\" in line.lower():\n            next_week_date = date_obj + timedelta(weeks=1)\n            work_details.append({\n                \"work\": \"Prepare for an exhibition\",\n                \"days\": [next_week_date.strftime(\"%Y-%m-%d\")],\n                \"hours\": ()\n            })\n    return work_details\n\n# Example Usage (with the provided input)\nconversation = [\n    "
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2023-07-02\",\n      \"2023-07-05\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"working on a new dessert\",\n    \"days\": [\n      \"2023-07-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Review daily feedback\",\n    \"days\": [\n      \"2024-02-06\",\n      \"2024-02-11\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Launch a new tasting menu\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Developing new dishes / taking a midday walk for inspiration\",\n    \"days\": [\n      \"2023-06-26\",\n      \"2023-07-01\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a performance report\",\n    \"days\": [\n      \"2023-07-04\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2023-06-22\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"experimenting with new fermentation techniques\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2023-06-23\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a research summary\",\n    \"days\": [\n      \"2023-07-04\"\n    ],\n    \"hours\": [\n      11,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a project timeline\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"compile a weekly summary\",\n    \"days\": [\n      \"2023-06-28\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"experiment with black truffle foam\",\n    \"days\": [\n      \"2024-02-19\",\n      \"2024-02-20\",\n      \"2024-02-21\",\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"make reservations\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a market survey\",\n    \"days\": [\"2024-02-02\"],\n    \"hours\": [15, 17]\n  },\n  {\n    \"work\": \"refine the sauce\",\n    \"days\": [\"2024-02-09\"],\n    \"hours\": [0, 23]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-23\",\n      \"2024-02-24\"\n    ],\n    \"hours\": (7, 10)\n  },\n  {\n    \"work\": \"preparing for a large group\",\n    \"days\": [\n      \"2024-02-24\"\n    ],\n    \"hours\": (18, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a daily work schedule\",\n    \"days\": [\n      \"2023-07-14\",\n      \"2023-07-15\",\n      \"2023-07-16\",\n      \"2023-07-17\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"watering the office plants\",\n    \"days\": [\n      \"2024-02-20\",\n      \"2024-02-24\",\n      \"2024-02-26\"\n    ],\n    \"hours\": [\n      10,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2023-07-10\",\n      \"2023-07-12\",\n      \"2023-07-17\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practice a musical instrument\",\n    \"days\": [\n      \"2024-07-15\",\n      \"2024-07-29\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"preparations for a new assignment\",\n    \"days\": [],\n    \"hours\": (0, 24)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a strategy meeting\",\n    \"days\": [\n      \"2023-07-11\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2023-07-12\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_and_time(conversation, conversation_date):\n    \"\"\"\n    Extracts work-related tasks and their temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"workshop agenda\" in line and \"11 days later\" in line and \"11 a.m.\" in line:\n            try:\n                # Parse the conversation date\n                date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n                # Calculate the date 11 days later\n                task_date = date_obj + timedelta(days=11)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the time range\n                start_hour = 11\n                end_hour = 13\n\n                tasks.append({\n                    \"work\": \"prepare a workshop agenda\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                # Handle potential date parsing errors\n                pass\n\n    return tasks\n\n# Example usage (assuming the conversation date is 2024-01-01)\nconversation = [\n    \"Just dropping you a line.\",\n    \"Louis: Hey Malik, just wanted to let you know I\u2019ve been swamped! I had to prepare a workshop agenda 11 days later, working from 11 a.m. for two hours.\",\n    \"Malik: That sounds intense, Louis. Always pushing the boundaries, aren't you? Been a busy week on my end as well, trying to get this new app feature finalized.\",\n    \"Louis: Oh really? What sort of feature are you working on? I almost forgot, the prepping of the workshop agenda took quite some focus.\",\n    \"Malik: It's geared towards making math more accessible for kids. Trying to incorporate some gamification elements. It's a challenging but rewarding project.\","
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2023-07-18\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2023-07-07\"\n    ],\n    \"hours\": (\n      13,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2023-07-14\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2023-07-09\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2023-07-17\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a progress tracker\",\n    \"days\": [\n      \"2024-08-26\",\n      \"2024-08-27\",\n      \"2024-08-28\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-08-22\",\n      \"2024-08-23\",\n      \"2024-08-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  },\n  {\n    \"work\": \"finish the boat\u2019s frame\",\n    \"days\": [\n      \"2024-08-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a daily safety check\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\",\n      \"2024-02-11\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Conduct routine inspections\",\n    \"days\": [\n      \"2024-08-24\",\n      \"2024-08-30\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"Practice a new solo for the show\",\n    \"days\": [\n      \"2024-09-19\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"Workshop for young musicians\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"gig at The Spotted Cat\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": [\n      0,\n      0\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check inventory levels\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2024-09-02\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  },\n  {\n    \"work\": \"gig at The Spotted Cat\",\n    \"days\": [\n      \"2024-09-21\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"working on a new solo piece\",\n    \"days\": [\n      \"2024-09-13\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-08-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2024-08-27\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"project proposal\" in line.lower():\n            # Extract temporal details\n            try:\n                if \"two days ago\" in line.lower():\n                    offset_days = -2\n                elif \"next week\" in line.lower():\n                    offset_days = 7\n                else:\n                    continue\n\n                date = datetime.strptime(conversation_date, \"%Y-%m-%d\") + timedelta(days=offset_days)\n                date_str = date.strftime(\"%Y-%m-%d\")\n\n                if \"10 in the morning\" in line.lower():\n                    start_hour = 10\n                else:\n                    start_hour = None\n\n                if \"four hours\" in line.lower():\n                    end_hour = start_hour + 4\n                elif \"4 hours after that\" in line.lower():\n                     end_hour = start_hour + 4\n                else:\n                    end_hour = None\n                \n                if start_hour is not None and end_hour is not None:\n                    tasks.append({\n                        \"work\": \"submit a project proposal\",\n                        \"days\": [date_str],\n                        \"hours\": (start_hour, end_hour)\n                    })\n            except ValueError:\n                pass  # Handle potential date parsing errors\n\n    return tasks\n\n# Example usage:\nconversation = [\n    \"Thomas: I was just thinking about you.\",\n    \"Xavier: Hey Thomas! I was just telling myself about how I had to submit a project proposal two days ago, from 10 in the morning until 4 hours after that. It was a bit of a rush, but I got it done.\",\n    \"Thomas: That sounds demanding, Xavier. I\u2019ve"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-08-20\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"analyzing samples\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  },\n  {\n    \"work\": \"working on a piece inspired by the Mississippi River\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"record a tutorial video\" in line:\n            try:\n                # Extract temporal information\n                time_phrase = line.split(\"from \")[1]\n                start_time_str = time_phrase.split(\" in the morning\")[0]\n                start_hour = int(start_time_str)\n                duration_str = time_phrase.split(\"for \")[1].split(\" hours\")[0]\n                duration = int(duration_str)\n                end_hour = start_hour + duration\n\n                # Calculate the date\n                offset_days = 5\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n\n                tasks.append({\n                    \"work\": \"record a tutorial video\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except (IndexError, ValueError):\n                # Handle cases where time information is not properly formatted\n                pass\n\n    return tasks\n\n# Example Usage with the provided input\nconversation = [\n    \"INPUT: Just checking in.\",\n    \"Xavier: Hey Yuna, just wanted to let you know I have to record a tutorial video 5 days later, from 7 in the morning for three hours. It\u2019s been a busy few weeks getting everything ready!\",\n    \"Yuna: Hi Xavier! That sounds like a really interesting project. I\u2019ve been busy planning a new art project for my class.\","
"```json\n[\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2024-08-28\"\n    ],\n    \"hours\": (13, 15)\n  },\n  {\n    \"work\": \"report\",\n    \"days\": [\n      \"2024-09-09\",\n      \"2024-09-10\",\n      \"2024-09-11\"\n    ],\n    \"hours\": (0, 23)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a meal\",\n    \"days\": [\n      \"2024-08-25\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2024-09-04\",\n      \"2024-09-05\",\n      \"2024-09-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a daily huddle\",\n    \"days\": [\n      \"2024-09-07\",\n      \"2024-09-08\",\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-09-07\",\n      \"2024-09-08\",\n      \"2024-09-09\",\n      \"2024-09-10\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    task_descriptions = []\n    conversation_date_str = conversation[0].split(',')[0]\n    conversation_date = datetime.strptime(conversation_date_str, '%Y-%m-%d')\n\n    if \"practice a musical instrument\" in conversation[0]:\n      task = \"practice a musical instrument\"\n      days_later_9 = conversation_date + timedelta(days=9)\n      days_later_16 = conversation_date + timedelta(days=16)\n      hours = (11, 15)  # 11 AM to 3 PM (11 + 4 hours)\n      task_descriptions.append({\n          \"work\": task,\n          \"days\": [days_later_9.strftime(\"%Y-%m-%d\"), days_later_16.strftime(\"%Y-%m-%d\")],\n          \"hours\": hours\n      })\n\n    return task_descriptions\n\n# Example usage:\nconversation = [\n    \"2024-08-26 13:15, Xavier: Hey Andrei, just wanted to let you know I have to practice a musical instrument 9 days later and then again 16 days later, both times from 11 in the morning for four hours.\",\n    \"2024-08-26 13:22, Andrei: Hi Xavier, that sounds intense! Any exciting gigs coming up that you're preparing for?\",\n    \"2024-08-26 13:39, Xavier: Nothing concrete yet, but I'm hoping to land a spot at Preservation Hall soon. It would be a dream to play there. I just need to get through all this practice a musical instrument, especially knowing I had to practice a musical instrument 9 days later and 16 days later from 11 in the morning for four hours.\",\n    \"2024-0"
"```json\n[\n  {\n    \"work\": \"Conduct code reviews\",\n    \"days\": [\n      \"2024-09-11\",\n      \"2024-09-12\",\n      \"2024-09-16\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"Practicing a new solo\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  },\n  {\n    \"work\": \"Workshops sharing oud techniques\",\n    \"days\": [\n      \"2024-10-01\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check system alerts\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-03-02\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-09-09\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2024-09-14\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2024-09-12\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  },\n  {\n    \"work\": \"start a unit on autumn leaves\",\n    \"days\": [\n      \"2024-09-16\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"do a few gigs\",\n    \"days\": [\n      \"2024-09-16\",\n      \"2024-09-17\",\n      \"2024-09-18\",\n      \"2024-09-19\",\n      \"2024-09-20\",\n      \"2024-09-21\",\n      \"2024-09-22\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"working on a new solo\",\n    \"days\": [\n      \"2024-09-08\",\n      \"2024-09-09\",\n      \"2024-09-10\",\n      \"2024-09-11\",\n      \"2024-09-12\",\n      \"2024-09-13\",\n      \"2024-09-14\",\n      \"2024-09-15\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\"2024-09-13\"],\n    \"hours\": (16, 19)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2024-09-11\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a legal memorandum\",\n    \"days\": [\n      \"2024-09-05\"\n    ],\n    \"hours\": [\n      12,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a client presentation\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-14\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a market analysis\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"mentoring session with a young trumpeter\",\n    \"days\": [\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a product prototype\",\n    \"days\": [\n      \"2024-09-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Update progress tracker\",\n    \"days\": [\n      \"2021-10-26\",\n      \"2021-10-27\",\n      \"2021-10-28\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2021-10-24\",\n      \"2021-10-25\",\n      \"2021-10-26\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"daily review session\" in line and \"started 10 days ago\" in line and \"4 consecutive days\" in line and \"11 in the morning\" in line:\n            task = \"daily review session\"\n            start_date = conversation_date - timedelta(days=10)\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(4)]\n            hours = (11, 13)  # 11 a.m. to 1 p.m.\n\n            tasks.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": hours\n            })\n\n    return tasks\n\n# Example usage with the provided input:\nconversation = [\n    \"Long time no talk!\",\n    \"Greta: Hey Heidi! It feels like ages. I've been really busy lately; I started to conduct a daily review session 10 days ago, for 4 consecutive days, and I\u2019ve been doing it from 11 in the morning for two hours each day.\",\n    \"Heidi: Oh, hi Greta! It *has* been a while. That sounds like a lot to take on, but you always manage to balance everything. How's the research going?\",\n    \"Greta: It's good, stressful at times, but rewarding. I was conducting a daily review session, you know, the one I started 10 days ago, for 4 consecutive days, from 11 in the morning for two hours. It really takes a lot out of me.\",\n    "
"```json\n[\n  {\n    \"work\": \"review operational data\",\n    \"days\": [\n      \"2021-10-17\",\n      \"2021-10-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily KPIs\",\n    \"days\": [\n      \"2021-10-17\",\n      \"2021-10-22\",\n      \"2021-10-28\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2023-11-17\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2023-11-17\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    \n    for line in conversation:\n        if \"monitor quality control metrics\" in line:\n            task = \"monitor quality control metrics\"\n            \n            # Extract days offset\n            days_ago = int(line.split(\" \")[-3])\n            \n            # Convert offset to absolute date\n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            task_date = conversation_datetime - timedelta(days=days_ago)\n            task_date_str = task_date.strftime(\"%Y-%m-%d\")\n            \n            # Extract time\n            start_time_str = \"3 p.m.\"\n            start_time = datetime.strptime(start_time_str, \"%I %p\").hour\n            end_time = start_time + 2\n            \n            tasks.append({\n                \"work\": task,\n                \"days\": [task_date_str],\n                \"hours\": (start_time, end_time)\n            })\n\n        if \"sort through footage\" in line:\n            task = \"sort through footage\"\n\n            tasks.append({\n                \"work\": task,\n                \"days\": [],\n                \"hours\": (0, 24)  # Assume it's an ongoing task with no specific hours\n            })\n            \n        if \"fieldwork\" in line and \"next week\" in line:\n            task = \"fieldwork\"\n            \n            conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n            next_week_start = conversation_datetime + timedelta(days=7)\n"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2021-10-20\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revising a project timeline\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      13,\n      16\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2021-10-16\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"market analysis\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a technical blog post\",\n    \"days\": [\n      \"2021-10-27\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"poetry reading\",\n    \"days\": [\n      \"2021-11-08\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"grab a coffee and talk\",\n    \"days\": [\n      \"2021-11-01\",\n      \"2021-11-02\",\n      \"2021-11-03\",\n      \"2021-11-04\",\n      \"2021-11-05\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2021-10-27\"\n    ],\n    \"hours\": [\n      13,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2021-10-20\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"organize a small workshop on microplastics\",\n    \"days\": [\n      \"2021-12-03\"\n    ],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2021-10-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"analyzing some data\",\n    \"days\": [\n      \"2021-10-24\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2021-10-21\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"perform routine testing\",\n    \"days\": [\n      \"2021-11-07\",\n      \"2021-11-08\",\n      \"2021-11-09\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2024-02-23\",\n      \"2024-02-24\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-30\",\n      \"2021-10-31\",\n      \"2021-11-01\",\n      \"2021-11-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-18\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-17\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-19\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  },\n  {\n    \"work\": \"check routine communications\",\n    \"days\": [\n      \"2021-10-25\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details.  Empty list if no task is found.\n    \"\"\"\n    tasks = []\n    work_task = \"update a status report\"\n    \n    # Parse the conversation date\n    try:\n        conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    except ValueError:\n        return []\n\n    # Extract dates\n    date1 = conversation_datetime + timedelta(days=14)\n    date2 = conversation_datetime + timedelta(days=15)\n\n    # Extract hours\n    hours = (7, 9)\n\n    tasks.append({\n        \"work\": work_task,\n        \"days\": [date1.strftime(\"%Y-%m-%d\"), date2.strftime(\"%Y-%m-%d\")],\n        \"hours\": hours\n    })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"respond to customer inquiries\",\n    \"days\": [\n      \"2021-10-29\",\n      \"2021-11-01\",\n      \"2021-11-06\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-29\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"track daily expenses\" in line:\n            task = \"track daily expenses\"\n            try:\n                # Extract the date of the first instance\n                first_instance_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                if \"yesterday\" in line:\n                    first_date = first_instance_date - timedelta(days=1)\n                else:\n                    first_date = first_instance_date\n                first_date_str = first_date.strftime(\"%Y-%m-%d\")\n\n                # Extract the date of the second instance (\"five days later\")\n                second_date = first_date + timedelta(days=5)\n                second_date_str = second_date.strftime(\"%Y-%m-%d\")\n\n                # Extract time\n                start_hour = 15  # 3 p.m.\n                end_hour = start_hour + 4\n\n                tasks.append({\n                    \"work\": task,\n                    \"days\": [first_date_str, second_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle potential date parsing errors\n\n        if \"training session next week\" in line:\n            task = \"preparing for a training session\"\n            try:\n                # Calculate the date for next week\n                conversation_datetime = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n                next_week_date = conversation_datetime + timedelta(days=7)\n                next_week_date_str = next_week_date.strftime(\"%Y-%m-%d\")\n                tasks.append({\n                    \"work\": task"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2021-10-29\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"client meeting\",\n    \"days\": [\n      \"2021-10-30\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2021-11-09\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2021-11-03\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"developing a new character\",\n    \"days\": [\n      \"2021-11-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"Schedule an interview with journalists\",\n    \"days\": [\n      \"2021-11-03\"\n    ],\n    \"hours\": [\n      9,\n      13\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a podcast episode\",\n    \"days\": [\n      \"2021-11-08\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"starting a new chapter of my manga\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2021-11-02\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a press release\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (7, 9)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"write a performance review\",\n    \"days\": [\n      \"2021-11-07\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a daily briefing\",\n    \"days\": [\n      \"2020-09-19\",\n      \"2020-09-20\",\n      \"2020-09-21\"\n    ],\n    \"hours\": [\n      16,\n      18\n    ]\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation, used as a reference for relative dates.\n\n    Returns:\n        list: A list of dictionaries with task, days, and hours.  Returns an empty list if no task is found.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    results = []\n\n    for line in conversation:\n        if \"conduct routine inspections\" in line:\n            task = \"Conduct routine inspections\"\n            \n            # Extract temporal information\n            start_days_ago = 12\n            duration_days = 3\n            start_time_str = \"3 p.m.\"\n            duration_hours = 4\n\n            start_time = datetime.strptime(start_time_str, \"%I %p\")\n            start_hour = start_time.hour\n\n            end_hour = start_hour + duration_hours\n\n            # Calculate the start date\n            start_date = conversation_date - timedelta(days=start_days_ago)\n\n            # Generate the list of dates\n            dates = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n\n            results.append({\n                \"work\": task,\n                \"days\": dates,\n                \"hours\": (start_hour, end_hour)\n            })\n\n    return results\n```\n\n```\n[\n    {\n        \"work\": \"Conduct routine inspections\",\n        \"days\": [\n            \"2024-01-14\",\n            \"2024-01-15\",\n            \"2024-01-16\"\n        ],\n        \"hours\": (\n            15,\n            19\n        )\n    }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update client records\",\n    \"days\": [\n      \"2020-09-18\",\n      \"2020-09-20\"\n    ],\n    \"hours\": (\n      12,\n      16\n    )\n  },\n  {\n    \"work\": \"sketches for a new mural\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      0\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new chapter for manga\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  },\n  {\n    \"work\": \"morning jog\",\n    \"days\": [\n      \"2024-02-26\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"schedule routine maintenance\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-02-22\"):\n    \"\"\"\n    Extracts work-related task details from a conversation transcript.\n\n    Args:\n        conversation (list): A list of strings representing the conversation.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n    \"\"\"\n\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n\n    for line in conversation:\n        if \"revise a project timeline\" in line:\n            try:\n                # Extract the offset in days\n                offset_days = int(line.split(\" \")[-2])\n                # Calculate the absolute date\n                task_date = conversation_date - timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                \n                # Extract the hours\n                start_hour = 7\n                end_hour = start_hour + 4\n\n                tasks.append({\n                    \"work\": \"revise a project timeline\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass\n        \n        if \"digitally coloring my manga\" in line:\n            tasks.append({\n                \"work\": \"digitally coloring manga\",\n                \"days\": [],\n                \"hours\": (0,24)\n            })\n\n    return tasks\n```\n"
"```json\n[\n  {\n    \"work\": \"analyzing sales data\",\n    \"days\": [\n      \"2020-09-17\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a new brochure\",\n    \"days\": [\n      \"2024-02-02\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2020-09-27\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"analyze customer feedback\",\n    \"days\": [\n      \"2020-09-15\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2020-09-19\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"working on a piece for a local mosque \u2013 a large inscription of a verse from the Quran\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": [\n      \"0\",\n      \"24\"\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-09-23\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2020-09-17\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"character design\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"restoration work on a painting\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-10-07\",\n      \"2020-10-08\",\n      \"2020-10-09\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the task board\",\n    \"days\": [\n      \"2024-07-18\",\n      \"2024-07-19\",\n      \"2024-07-20\"\n    ],\n    \"hours\": (8, 10)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-14\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  },\n  {\n    \"work\": \"review daily feedback\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      16,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a virtual meeting\",\n    \"days\": [\n      \"2020-10-01\",\n      \"2020-10-03\",\n      \"2020-10-11\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  },\n  {\n    \"work\": \"finalize a new composition\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"work on the manga\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"focusing on our setlist for the upcoming jazz festival\",\n    \"days\": [],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor quality control metrics\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-19\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2020-10-06\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a project report\",\n    \"days\": [\n      \"2020-10-05\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2020-09-30\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a contract\",\n    \"days\": [\n      \"2020-09-30\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"working on the next chapter of my manga\",\n    \"days\": [],\n    \"hours\": ()\n  },\n  {\n    \"work\": \"preparing for a small performance\",\n    \"days\": [\n      \"2020-10-01\"\n    ],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2020-10-07\"\n    ],\n    \"hours\": [\n      12,\n      16\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attend a client meeting\",\n    \"days\": [\n      \"2020-10-03\"\n    ],\n    \"hours\": (\n      8,\n      10\n    )\n  },\n  {\n    \"work\": \"finishing up the new chapter for my manga\",\n    \"days\": [\n      \"2020-09-29\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"sketching out the concepts for the next chapter of my current series\",\n    \"days\": [\n      \"2024-02-21\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a community event\",\n    \"days\": [\n      \"2020-10-07\"\n    ],\n    \"hours\": [\n      8,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-09-29\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"design a new character's outfit\",\n    \"days\": [\n      \"2020-09-27\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record daily observations\",\n    \"days\": [\n      \"2020-08-18\",\n      \"2020-08-19\",\n      \"2020-08-20\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details and their temporal information from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n\n    tasks = []\n    for line in conversation:\n        if \"update the task board\" in line:\n            # Extract temporal information\n            start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=4)\n            days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(3)]\n            hours = (15, 19)  # 3 p.m. to 7 p.m. (3 + 4 hours)\n\n            tasks.append({\n                \"work\": \"Update the task board\",\n                \"days\": days,\n                \"hours\": hours\n            })\n\n    return tasks\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details from a conversation.\n\n    Args:\n        conversation (list): A list of conversation lines.\n        conversation_date (str): The date of the conversation (YYYY-MM-DD).\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"update a progress tracker\"\n    offset_days = 20\n    duration_days = 4\n    start_hour = 11\n    duration_hours = 4\n\n    start_date = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=offset_days)\n    days = [(start_date + timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(duration_days)]\n    end_hour = start_hour + duration_hours\n\n    task_details.append({\n        \"work\": work_task,\n        \"days\": days,\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return task_details\n\n# Example usage with the provided input:\nconversation = [\n    \"Long time no talk!\",\n    \"Andrei: Hey Ivan! It\u2019s been a while. Just wanted to let you know I've been busy with work. I started to update a progress tracker 20 days ago, for 4 consecutive days, and did that from 11 in the morning until 4 hours after that.\",\n    \"Ivan: Andrei! That\u2019s great to hear from you. How are things going with the violin? Any exciting performances coming up?\",\n    \"Andrei: Things are good, thanks! No immediate performances, just a lot of practice and needing to update a progress tracker. I had to update a progress tracker starting 20 days ago, for 4 consecutive days, starting from 11 in the morning for four hours each day. It was a bit tedious, honestly.\",\n    \"Ivan: I can imagine. Anything repetitive can be a bit draining. I've been focusing on mentoring a few young players, teaching them some new strategies. It's quite fulfilling.\",\n    \""
"```json\n[\n  {\n    \"work\": \"check daily emails\",\n    \"days\": [\n      \"2020-08-16\",\n      \"2020-08-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"participate in a daily briefing\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-02-20\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor system performance\",\n    \"days\": [\n      \"2020-08-17\",\n      \"2020-08-15\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  },\n  {\n    \"work\": \"prep for a new concert series / rehearsals\",\n    \"days\": [\n      \"2020-08-30\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation transcript.\n        conversation_date_str (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    task_details = []\n\n    for line in conversation:\n        if \"social media post\" in line:\n            try:\n                days_ago = int(line.split(\" \")[-2])\n                task_date = conversation_date - timedelta(days=days_ago)\n                start_hour = 16\n                end_hour = start_hour + 3\n                \n                task_details.append({\n                    \"work\": \"creating a social media post\",\n                    \"days\": [task_date.strftime(\"%Y-%m-%d\")],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Handle cases where the number of days isn't an integer\n\n    return task_details\n\n# Example usage\nconversation = [\n    \"Good to hear from you.\",\n    \"Andrei: Hey Henry, it's good to hear from you too! I've been really busy lately \u2013 I had to create a social media post 13 days ago from 4 p.m. until 3 hours after that, and it was quite a rush.\",\n    \"Henry: That sounds like quite a bit to juggle with everything else you do, Andrei! I've been tinkering away in the garage, trying to get a '67 Mustang running smoothly.\",\n    \"Andrei: Oh, a '67 Mustang! Those are beautiful cars. It's good to have a relaxing hobby. I found creating a social media post, even a while back, took a lot out of me.\",\n    \"Henry: It's definitely satisfying to breathe new life into something old. It\u2019s a different kind of"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2020-08-18\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  },\n  {\n    \"work\": \"concert preparations\",\n    \"days\": [],\n    \"hours\": ()\n  },\n  {\n    \"work\": \"sketching out new character designs\",\n    \"days\": [],\n    \"hours\": ()\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a project summary\",\n    \"days\": [\n      \"2020-08-20\"\n    ],\n    \"hours\": [\n      9,\n      11\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete a task checklist\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      9,\n      11\n    )\n  },\n  {\n    \"work\": \"preparing for a concert\",\n    \"days\": [\n      \"2024-03-16\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"draft a customer feedback report\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update an inventory list\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  },\n  {\n    \"work\": \"preparing for a concert\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  },\n  {\n    \"work\": \"new project on coral reefs\",\n    \"days\": [\n      \"2024-03-01\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a training manual\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      12,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"plan a team outing\",\n    \"days\": [\n      \"2020-08-26\"\n    ],\n    \"hours\": [\n      15,\n      17\n    ]\n  },\n  {\n    \"work\": \"practicing for my next concert\",\n    \"days\": [],\n    \"hours\": []\n  },\n  {\n    \"work\": \"working on a new program at the community center to help children with their reading skills\",\n    \"days\": [],\n    \"hours\": []\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a proposal document\",\n    \"days\": [\n      \"2020-08-21\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project progress\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-09\",\n      \"2024-02-10\"\n    ],\n    \"hours\": (16, 18)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor website analytics\",\n    \"days\": [\n      \"2024-02-16\",\n      \"2024-02-17\",\n      \"2024-02-18\"\n    ],\n    \"hours\": [\n      7,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-09-06\",\n      \"2020-09-07\",\n      \"2020-09-08\",\n      \"2020-09-09\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-08-28\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  },\n  {\n    \"work\": \"review project metrics\",\n    \"days\": [\n      \"2020-08-26\"\n    ],\n    \"hours\": (\n      15,\n      18\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor production output\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      15,\n      19\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct routine inspections\",\n    \"days\": [\n      \"2020-08-29\",\n      \"2020-08-30\",\n      \"2020-09-02\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the maintenance log\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_features(conversation, conversation_date=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of lines representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries with task details.\n    \"\"\"\n\n    task_details = []\n    work_task = \"finalize a presentation\"\n    offset_days = None\n    start_hour = None\n    end_hour = None\n\n    for line in conversation:\n        if work_task in line.lower():\n            if \"four days later\" in line.lower():\n                offset_days = 4\n            if \"9 in the morning\" in line.lower():\n                start_hour = 9\n            if \"two hours\" in line.lower():\n                end_hour = 11\n    \n    if offset_days is not None and start_hour is not None and end_hour is not None:\n        date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n        target_date = date_obj + timedelta(days=offset_days)\n        target_date_str = target_date.strftime(\"%Y-%m-%d\")\n        \n        task_details.append({\n            \"work\": work_task,\n            \"days\": [target_date_str],\n            \"hours\": (start_hour, end_hour)\n        })\n\n    return task_details\n\nconversation = [\n    \"Hope things are well.\",\n    \"Andrei: Hey Heidi, things are busy here! I have to finalize a presentation four days later from today, working from 9 in the morning for two hours.\",\n    \"Heidi: Oh, that sounds intense, Andrei! How are the concert preparations going, aside from that?\",\n    \"Andrei: They\u2019re good, just juggling a lot right now. It feels like there's always something to finalize, whether it\u2019s a piece of music or a presentation. How\u2019s the training been?\",\n    \"Heidi: It\u2019s been great, really pushing myself before the season"
"```json\n[\n  {\n    \"work\": \"update the company website\",\n    \"days\": [\n      \"2020-08-30\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"design a product prototype\",\n    \"days\": [\n      \"2020-09-04\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"deliver a training session\",\n    \"days\": [\n      \"2024-03-12\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a budget proposal\",\n    \"days\": [\n      \"2020-09-06\"\n    ],\n    \"hours\": (\n      11,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"designing a new brochure\",\n    \"days\": [\n      \"2024-02-29\"\n    ],\n    \"hours\": (\n      12,\n      15\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalize a business plan\",\n    \"days\": [\n      \"2024-02-08\"\n    ],\n    \"hours\": (\n      14,\n      18\n    )\n  },\n  {\n    \"work\": \"teaching engagements with young violinists\",\n    \"days\": [\n      \"2024-02-10\"\n    ],\n    \"hours\": (\n      0,\n      23\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2020-09-08\"\n    ],\n    \"hours\": (9, 11)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"drafting an email to stakeholders\",\n    \"days\": [\n      \"2020-09-08\"\n    ],\n    \"hours\": [\n      7,\n      9\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"monitor team activity\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"attending a virtual meeting\",\n    \"days\": [\n      \"2024-02-15\",\n      \"2024-02-16\",\n      \"2024-02-17\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"daily planning\",\n    \"days\": [\n      \"2024-02-13\",\n      \"2024-02-14\",\n      \"2024-02-15\",\n      \"2024-02-16\"\n    ],\n    \"hours\": (15, 19)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_temporal_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                            Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details, or an empty list if no task is found.\n    \"\"\"\n\n    task_details = []\n    work_task = \"watering office plants\"\n    \n    # Find mentions of watering plants and extract temporal information\n    for line in conversation:\n        if work_task in line.lower():\n            if \"four days ago\" in line.lower():\n                date1 = datetime.strptime(conversation_date, \"%Y-%m-%d\") - timedelta(days=4)\n                date1_str = date1.strftime(\"%Y-%m-%d\")\n                \n                if \"three days later\" in line.lower():\n                    date2 = datetime.strptime(date1_str, \"%Y-%m-%d\") + timedelta(days=3)\n                    date2_str = date2.strftime(\"%Y-%m-%d\")\n                    \n                    hours = (9, 11)  # 9 in the morning for two hours\n                    task_details.append({\n                        \"work\": work_task,\n                        \"days\": [date1_str, date2_str],\n                        \"hours\": hours\n                    })\n            \n            \n    return task_details\n\n# Example Usage (with the provided input)\nconversation = [\n    \"Yuri: Just wanted to see how you\u2019re doing.\",\n    \"Imani: Hi Yuri! I\u2019m doing well, thanks for asking. I\u2019ve been quite busy with work lately \u2013 I had to water the office plants four days ago, and then again three days later, both times from 9 in the morning for two hours.\",\n    \"Yuri: That sounds like a way to brighten everyone\u2019s day, Imani. It\u2019s good to have a little bit of nature, even indoors"
"```json\n[\n  {\n    \"work\": \"manage a support ticket queue\",\n    \"days\": [\n      \"2024-02-02\",\n      \"2024-02-07\",\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"track daily expenses\",\n    \"days\": [\n      \"2024-02-22\",\n      \"2024-02-25\"\n    ],\n    \"hours\": (\n      8,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"review a research paper\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (7, 9)\n  },\n  {\n    \"work\": \"update a work log\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (16, 17)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"complete an expense report\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (13, 15)\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"develop a marketing strategy\",\n    \"days\": [\n      \"2022-05-30\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"set up a conference call\",\n    \"days\": [\n      \"2022-05-21\"\n    ],\n    \"hours\": (\n      7,\n      10\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"conduct a product demo\",\n    \"days\": [\n      \"2024-02-13\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  },\n  {\n    \"work\": \"playing a gig at The Blue Note\",\n    \"days\": [\n      \"2024-02-23\"\n    ],\n    \"hours\": (\n      0,\n      24\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"organize a workshop\",\n    \"days\": [\n      \"2022-05-21\"\n    ],\n    \"hours\": (\n      10,\n      14\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"revise a project timeline\",\n    \"days\": [\n      \"2024-02-28\"\n    ],\n    \"hours\": (\n      7,\n      9\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a budget spreadsheet\",\n    \"days\": [\n      \"2022-06-01\"\n    ],\n    \"hours\": (\n      15,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"finalizing a presentation\",\n    \"days\": [\n      \"2022-06-01\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"reviewing daily KPIs\",\n    \"days\": [\n      \"2024-07-17\",\n      \"2024-07-18\",\n      \"2024-07-19\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update the sales log\",\n    \"days\": [\n      \"2024-02-29\",\n      \"2024-03-01\",\n      \"2024-03-02\",\n      \"2024-03-03\"\n    ],\n    \"hours\": (15, 18)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task details (task, dates, hours) from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str): The date of the conversation in YYYY-MM-DD format.\n\n    Returns:\n        list: A list of dictionaries, each representing a work task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    tasks = []\n    \n    # Parse the conversation date\n    try:\n        conversation_date = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n    except ValueError:\n        return []\n\n    # Identify the task and its temporal details\n    for line in conversation:\n        if \"monitor system performance\" in line.lower():\n            task = \"monitor system performance\"\n            \n            # Extract temporal information\n            if \"five days ago\" in line.lower():\n                date = conversation_date - timedelta(days=5)\n                \n                if \"from 3 in the afternoon until 4 hours after that\" in line.lower():\n                    hours = (15, 19) \n                elif \"from 3 p.m. until 7 p.m.\" in line.lower():\n                    hours = (15, 19)\n                else:\n                    hours = None\n\n                if date and hours:\n                    tasks.append({\n                        \"work\": task,\n                        \"days\": [date.strftime(\"%Y-%m-%d\")],\n                        \"hours\": hours\n                    })\n            elif \"yesterday\" in line.lower():\n                date = conversation_date - timedelta(days=1)\n                if \"from 3 in the afternoon for four hours\" in line.lower():\n                    hours = (15, 19)\n                else:\n                    hours = None \n                if date and hours:\n                    tasks.append({\n                        \"work\": task,\n                        \"days\": [date.strftime(\"%Y-%m-%d\")],\n                        \"hours\": hours\n                    })\n            elif \"four days ago\" in line.lower():\n                 date"
"```json\n[\n  {\n    \"work\": \"analyze daily reports\",\n    \"days\": [\n      \"2022-06-10\",\n      \"2022-06-16\"\n    ],\n    \"hours\": (\n      11,\n      13\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"practicing a musical instrument\",\n    \"days\": [\n      \"2024-02-08\",\n      \"2024-02-10\",\n      \"2024-02-14\"\n    ],\n    \"hours\": [\n      8,\n      10\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"update a status report\",\n    \"days\": [\n      \"2024-02-27\",\n      \"2024-03-05\"\n    ],\n    \"hours\": (\n      7,\n      11\n    )\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date_str=\"2024-01-01\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date_str (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                                 Defaults to \"2024-01-01\".\n\n    Returns:\n        list: A list of dictionaries, each representing a task with its details.\n              Returns an empty list if no task is found.\n    \"\"\"\n    conversation_date = datetime.strptime(conversation_date_str, \"%Y-%m-%d\")\n    tasks = []\n    for line in conversation:\n        if \"delivering a training session\" in line:\n            try:\n                offset_days = int(line.split(\" \")[-3])\n                task_date = conversation_date + timedelta(days=offset_days)\n                task_date_str = task_date.strftime(\"%Y-%m-%d\")\n                start_hour = 11\n                end_hour = start_hour + 4\n                tasks.append({\n                    \"work\": \"delivering a training session\",\n                    \"days\": [task_date_str],\n                    \"hours\": (start_hour, end_hour)\n                })\n            except ValueError:\n                pass  # Ignore lines where the day offset is not an integer\n    return tasks\n\n# Example usage:\nconversation = [\n    \"How's your spirits?\",\n    \"Imani: Hey Rose! I've been pretty busy lately. I had to deliver a training session 11 days later from 11 in the morning for four hours.\",\n    \"Rose: Oh, that sounds like quite a bit to juggle, Imani. It\u2019s nice to hear from you, though! I've been sorting through a new collection, it's been such fun.\",\n    \"Imani: That sounds lovely, Rose! It\u2019s always good to hear about your adventures in fashion. Though I was exhausted after delivering a training session 11 days later, it was fulfilling to see the impact it had.\",\n    \"Rose: I"
"```json\n[\n  {\n    \"work\": \"host a webinar session\",\n    \"days\": [\n      \"2022-06-05\"\n    ],\n    \"hours\": [\n      15,\n      18\n    ]\n  },\n  {\n    \"work\": \"plan for next week\",\n    \"days\": [\n      \"2022-06-06\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"wrestling with some tricky code\",\n    \"days\": [\n      \"2022-05-28\",\n      \"2022-05-29\",\n      \"2022-05-30\",\n      \"2022-05-31\",\n      \"2022-06-01\",\n      \"2022-06-02\",\n      \"2022-06-03\",\n      \"2022-06-04\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  },\n  {\n    \"work\": \"focused on preventative care\",\n    \"days\": [\n      \"2022-05-28\",\n      \"2022-05-29\",\n      \"2022-05-30\",\n      \"2022-05-31\",\n      \"2022-06-01\",\n      \"2022-06-02\",\n      \"2022-06-03\",\n      \"2022-06-04\"\n    ],\n    \"hours\": [\n      0,\n      23\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"create a social media post\",\n    \"days\": [\n      \"2022-06-07\"\n    ],\n    \"hours\": (\n      11,\n      14\n    )\n  },\n  {\n    \"work\": \"preparations for a concert\",\n    \"days\": [\n      \"2022-06-23\"\n    ],\n    \"hours\": null\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"submit a project proposal\",\n    \"days\": [\n      \"2022-06-09\"\n    ],\n    \"hours\": [\n      12,\n      14\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"record a tutorial video\",\n    \"days\": [\n      \"2022-06-16\"\n    ],\n    \"hours\": (7, 11)\n  }\n]\n```"
"```python\nfrom datetime import datetime, timedelta\n\ndef extract_task_details(conversation, conversation_date=\"2024-01-26\"):\n    \"\"\"\n    Extracts work-related task and its temporal details from a conversation.\n\n    Args:\n        conversation (list): A list of strings representing the conversation transcript.\n        conversation_date (str, optional): The date of the conversation in YYYY-MM-DD format.\n                                             Defaults to \"2024-01-26\".\n\n    Returns:\n        list: A list of dictionaries with task details.  Returns an empty list if no\n              task is found.\n    \"\"\"\n\n    tasks = []\n    work_task = \"revise a contract\"\n    offset_days = 4\n    start_hour = 15\n    end_hour = 18\n\n    # Convert conversation date to datetime object\n    conversation_date_obj = datetime.strptime(conversation_date, \"%Y-%m-%d\")\n\n    # Calculate the date for the task\n    task_date = conversation_date_obj + timedelta(days=offset_days)\n    task_date_str = task_date.strftime(\"%Y-%m-%d\")\n    \n    tasks.append({\n        \"work\": work_task,\n        \"days\": [task_date_str],\n        \"hours\": (start_hour, end_hour)\n    })\n\n    return tasks\n```"
"```json\n[\n  {\n    \"work\": \"draft an email to stakeholders\",\n    \"days\": [\n      \"2022-06-11\"\n    ],\n    \"hours\": [\n      11,\n      15\n    ]\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a workshop agenda\",\n    \"days\": [\n      \"2024-02-16\"\n    ],\n    \"hours\": (\n      11,\n      16\n    )\n  },\n  {\n    \"work\": \"working on a custom briefcase\",\n    \"days\": [\n      \"2024-02-15\"\n    ],\n    \"hours\": (\n      9,\n      17\n    )\n  }\n]\n```"
"```json\n[\n  {\n    \"work\": \"prepare a financial report\",\n    \"days\": [\n      \"2022-06-09\"\n    ],\n    \"hours\": (\n      8,\n      12\n    )\n  }\n]\n```"
