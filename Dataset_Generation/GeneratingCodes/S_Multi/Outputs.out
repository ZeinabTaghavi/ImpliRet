Starting the job
----- Experiment Setup ----
model_name: meta-llama/Llama-3.3-70B-Instruct
track: S
conv_type: Multi
datasets_helping_folder: ./Dataset_Generation/Dataset_Helping
Number of GPUs: 4
---------------------------
Loading the model...
INFO 05-11 12:03:28 config.py:510] This model supports multiple tasks: {'generate', 'embed', 'reward', 'classify', 'score'}. Defaulting to 'generate'.
INFO 05-11 12:04:06 llm_engine.py:234] Initializing an LLM engine (v0.6.6.post1) with config: model='meta-llama/Llama-3.3-70B-Instruct', speculative_config=None, tokenizer='meta-llama/Llama-3.3-70B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir='/dss/dssmcmlfs01/pn25pu/pn25pu-dss-0000/taghavi/HuggingFaceCache/', load_format=LoadFormat.AUTO, tensor_parallel_size=4, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=meta-llama/Llama-3.3-70B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=True, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"candidate_compile_sizes":[],"compile_sizes":[],"capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 05-11 12:04:07 ray_gpu_executor.py:122] use_ray_spmd_worker: False
[36m(RayWorkerWrapper pid=2418474)[0m INFO 05-11 12:04:17 selector.py:120] Using Flash Attention backend.
INFO 05-11 12:04:17 selector.py:120] Using Flash Attention backend.
INFO 05-11 12:04:20 utils.py:918] Found nccl from library libnccl.so.2
INFO 05-11 12:04:20 pynccl.py:69] vLLM is using nccl==2.21.5
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:04:20 utils.py:918] Found nccl from library libnccl.so.2
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:04:20 pynccl.py:69] vLLM is using nccl==2.21.5
INFO 05-11 12:04:23 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /dss/dsshome1/0B/di38wip/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3.json
INFO 05-11 12:04:23 shm_broadcast.py:255] vLLM message queue communication handle: Handle(connect_ip='127.0.0.1', local_reader_ranks=[1, 2, 3], buffer_handle=(3, 4194304, 6, 'psm_802aa4e4'), local_subscribe_port=40449, remote_subscribe_port=None)
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:04:23 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /dss/dsshome1/0B/di38wip/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3.json
[36m(RayWorkerWrapper pid=2418467)[0m INFO 05-11 12:04:17 selector.py:120] Using Flash Attention backend.[32m [repeated 2x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)[0m
INFO 05-11 12:04:23 model_runner.py:1094] Starting to load model meta-llama/Llama-3.3-70B-Instruct...
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:04:23 model_runner.py:1094] Starting to load model meta-llama/Llama-3.3-70B-Instruct...
INFO 05-11 12:04:24 weight_utils.py:251] Using model weights format ['*.safetensors']
[36m(RayWorkerWrapper pid=2418467)[0m INFO 05-11 12:04:24 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 05-11 12:05:11 model_runner.py:1099] Loading model weights took 32.8892 GB
[36m(RayWorkerWrapper pid=2418474)[0m INFO 05-11 12:05:27 model_runner.py:1099] Loading model weights took 32.8892 GB
[36m(RayWorkerWrapper pid=2418474)[0m INFO 05-11 12:04:20 utils.py:918] Found nccl from library libnccl.so.2[32m [repeated 2x across cluster][0m
[36m(RayWorkerWrapper pid=2418474)[0m INFO 05-11 12:04:20 pynccl.py:69] vLLM is using nccl==2.21.5[32m [repeated 2x across cluster][0m
[36m(RayWorkerWrapper pid=2418474)[0m INFO 05-11 12:04:23 custom_all_reduce_utils.py:242] reading GPU P2P access cache from /dss/dsshome1/0B/di38wip/.cache/vllm/gpu_p2p_access_cache_for_0,1,2,3.json[32m [repeated 2x across cluster][0m
[36m(RayWorkerWrapper pid=2418474)[0m INFO 05-11 12:04:23 model_runner.py:1094] Starting to load model meta-llama/Llama-3.3-70B-Instruct...[32m [repeated 2x across cluster][0m
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:04:24 weight_utils.py:251] Using model weights format ['*.safetensors'][32m [repeated 2x across cluster][0m
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:05:38 worker.py:241] Memory profiling takes 9.75 seconds
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:05:38 worker.py:241] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.95) = 75.19GiB
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:05:38 worker.py:241] model weights take 32.89GiB; non_torch_memory takes 2.14GiB; PyTorch activation peak memory takes 0.38GiB; the rest of the memory reserved for KV Cache is 39.79GiB.
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:05:28 model_runner.py:1099] Loading model weights took 32.8892 GB[32m [repeated 2x across cluster][0m
INFO 05-11 12:05:38 worker.py:241] Memory profiling takes 9.89 seconds
INFO 05-11 12:05:38 worker.py:241] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.95) = 75.19GiB
INFO 05-11 12:05:38 worker.py:241] model weights take 32.89GiB; non_torch_memory takes 2.23GiB; PyTorch activation peak memory takes 1.23GiB; the rest of the memory reserved for KV Cache is 38.84GiB.
INFO 05-11 12:05:39 distributed_gpu_executor.py:57] # GPU blocks: 31816, # CPU blocks: 3276
INFO 05-11 12:05:39 distributed_gpu_executor.py:61] Maximum concurrency for 4096 tokens per request: 124.28x
[36m(RayWorkerWrapper pid=2418474)[0m INFO 05-11 12:05:49 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=2418467)[0m INFO 05-11 12:05:38 worker.py:241] Memory profiling takes 9.79 seconds[32m [repeated 2x across cluster][0m
[36m(RayWorkerWrapper pid=2418467)[0m INFO 05-11 12:05:38 worker.py:241] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.95) = 75.19GiB[32m [repeated 2x across cluster][0m
[36m(RayWorkerWrapper pid=2418467)[0m INFO 05-11 12:05:38 worker.py:241] model weights take 32.89GiB; non_torch_memory takes 1.86GiB; PyTorch activation peak memory takes 0.38GiB; the rest of the memory reserved for KV Cache is 40.07GiB.[32m [repeated 2x across cluster][0m
INFO 05-11 12:05:50 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerWrapper pid=2418474)[0m INFO 05-11 12:06:13 custom_all_reduce.py:224] Registering 5635 cuda graph addresses
[36m(RayWorkerWrapper pid=2418467)[0m INFO 05-11 12:05:51 model_runner.py:1415] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.[32m [repeated 2x across cluster][0m
INFO 05-11 12:06:13 custom_all_reduce.py:224] Registering 5635 cuda graph addresses
[36m(RayWorkerWrapper pid=2418467)[0m INFO 05-11 12:06:15 model_runner.py:1535] Graph capturing finished in 24 secs, took 2.46 GiB
INFO 05-11 12:06:15 model_runner.py:1535] Graph capturing finished in 26 secs, took 2.46 GiB
INFO 05-11 12:06:15 llm_engine.py:431] init engine (profile, create kv cache, warmup model) took 46.91 seconds
Model loaded successfully.
-------------------------------- Generating starting lines of conversations --------------------------------
Loading starting conversations from ./Dataset_Generation/Dataset_Helping/S_Multi/S_Multi_Structured_Generated_starting_main_conversations.jsonl
---------------------------------------- Generating the conversations ----------------------------------------
length of prompts_conversation_generation:  500
Loading outputs from step 1...
len(conversation_list) 500
Outputs loaded from ./Dataset_Generation/Dataset_Helping/S_Multi/S_Multi_Structured_Generated_conversation.jsonl and ./Dataset_Generation/Dataset_Helping/S_Multi/S_Multi_Structured_Generated_feature_extraction.jsonl
Number of mistaken conversations: 9
Number of mistaken extractions: 0
End of step 1
mistaken_extracted_idx: []
---------------------------------------- Hard Attempt 0 of 20 ----------------------------------------
Soft Attempt 0 of 35
len(conversation_list) 500
Number of mistaken generated outputs: 9
Number of generated outputs: 500
INFO 05-11 12:06:16 chat_utils.py:333] Detected the chat template content format to be 'string'. You can set `--chat-template-content-format` to override this.
Soft Attempt 1 of 35
len(conversation_list) 500
Number of mistaken generated outputs: 1
Number of generated outputs: 500
Soft Attempt 2 of 35
len(conversation_list) 500
Number of mistaken generated outputs: 0
Number of generated outputs: 500
No mistaken generated outputs
len(conversation_list) 500
Number of mistaken generated outputs: 0
Number of generated outputs: 500
Number of mistaken generated conversations: 0
Number of generated conversations: 500
Generating extractions...
1 - Number of extractions that will be generated: 0
2 - Regenerating works if needed
Regenerating works: Attempt 0 of 35
Number of mistaken works in after 20 attempts: 0
3 - Regenerating conversation if needed...
Number of mistaken extractions: 0
[]
Number of extractions: 500
+++++++++++++++++++++++++++++++++++++++++++++
saving outputs...
outputs saved: 
 ./Dataset_Generation/Dataset_Helping/S_Multi/S_Multi_Structured_Generated_conversation.jsonl 
 ./Dataset_Generation/Dataset_Helping/S_Multi/S_Multi_Structured_Generated_feature_extraction.jsonl
0
---------------------------------------- Dataset Generation Completed ----------------------------------------
Process group destroyed.
[36m(RayWorkerWrapper pid=2418467)[0m INFO 05-11 12:06:15 custom_all_reduce.py:224] Registering 5635 cuda graph addresses[32m [repeated 2x across cluster][0m
[36m(RayWorkerWrapper pid=2418472)[0m INFO 05-11 12:06:15 model_runner.py:1535] Graph capturing finished in 26 secs, took 2.46 GiB[32m [repeated 2x across cluster][0m
Job finished
