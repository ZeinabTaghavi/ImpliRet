[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
INFO 06-09 11:27:25 [__init__.py:243] Automatically detected platform cuda.
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
INFO 06-09 11:27:30 [__init__.py:31] Available plugins for group vllm.general_plugins:
INFO 06-09 11:27:30 [__init__.py:33] - lora_filesystem_resolver -> vllm.plugins.lora_resolvers.filesystem_resolver:register_filesystem_resolver
INFO 06-09 11:27:30 [__init__.py:36] All plugins in this group will be loaded. Set `VLLM_PLUGINS` to control which plugins to load.
[start_vllm] Waiting for vLLM /health…
INFO 06-09 11:27:31 [api_server.py:1289] vLLM API server version 0.9.0.1
INFO 06-09 11:27:32 [cli_args.py:300] non-default args: {'max_model_len': 4096, 'tensor_parallel_size': 2, 'gpu_memory_utilization': 0.95}
WARNING 06-09 11:27:32 [utils.py:2371] Found ulimit of 51200 and failed to automatically increase with error current limit exceeds maximum limit. This can cause fd limit errors like `OSError: [Errno 24] Too many open files`. Consider increasing with ulimit -n
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
INFO 06-09 11:27:46 [config.py:793] This model supports multiple tasks: {'reward', 'score', 'generate', 'classify', 'embed'}. Defaulting to 'generate'.
INFO 06-09 11:27:46 [config.py:1875] Defaulting to use mp for distributed inference
INFO 06-09 11:27:46 [config.py:2118] Chunked prefill is enabled with max_num_batched_tokens=2048.
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
INFO 06-09 11:27:55 [__init__.py:243] Automatically detected platform cuda.
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
INFO 06-09 11:27:59 [core.py:438] Waiting for init message from front-end.
[start_vllm] Waiting for vLLM /health…
INFO 06-09 11:27:59 [__init__.py:31] Available plugins for group vllm.general_plugins:
INFO 06-09 11:27:59 [__init__.py:33] - lora_filesystem_resolver -> vllm.plugins.lora_resolvers.filesystem_resolver:register_filesystem_resolver
INFO 06-09 11:27:59 [__init__.py:36] All plugins in this group will be loaded. Set `VLLM_PLUGINS` to control which plugins to load.
INFO 06-09 11:27:59 [core.py:65] Initializing a V1 LLM engine (v0.9.0.1) with config: model='meta-llama/Llama-3.3-70B-Instruct', speculative_config=None, tokenizer='meta-llama/Llama-3.3-70B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=meta-llama/Llama-3.3-70B-Instruct, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level": 3, "custom_ops": ["none"], "splitting_ops": ["vllm.unified_attention", "vllm.unified_attention_with_output"], "compile_sizes": [], "inductor_compile_config": {"enable_auto_functionalized_v2": false}, "use_cudagraph": true, "cudagraph_num_of_warmups": 1, "cudagraph_capture_sizes": [512, 504, 496, 488, 480, 472, 464, 456, 448, 440, 432, 424, 416, 408, 400, 392, 384, 376, 368, 360, 352, 344, 336, 328, 320, 312, 304, 296, 288, 280, 272, 264, 256, 248, 240, 232, 224, 216, 208, 200, 192, 184, 176, 168, 160, 152, 144, 136, 128, 120, 112, 104, 96, 88, 80, 72, 64, 56, 48, 40, 32, 24, 16, 8, 4, 2, 1], "max_capture_size": 512}
WARNING 06-09 11:27:59 [multiproc_worker_utils.py:306] Reducing Torch parallelism from 8 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
INFO 06-09 11:27:59 [shm_broadcast.py:250] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 10485760, 10, 'psm_c8840ebb'), local_subscribe_addr='ipc:///tmp/ff2fd0fe-2dd8-47d8-9db3-9040f7c1a809', remote_subscribe_addr=None, remote_addr_ipv6=False)
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
[start_vllm] Waiting for vLLM /health…
